// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: steammessages_twofactor.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CTwoFactor_Status_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CTwoFactor_Status_Request) Reset() {
	*x = CTwoFactor_Status_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_Status_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_Status_Request) ProtoMessage() {}

func (x *CTwoFactor_Status_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_Status_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_Status_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{0}
}

func (x *CTwoFactor_Status_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CTwoFactor_Status_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                       *uint32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	InactivationReason          *uint32 `protobuf:"varint,2,opt,name=inactivation_reason,json=inactivationReason" json:"inactivation_reason,omitempty"`
	AuthenticatorType           *uint32 `protobuf:"varint,3,opt,name=authenticator_type,json=authenticatorType" json:"authenticator_type,omitempty"`
	AuthenticatorAllowed        *bool   `protobuf:"varint,4,opt,name=authenticator_allowed,json=authenticatorAllowed" json:"authenticator_allowed,omitempty"`
	SteamguardScheme            *uint32 `protobuf:"varint,5,opt,name=steamguard_scheme,json=steamguardScheme" json:"steamguard_scheme,omitempty"`
	TokenGid                    *string `protobuf:"bytes,6,opt,name=token_gid,json=tokenGid" json:"token_gid,omitempty"`
	EmailValidated              *bool   `protobuf:"varint,7,opt,name=email_validated,json=emailValidated" json:"email_validated,omitempty"`
	DeviceIdentifier            *string `protobuf:"bytes,8,opt,name=device_identifier,json=deviceIdentifier" json:"device_identifier,omitempty"`
	TimeCreated                 *uint32 `protobuf:"varint,9,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	RevocationAttemptsRemaining *uint32 `protobuf:"varint,10,opt,name=revocation_attempts_remaining,json=revocationAttemptsRemaining" json:"revocation_attempts_remaining,omitempty"`
	ClassifiedAgent             *string `protobuf:"bytes,11,opt,name=classified_agent,json=classifiedAgent" json:"classified_agent,omitempty"`
	AllowExternalAuthenticator  *bool   `protobuf:"varint,12,opt,name=allow_external_authenticator,json=allowExternalAuthenticator" json:"allow_external_authenticator,omitempty"`
	TimeTransferred             *uint32 `protobuf:"varint,13,opt,name=time_transferred,json=timeTransferred" json:"time_transferred,omitempty"`
}

func (x *CTwoFactor_Status_Response) Reset() {
	*x = CTwoFactor_Status_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_Status_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_Status_Response) ProtoMessage() {}

func (x *CTwoFactor_Status_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_Status_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_Status_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{1}
}

func (x *CTwoFactor_Status_Response) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CTwoFactor_Status_Response) GetInactivationReason() uint32 {
	if x != nil && x.InactivationReason != nil {
		return *x.InactivationReason
	}
	return 0
}

func (x *CTwoFactor_Status_Response) GetAuthenticatorType() uint32 {
	if x != nil && x.AuthenticatorType != nil {
		return *x.AuthenticatorType
	}
	return 0
}

func (x *CTwoFactor_Status_Response) GetAuthenticatorAllowed() bool {
	if x != nil && x.AuthenticatorAllowed != nil {
		return *x.AuthenticatorAllowed
	}
	return false
}

func (x *CTwoFactor_Status_Response) GetSteamguardScheme() uint32 {
	if x != nil && x.SteamguardScheme != nil {
		return *x.SteamguardScheme
	}
	return 0
}

func (x *CTwoFactor_Status_Response) GetTokenGid() string {
	if x != nil && x.TokenGid != nil {
		return *x.TokenGid
	}
	return ""
}

func (x *CTwoFactor_Status_Response) GetEmailValidated() bool {
	if x != nil && x.EmailValidated != nil {
		return *x.EmailValidated
	}
	return false
}

func (x *CTwoFactor_Status_Response) GetDeviceIdentifier() string {
	if x != nil && x.DeviceIdentifier != nil {
		return *x.DeviceIdentifier
	}
	return ""
}

func (x *CTwoFactor_Status_Response) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CTwoFactor_Status_Response) GetRevocationAttemptsRemaining() uint32 {
	if x != nil && x.RevocationAttemptsRemaining != nil {
		return *x.RevocationAttemptsRemaining
	}
	return 0
}

func (x *CTwoFactor_Status_Response) GetClassifiedAgent() string {
	if x != nil && x.ClassifiedAgent != nil {
		return *x.ClassifiedAgent
	}
	return ""
}

func (x *CTwoFactor_Status_Response) GetAllowExternalAuthenticator() bool {
	if x != nil && x.AllowExternalAuthenticator != nil {
		return *x.AllowExternalAuthenticator
	}
	return false
}

func (x *CTwoFactor_Status_Response) GetTimeTransferred() uint32 {
	if x != nil && x.TimeTransferred != nil {
		return *x.TimeTransferred
	}
	return 0
}

type CTwoFactor_AddAuthenticator_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthenticatorTime *uint64  `protobuf:"varint,2,opt,name=authenticator_time,json=authenticatorTime" json:"authenticator_time,omitempty"`
	SerialNumber      *uint64  `protobuf:"fixed64,3,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	AuthenticatorType *uint32  `protobuf:"varint,4,opt,name=authenticator_type,json=authenticatorType" json:"authenticator_type,omitempty"`
	DeviceIdentifier  *string  `protobuf:"bytes,5,opt,name=device_identifier,json=deviceIdentifier" json:"device_identifier,omitempty"`
	SmsPhoneId        *string  `protobuf:"bytes,6,opt,name=sms_phone_id,json=smsPhoneId" json:"sms_phone_id,omitempty"`
	HttpHeaders       []string `protobuf:"bytes,7,rep,name=http_headers,json=httpHeaders" json:"http_headers,omitempty"`
	Version           *uint32  `protobuf:"varint,8,opt,name=version,def=1" json:"version,omitempty"`
}

// Default values for CTwoFactor_AddAuthenticator_Request fields.
const (
	Default_CTwoFactor_AddAuthenticator_Request_Version = uint32(1)
)

func (x *CTwoFactor_AddAuthenticator_Request) Reset() {
	*x = CTwoFactor_AddAuthenticator_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_AddAuthenticator_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_AddAuthenticator_Request) ProtoMessage() {}

func (x *CTwoFactor_AddAuthenticator_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_AddAuthenticator_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_AddAuthenticator_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{2}
}

func (x *CTwoFactor_AddAuthenticator_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CTwoFactor_AddAuthenticator_Request) GetAuthenticatorTime() uint64 {
	if x != nil && x.AuthenticatorTime != nil {
		return *x.AuthenticatorTime
	}
	return 0
}

func (x *CTwoFactor_AddAuthenticator_Request) GetSerialNumber() uint64 {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return 0
}

func (x *CTwoFactor_AddAuthenticator_Request) GetAuthenticatorType() uint32 {
	if x != nil && x.AuthenticatorType != nil {
		return *x.AuthenticatorType
	}
	return 0
}

func (x *CTwoFactor_AddAuthenticator_Request) GetDeviceIdentifier() string {
	if x != nil && x.DeviceIdentifier != nil {
		return *x.DeviceIdentifier
	}
	return ""
}

func (x *CTwoFactor_AddAuthenticator_Request) GetSmsPhoneId() string {
	if x != nil && x.SmsPhoneId != nil {
		return *x.SmsPhoneId
	}
	return ""
}

func (x *CTwoFactor_AddAuthenticator_Request) GetHttpHeaders() []string {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *CTwoFactor_AddAuthenticator_Request) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_CTwoFactor_AddAuthenticator_Request_Version
}

type CTwoFactor_AddAuthenticator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedSecret    []byte  `protobuf:"bytes,1,opt,name=shared_secret,json=sharedSecret" json:"shared_secret,omitempty"`
	SerialNumber    *uint64 `protobuf:"fixed64,2,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	RevocationCode  *string `protobuf:"bytes,3,opt,name=revocation_code,json=revocationCode" json:"revocation_code,omitempty"`
	Uri             *string `protobuf:"bytes,4,opt,name=uri" json:"uri,omitempty"`
	ServerTime      *uint64 `protobuf:"varint,5,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	AccountName     *string `protobuf:"bytes,6,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	TokenGid        *string `protobuf:"bytes,7,opt,name=token_gid,json=tokenGid" json:"token_gid,omitempty"`
	IdentitySecret  []byte  `protobuf:"bytes,8,opt,name=identity_secret,json=identitySecret" json:"identity_secret,omitempty"`
	Secret_1        []byte  `protobuf:"bytes,9,opt,name=secret_1,json=secret1" json:"secret_1,omitempty"`
	Status          *int32  `protobuf:"varint,10,opt,name=status" json:"status,omitempty"`
	PhoneNumberHint *string `protobuf:"bytes,11,opt,name=phone_number_hint,json=phoneNumberHint" json:"phone_number_hint,omitempty"`
}

func (x *CTwoFactor_AddAuthenticator_Response) Reset() {
	*x = CTwoFactor_AddAuthenticator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_AddAuthenticator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_AddAuthenticator_Response) ProtoMessage() {}

func (x *CTwoFactor_AddAuthenticator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_AddAuthenticator_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_AddAuthenticator_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{3}
}

func (x *CTwoFactor_AddAuthenticator_Response) GetSharedSecret() []byte {
	if x != nil {
		return x.SharedSecret
	}
	return nil
}

func (x *CTwoFactor_AddAuthenticator_Response) GetSerialNumber() uint64 {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return 0
}

func (x *CTwoFactor_AddAuthenticator_Response) GetRevocationCode() string {
	if x != nil && x.RevocationCode != nil {
		return *x.RevocationCode
	}
	return ""
}

func (x *CTwoFactor_AddAuthenticator_Response) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *CTwoFactor_AddAuthenticator_Response) GetServerTime() uint64 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CTwoFactor_AddAuthenticator_Response) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CTwoFactor_AddAuthenticator_Response) GetTokenGid() string {
	if x != nil && x.TokenGid != nil {
		return *x.TokenGid
	}
	return ""
}

func (x *CTwoFactor_AddAuthenticator_Response) GetIdentitySecret() []byte {
	if x != nil {
		return x.IdentitySecret
	}
	return nil
}

func (x *CTwoFactor_AddAuthenticator_Response) GetSecret_1() []byte {
	if x != nil {
		return x.Secret_1
	}
	return nil
}

func (x *CTwoFactor_AddAuthenticator_Response) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CTwoFactor_AddAuthenticator_Response) GetPhoneNumberHint() string {
	if x != nil && x.PhoneNumberHint != nil {
		return *x.PhoneNumberHint
	}
	return ""
}

type CTwoFactor_SendEmail_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid               *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	EmailType             *uint32 `protobuf:"varint,2,opt,name=email_type,json=emailType" json:"email_type,omitempty"`
	IncludeActivationCode *bool   `protobuf:"varint,3,opt,name=include_activation_code,json=includeActivationCode" json:"include_activation_code,omitempty"`
}

func (x *CTwoFactor_SendEmail_Request) Reset() {
	*x = CTwoFactor_SendEmail_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_SendEmail_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_SendEmail_Request) ProtoMessage() {}

func (x *CTwoFactor_SendEmail_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_SendEmail_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_SendEmail_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{4}
}

func (x *CTwoFactor_SendEmail_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CTwoFactor_SendEmail_Request) GetEmailType() uint32 {
	if x != nil && x.EmailType != nil {
		return *x.EmailType
	}
	return 0
}

func (x *CTwoFactor_SendEmail_Request) GetIncludeActivationCode() bool {
	if x != nil && x.IncludeActivationCode != nil {
		return *x.IncludeActivationCode
	}
	return false
}

type CTwoFactor_SendEmail_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTwoFactor_SendEmail_Response) Reset() {
	*x = CTwoFactor_SendEmail_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_SendEmail_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_SendEmail_Response) ProtoMessage() {}

func (x *CTwoFactor_SendEmail_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_SendEmail_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_SendEmail_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{5}
}

type CTwoFactor_FinalizeAddAuthenticator_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthenticatorCode *string  `protobuf:"bytes,2,opt,name=authenticator_code,json=authenticatorCode" json:"authenticator_code,omitempty"`
	AuthenticatorTime *uint64  `protobuf:"varint,3,opt,name=authenticator_time,json=authenticatorTime" json:"authenticator_time,omitempty"`
	ActivationCode    *string  `protobuf:"bytes,4,opt,name=activation_code,json=activationCode" json:"activation_code,omitempty"`
	HttpHeaders       []string `protobuf:"bytes,5,rep,name=http_headers,json=httpHeaders" json:"http_headers,omitempty"`
	ValidateSmsCode   *bool    `protobuf:"varint,6,opt,name=validate_sms_code,json=validateSmsCode" json:"validate_sms_code,omitempty"`
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) Reset() {
	*x = CTwoFactor_FinalizeAddAuthenticator_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_FinalizeAddAuthenticator_Request) ProtoMessage() {}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_FinalizeAddAuthenticator_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_FinalizeAddAuthenticator_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{6}
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) GetAuthenticatorCode() string {
	if x != nil && x.AuthenticatorCode != nil {
		return *x.AuthenticatorCode
	}
	return ""
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) GetAuthenticatorTime() uint64 {
	if x != nil && x.AuthenticatorTime != nil {
		return *x.AuthenticatorTime
	}
	return 0
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) GetActivationCode() string {
	if x != nil && x.ActivationCode != nil {
		return *x.ActivationCode
	}
	return ""
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) GetHttpHeaders() []string {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Request) GetValidateSmsCode() bool {
	if x != nil && x.ValidateSmsCode != nil {
		return *x.ValidateSmsCode
	}
	return false
}

type CTwoFactor_FinalizeAddAuthenticator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	WantMore   *bool   `protobuf:"varint,2,opt,name=want_more,json=wantMore" json:"want_more,omitempty"`
	ServerTime *uint64 `protobuf:"varint,3,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Status     *int32  `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Response) Reset() {
	*x = CTwoFactor_FinalizeAddAuthenticator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_FinalizeAddAuthenticator_Response) ProtoMessage() {}

func (x *CTwoFactor_FinalizeAddAuthenticator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_FinalizeAddAuthenticator_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_FinalizeAddAuthenticator_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{7}
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Response) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Response) GetWantMore() bool {
	if x != nil && x.WantMore != nil {
		return *x.WantMore
	}
	return false
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Response) GetServerTime() uint64 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CTwoFactor_FinalizeAddAuthenticator_Response) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type CTwoFactor_UpdateTokenVersion_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid   *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Version   *uint32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Signature []byte  `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (x *CTwoFactor_UpdateTokenVersion_Request) Reset() {
	*x = CTwoFactor_UpdateTokenVersion_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_UpdateTokenVersion_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_UpdateTokenVersion_Request) ProtoMessage() {}

func (x *CTwoFactor_UpdateTokenVersion_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_UpdateTokenVersion_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_UpdateTokenVersion_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{8}
}

func (x *CTwoFactor_UpdateTokenVersion_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CTwoFactor_UpdateTokenVersion_Request) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CTwoFactor_UpdateTokenVersion_Request) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CTwoFactor_UpdateTokenVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTwoFactor_UpdateTokenVersion_Response) Reset() {
	*x = CTwoFactor_UpdateTokenVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_UpdateTokenVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_UpdateTokenVersion_Response) ProtoMessage() {}

func (x *CTwoFactor_UpdateTokenVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_UpdateTokenVersion_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_UpdateTokenVersion_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{9}
}

type CTwoFactor_RemoveAuthenticator_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevocationCode             *string `protobuf:"bytes,2,opt,name=revocation_code,json=revocationCode" json:"revocation_code,omitempty"`
	RevocationReason           *uint32 `protobuf:"varint,5,opt,name=revocation_reason,json=revocationReason" json:"revocation_reason,omitempty"`
	SteamguardScheme           *uint32 `protobuf:"varint,6,opt,name=steamguard_scheme,json=steamguardScheme" json:"steamguard_scheme,omitempty"`
	RemoveAllSteamguardCookies *bool   `protobuf:"varint,7,opt,name=remove_all_steamguard_cookies,json=removeAllSteamguardCookies" json:"remove_all_steamguard_cookies,omitempty"`
}

func (x *CTwoFactor_RemoveAuthenticator_Request) Reset() {
	*x = CTwoFactor_RemoveAuthenticator_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_RemoveAuthenticator_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_RemoveAuthenticator_Request) ProtoMessage() {}

func (x *CTwoFactor_RemoveAuthenticator_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_RemoveAuthenticator_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_RemoveAuthenticator_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{10}
}

func (x *CTwoFactor_RemoveAuthenticator_Request) GetRevocationCode() string {
	if x != nil && x.RevocationCode != nil {
		return *x.RevocationCode
	}
	return ""
}

func (x *CTwoFactor_RemoveAuthenticator_Request) GetRevocationReason() uint32 {
	if x != nil && x.RevocationReason != nil {
		return *x.RevocationReason
	}
	return 0
}

func (x *CTwoFactor_RemoveAuthenticator_Request) GetSteamguardScheme() uint32 {
	if x != nil && x.SteamguardScheme != nil {
		return *x.SteamguardScheme
	}
	return 0
}

func (x *CTwoFactor_RemoveAuthenticator_Request) GetRemoveAllSteamguardCookies() bool {
	if x != nil && x.RemoveAllSteamguardCookies != nil {
		return *x.RemoveAllSteamguardCookies
	}
	return false
}

type CTwoFactor_RemoveAuthenticator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                     *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ServerTime                  *uint64 `protobuf:"varint,3,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	RevocationAttemptsRemaining *uint32 `protobuf:"varint,5,opt,name=revocation_attempts_remaining,json=revocationAttemptsRemaining" json:"revocation_attempts_remaining,omitempty"`
}

func (x *CTwoFactor_RemoveAuthenticator_Response) Reset() {
	*x = CTwoFactor_RemoveAuthenticator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_RemoveAuthenticator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_RemoveAuthenticator_Response) ProtoMessage() {}

func (x *CTwoFactor_RemoveAuthenticator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_RemoveAuthenticator_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_RemoveAuthenticator_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{11}
}

func (x *CTwoFactor_RemoveAuthenticator_Response) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CTwoFactor_RemoveAuthenticator_Response) GetServerTime() uint64 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CTwoFactor_RemoveAuthenticator_Response) GetRevocationAttemptsRemaining() uint32 {
	if x != nil && x.RevocationAttemptsRemaining != nil {
		return *x.RevocationAttemptsRemaining
	}
	return 0
}

type CTwoFactor_CreateEmergencyCodes_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (x *CTwoFactor_CreateEmergencyCodes_Request) Reset() {
	*x = CTwoFactor_CreateEmergencyCodes_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_CreateEmergencyCodes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_CreateEmergencyCodes_Request) ProtoMessage() {}

func (x *CTwoFactor_CreateEmergencyCodes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_CreateEmergencyCodes_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_CreateEmergencyCodes_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{12}
}

func (x *CTwoFactor_CreateEmergencyCodes_Request) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type CTwoFactor_CreateEmergencyCodes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes" json:"codes,omitempty"`
}

func (x *CTwoFactor_CreateEmergencyCodes_Response) Reset() {
	*x = CTwoFactor_CreateEmergencyCodes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_CreateEmergencyCodes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_CreateEmergencyCodes_Response) ProtoMessage() {}

func (x *CTwoFactor_CreateEmergencyCodes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_CreateEmergencyCodes_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_CreateEmergencyCodes_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{13}
}

func (x *CTwoFactor_CreateEmergencyCodes_Response) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type CTwoFactor_DestroyEmergencyCodes_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CTwoFactor_DestroyEmergencyCodes_Request) Reset() {
	*x = CTwoFactor_DestroyEmergencyCodes_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_DestroyEmergencyCodes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_DestroyEmergencyCodes_Request) ProtoMessage() {}

func (x *CTwoFactor_DestroyEmergencyCodes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_DestroyEmergencyCodes_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_DestroyEmergencyCodes_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{14}
}

func (x *CTwoFactor_DestroyEmergencyCodes_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CTwoFactor_DestroyEmergencyCodes_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTwoFactor_DestroyEmergencyCodes_Response) Reset() {
	*x = CTwoFactor_DestroyEmergencyCodes_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_DestroyEmergencyCodes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_DestroyEmergencyCodes_Response) ProtoMessage() {}

func (x *CTwoFactor_DestroyEmergencyCodes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_DestroyEmergencyCodes_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_DestroyEmergencyCodes_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{15}
}

type CTwoFactor_ValidateToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (x *CTwoFactor_ValidateToken_Request) Reset() {
	*x = CTwoFactor_ValidateToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_ValidateToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_ValidateToken_Request) ProtoMessage() {}

func (x *CTwoFactor_ValidateToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_ValidateToken_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_ValidateToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{16}
}

func (x *CTwoFactor_ValidateToken_Request) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type CTwoFactor_ValidateToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid *bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (x *CTwoFactor_ValidateToken_Response) Reset() {
	*x = CTwoFactor_ValidateToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_ValidateToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_ValidateToken_Response) ProtoMessage() {}

func (x *CTwoFactor_ValidateToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_ValidateToken_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_ValidateToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{17}
}

func (x *CTwoFactor_ValidateToken_Response) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

type CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request) Reset() {
	*x = CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request) ProtoMessage() {}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{18}
}

type CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response) Reset() {
	*x = CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response) ProtoMessage() {}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{19}
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmsCode          *string `protobuf:"bytes,1,opt,name=sms_code,json=smsCode" json:"sms_code,omitempty"`
	GenerateNewToken *bool   `protobuf:"varint,2,opt,name=generate_new_token,json=generateNewToken" json:"generate_new_token,omitempty"`
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) Reset() {
	*x = CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) ProtoMessage() {}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request.ProtoReflect.Descriptor instead.
func (*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{20}
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) GetSmsCode() string {
	if x != nil && x.SmsCode != nil {
		return *x.SmsCode
	}
	return ""
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request) GetGenerateNewToken() bool {
	if x != nil && x.GenerateNewToken != nil {
		return *x.GenerateNewToken
	}
	return false
}

type CRemoveAuthenticatorViaChallengeContinue_Replacement_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedSecret     []byte  `protobuf:"bytes,1,opt,name=shared_secret,json=sharedSecret" json:"shared_secret,omitempty"`
	SerialNumber     *uint64 `protobuf:"fixed64,2,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	RevocationCode   *string `protobuf:"bytes,3,opt,name=revocation_code,json=revocationCode" json:"revocation_code,omitempty"`
	Uri              *string `protobuf:"bytes,4,opt,name=uri" json:"uri,omitempty"`
	ServerTime       *uint64 `protobuf:"varint,5,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	AccountName      *string `protobuf:"bytes,6,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	TokenGid         *string `protobuf:"bytes,7,opt,name=token_gid,json=tokenGid" json:"token_gid,omitempty"`
	IdentitySecret   []byte  `protobuf:"bytes,8,opt,name=identity_secret,json=identitySecret" json:"identity_secret,omitempty"`
	Secret_1         []byte  `protobuf:"bytes,9,opt,name=secret_1,json=secret1" json:"secret_1,omitempty"`
	Status           *int32  `protobuf:"varint,10,opt,name=status" json:"status,omitempty"`
	SteamguardScheme *uint32 `protobuf:"varint,11,opt,name=steamguard_scheme,json=steamguardScheme" json:"steamguard_scheme,omitempty"`
	Steamid          *uint64 `protobuf:"fixed64,12,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) Reset() {
	*x = CRemoveAuthenticatorViaChallengeContinue_Replacement_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) ProtoMessage() {}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoveAuthenticatorViaChallengeContinue_Replacement_Token.ProtoReflect.Descriptor instead.
func (*CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{21}
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetSharedSecret() []byte {
	if x != nil {
		return x.SharedSecret
	}
	return nil
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetSerialNumber() uint64 {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return 0
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetRevocationCode() string {
	if x != nil && x.RevocationCode != nil {
		return *x.RevocationCode
	}
	return ""
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetServerTime() uint64 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetTokenGid() string {
	if x != nil && x.TokenGid != nil {
		return *x.TokenGid
	}
	return ""
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetIdentitySecret() []byte {
	if x != nil {
		return x.IdentitySecret
	}
	return nil
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetSecret_1() []byte {
	if x != nil {
		return x.Secret_1
	}
	return nil
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetSteamguardScheme() uint32 {
	if x != nil && x.SteamguardScheme != nil {
		return *x.SteamguardScheme
	}
	return 0
}

func (x *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success          *bool                                                       `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ReplacementToken *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token `protobuf:"bytes,2,opt,name=replacement_token,json=replacementToken" json:"replacement_token,omitempty"`
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response) Reset() {
	*x = CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_twofactor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response) ProtoMessage() {}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_twofactor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.ProtoReflect.Descriptor instead.
func (*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_twofactor_proto_rawDescGZIP(), []int{22}
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response) GetReplacementToken() *CRemoveAuthenticatorViaChallengeContinue_Replacement_Token {
	if x != nil {
		return x.ReplacementToken
	}
	return nil
}

var File_steammessages_twofactor_proto protoreflect.FileDescriptor

var file_steammessages_twofactor_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x74, 0x77, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x19, 0x43,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xb1, 0x09, 0x0a, 0x1a, 0x43, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x28, 0x69, 0x66, 0x20, 0x61,
	0x6e, 0x79, 0x29, 0x52, 0x12, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x62, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x3f, 0x52,
	0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x47, 0x49, 0x44, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x69,
	0x64, 0x12, 0x52, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x20, 0x28, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x29, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e,
	0x82, 0xb5, 0x18, 0x1a, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x1d, 0x72,
	0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x6f, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x82, 0xb5, 0x18,
	0x40, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x69, 0x6f, 0x73, 0x20, 0x2f,
	0x20, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x20, 0x2f, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x29, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41, 0x82, 0xb5, 0x18, 0x3d, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x2d, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x20, 0x28, 0x69, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x77, 0x6f, 0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x29, 0x52, 0x1a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x6e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0xe4, 0x04, 0x0a, 0x23, 0x43,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x4d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e, 0x82, 0xb5,
	0x18, 0x1a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x11, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x20, 0x28, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x29,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x6d, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x53, 0x4d, 0x53, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x6d, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x20,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x62, 0x79, 0x20, 0x4b, 0x2f, 0x56, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x42, 0x2b, 0x82, 0xb5, 0x18,
	0x27, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xd0, 0x06, 0x0a, 0x24, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x32, 0x82, 0xb5, 0x18, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x28, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x29, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0f,
	0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x63, 0x6f, 0x64, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x65,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x55,
	0x52, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x51, 0x52, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x38,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0x82, 0xb5, 0x18, 0x27, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x82, 0xb5, 0x18,
	0x1c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x47, 0x49, 0x44, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x69, 0x64, 0x12, 0x66, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x3d, 0x82, 0xb5, 0x18, 0x39, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e,
	0x2c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x29, 0x52,
	0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x53, 0x70, 0x61, 0x72, 0x65, 0x20, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x31, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x11,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x82, 0xb5, 0x18, 0x36, 0x61, 0x20, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53,
	0x4d, 0x53, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74,
	0x20, 0x74, 0x6f, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x48, 0x69, 0x6e, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x1c, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65,
	0x6e, 0x64, 0x20, 0x28, 0x45, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x3a, 0x2a, 0x29, 0x52, 0x09, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x1f, 0x0a, 0x1d, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa4, 0x04, 0x0a, 0x2b, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x75, 0x73, 0x65, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x82, 0xb5, 0x18, 0x11,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x82, 0xb5,
	0x18, 0x28, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x62, 0x61,
	0x6e, 0x64, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x62,
	0x79, 0x20, 0x4b, 0x2f, 0x56, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x66,
	0x82, 0xb5, 0x18, 0x62, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x53, 0x4d, 0x53, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x74, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x6f, 0x6f, 0x2e, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x2c, 0x43, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41,
	0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x54,
	0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x2c, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x77, 0x61,
	0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x08, 0x77,
	0x61, 0x6e, 0x74, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0x82, 0xb5,
	0x18, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x25, 0x43,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x45,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2b, 0x82, 0xb5, 0x18, 0x27, 0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x48, 0x4d,
	0x41, 0x43, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6b, 0x65,
	0x79, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x28, 0x0a, 0x26,
	0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x26, 0x43, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x82, 0xb5, 0x18, 0x1f,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0e, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x5a, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e,
	0x67, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x10, 0x72, 0x65, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x11, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x54, 0x79, 0x70, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x47, 0x75, 0x61, 0x72, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x10, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x64,
	0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x20, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x27, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x70,
	0x70, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0x82, 0xb5,
	0x18, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x74, 0x0a, 0x1d, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x72, 0x65, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x3d, 0x0a, 0x27, 0x43, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x28, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x13, 0x82, 0xb5, 0x18, 0x0f, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x58, 0x0a,
	0x28, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x20, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x53, 0x0a, 0x21, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x37, 0x43, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x38, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x6e, 0x74,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x6e, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xce, 0x01, 0x0a, 0x3a, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x56, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x53, 0x4d, 0x53, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x12,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x28, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6c, 0x64, 0x20, 0x6f, 0x6e, 0x65, 0x29, 0x52, 0x10,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x9d, 0x07, 0x0a, 0x3a, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x57, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x32, 0x82, 0xb5, 0x18, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x28, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x29, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21,
	0x63, 0x6f, 0x64, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x82, 0xb5, 0x18, 0x1a, 0x55, 0x52, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x51, 0x52, 0x20, 0x63,
	0x6f, 0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x47, 0x49, 0x44, 0x20,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x69, 0x64, 0x12, 0x66, 0x0a, 0x0f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x3d, 0x82, 0xb5, 0x18, 0x39, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x28, 0x65, 0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x29, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x31,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x53, 0x70, 0x61, 0x72,
	0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x31, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x61, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0x82, 0xb5,
	0x18, 0x30, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20,
	0x47, 0x75, 0x61, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x63,
	0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x06, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0xa5, 0x02, 0x0a, 0x3b, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x6e,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x85, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x46,
	0x72, 0x65, 0x73, 0x68, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xbb, 0x0e, 0x0a, 0x09, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x44, 0x82, 0xb5, 0x18, 0x40, 0x47, 0x65, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x2d, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x20, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x43, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x41, 0x64,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x41, 0x64, 0x64,
	0x20, 0x74, 0x77, 0x6f, 0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xb5, 0x18, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xc1, 0x01,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x2e, 0x43, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x64,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x20, 0x74, 0x77, 0x6f, 0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x8a, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x79, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xb2,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x77, 0x6f, 0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x43,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20,
	0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xa9, 0x01,
	0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39,
	0x82, 0xb5, 0x18, 0x35, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x20, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x0d, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x43, 0x54, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x28, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x29, 0x20, 0x61, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xcc, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x38,
	0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56,
	0x69, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0xd8, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x12, 0x3b, 0x2e, 0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x56, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x43, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69,
	0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xb5, 0x18,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x1a,
	0x25, 0x82, 0xb5, 0x18, 0x21, 0x54, 0x77, 0x6f, 0x20, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x30, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x73, 0x74, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x90, 0x01, 0x01,
}

var (
	file_steammessages_twofactor_proto_rawDescOnce sync.Once
	file_steammessages_twofactor_proto_rawDescData = file_steammessages_twofactor_proto_rawDesc
)

func file_steammessages_twofactor_proto_rawDescGZIP() []byte {
	file_steammessages_twofactor_proto_rawDescOnce.Do(func() {
		file_steammessages_twofactor_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_twofactor_proto_rawDescData)
	})
	return file_steammessages_twofactor_proto_rawDescData
}

var file_steammessages_twofactor_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_steammessages_twofactor_proto_goTypes = []interface{}{
	(*CTwoFactor_Status_Request)(nil),                                   // 0: CTwoFactor_Status_Request
	(*CTwoFactor_Status_Response)(nil),                                  // 1: CTwoFactor_Status_Response
	(*CTwoFactor_AddAuthenticator_Request)(nil),                         // 2: CTwoFactor_AddAuthenticator_Request
	(*CTwoFactor_AddAuthenticator_Response)(nil),                        // 3: CTwoFactor_AddAuthenticator_Response
	(*CTwoFactor_SendEmail_Request)(nil),                                // 4: CTwoFactor_SendEmail_Request
	(*CTwoFactor_SendEmail_Response)(nil),                               // 5: CTwoFactor_SendEmail_Response
	(*CTwoFactor_FinalizeAddAuthenticator_Request)(nil),                 // 6: CTwoFactor_FinalizeAddAuthenticator_Request
	(*CTwoFactor_FinalizeAddAuthenticator_Response)(nil),                // 7: CTwoFactor_FinalizeAddAuthenticator_Response
	(*CTwoFactor_UpdateTokenVersion_Request)(nil),                       // 8: CTwoFactor_UpdateTokenVersion_Request
	(*CTwoFactor_UpdateTokenVersion_Response)(nil),                      // 9: CTwoFactor_UpdateTokenVersion_Response
	(*CTwoFactor_RemoveAuthenticator_Request)(nil),                      // 10: CTwoFactor_RemoveAuthenticator_Request
	(*CTwoFactor_RemoveAuthenticator_Response)(nil),                     // 11: CTwoFactor_RemoveAuthenticator_Response
	(*CTwoFactor_CreateEmergencyCodes_Request)(nil),                     // 12: CTwoFactor_CreateEmergencyCodes_Request
	(*CTwoFactor_CreateEmergencyCodes_Response)(nil),                    // 13: CTwoFactor_CreateEmergencyCodes_Response
	(*CTwoFactor_DestroyEmergencyCodes_Request)(nil),                    // 14: CTwoFactor_DestroyEmergencyCodes_Request
	(*CTwoFactor_DestroyEmergencyCodes_Response)(nil),                   // 15: CTwoFactor_DestroyEmergencyCodes_Response
	(*CTwoFactor_ValidateToken_Request)(nil),                            // 16: CTwoFactor_ValidateToken_Request
	(*CTwoFactor_ValidateToken_Response)(nil),                           // 17: CTwoFactor_ValidateToken_Response
	(*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request)(nil),     // 18: CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request
	(*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response)(nil),    // 19: CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response
	(*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request)(nil),  // 20: CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request
	(*CRemoveAuthenticatorViaChallengeContinue_Replacement_Token)(nil),  // 21: CRemoveAuthenticatorViaChallengeContinue_Replacement_Token
	(*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response)(nil), // 22: CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response
}
var file_steammessages_twofactor_proto_depIdxs = []int32{
	21, // 0: CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response.replacement_token:type_name -> CRemoveAuthenticatorViaChallengeContinue_Replacement_Token
	0,  // 1: TwoFactor.QueryStatus:input_type -> CTwoFactor_Status_Request
	2,  // 2: TwoFactor.AddAuthenticator:input_type -> CTwoFactor_AddAuthenticator_Request
	4,  // 3: TwoFactor.SendEmail:input_type -> CTwoFactor_SendEmail_Request
	6,  // 4: TwoFactor.FinalizeAddAuthenticator:input_type -> CTwoFactor_FinalizeAddAuthenticator_Request
	8,  // 5: TwoFactor.UpdateTokenVersion:input_type -> CTwoFactor_UpdateTokenVersion_Request
	10, // 6: TwoFactor.RemoveAuthenticator:input_type -> CTwoFactor_RemoveAuthenticator_Request
	12, // 7: TwoFactor.CreateEmergencyCodes:input_type -> CTwoFactor_CreateEmergencyCodes_Request
	14, // 8: TwoFactor.DestroyEmergencyCodes:input_type -> CTwoFactor_DestroyEmergencyCodes_Request
	16, // 9: TwoFactor.ValidateToken:input_type -> CTwoFactor_ValidateToken_Request
	18, // 10: TwoFactor.RemoveAuthenticatorViaChallengeStart:input_type -> CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request
	20, // 11: TwoFactor.RemoveAuthenticatorViaChallengeContinue:input_type -> CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request
	1,  // 12: TwoFactor.QueryStatus:output_type -> CTwoFactor_Status_Response
	3,  // 13: TwoFactor.AddAuthenticator:output_type -> CTwoFactor_AddAuthenticator_Response
	5,  // 14: TwoFactor.SendEmail:output_type -> CTwoFactor_SendEmail_Response
	7,  // 15: TwoFactor.FinalizeAddAuthenticator:output_type -> CTwoFactor_FinalizeAddAuthenticator_Response
	9,  // 16: TwoFactor.UpdateTokenVersion:output_type -> CTwoFactor_UpdateTokenVersion_Response
	11, // 17: TwoFactor.RemoveAuthenticator:output_type -> CTwoFactor_RemoveAuthenticator_Response
	13, // 18: TwoFactor.CreateEmergencyCodes:output_type -> CTwoFactor_CreateEmergencyCodes_Response
	15, // 19: TwoFactor.DestroyEmergencyCodes:output_type -> CTwoFactor_DestroyEmergencyCodes_Response
	17, // 20: TwoFactor.ValidateToken:output_type -> CTwoFactor_ValidateToken_Response
	19, // 21: TwoFactor.RemoveAuthenticatorViaChallengeStart:output_type -> CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response
	22, // 22: TwoFactor.RemoveAuthenticatorViaChallengeContinue:output_type -> CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response
	12, // [12:23] is the sub-list for method output_type
	1,  // [1:12] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_steammessages_twofactor_proto_init() }
func file_steammessages_twofactor_proto_init() {
	if File_steammessages_twofactor_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_twofactor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_Status_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_Status_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_AddAuthenticator_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_AddAuthenticator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_SendEmail_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_SendEmail_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_FinalizeAddAuthenticator_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_FinalizeAddAuthenticator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_UpdateTokenVersion_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_UpdateTokenVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_RemoveAuthenticator_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_RemoveAuthenticator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_CreateEmergencyCodes_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_CreateEmergencyCodes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_DestroyEmergencyCodes_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_DestroyEmergencyCodes_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_ValidateToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_ValidateToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoveAuthenticatorViaChallengeContinue_Replacement_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_twofactor_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_twofactor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_twofactor_proto_goTypes,
		DependencyIndexes: file_steammessages_twofactor_proto_depIdxs,
		MessageInfos:      file_steammessages_twofactor_proto_msgTypes,
	}.Build()
	File_steammessages_twofactor_proto = out.File
	file_steammessages_twofactor_proto_rawDesc = nil
	file_steammessages_twofactor_proto_goTypes = nil
	file_steammessages_twofactor_proto_depIdxs = nil
}
