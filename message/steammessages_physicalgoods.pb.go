// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: steammessages_physicalgoods.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CPhysicalGoods_RegisterSteamController_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber   *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
}

func (x *CPhysicalGoods_RegisterSteamController_Request) Reset() {
	*x = CPhysicalGoods_RegisterSteamController_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_RegisterSteamController_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_RegisterSteamController_Request) ProtoMessage() {}

func (x *CPhysicalGoods_RegisterSteamController_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_RegisterSteamController_Request.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_RegisterSteamController_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{0}
}

func (x *CPhysicalGoods_RegisterSteamController_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CPhysicalGoods_RegisterSteamController_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CPhysicalGoods_RegisterSteamController_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPhysicalGoods_RegisterSteamController_Response) Reset() {
	*x = CPhysicalGoods_RegisterSteamController_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_RegisterSteamController_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_RegisterSteamController_Response) ProtoMessage() {}

func (x *CPhysicalGoods_RegisterSteamController_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_RegisterSteamController_Response.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_RegisterSteamController_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{1}
}

type CPhysicalGoods_CompleteSteamControllerRegistration_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber   *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
}

func (x *CPhysicalGoods_CompleteSteamControllerRegistration_Request) Reset() {
	*x = CPhysicalGoods_CompleteSteamControllerRegistration_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_CompleteSteamControllerRegistration_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_CompleteSteamControllerRegistration_Request) ProtoMessage() {}

func (x *CPhysicalGoods_CompleteSteamControllerRegistration_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_CompleteSteamControllerRegistration_Request.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_CompleteSteamControllerRegistration_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{2}
}

func (x *CPhysicalGoods_CompleteSteamControllerRegistration_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CPhysicalGoods_CompleteSteamControllerRegistration_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CPhysicalGoods_CompleteSteamControllerRegistration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPhysicalGoods_CompleteSteamControllerRegistration_Response) Reset() {
	*x = CPhysicalGoods_CompleteSteamControllerRegistration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_CompleteSteamControllerRegistration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_CompleteSteamControllerRegistration_Response) ProtoMessage() {}

func (x *CPhysicalGoods_CompleteSteamControllerRegistration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_CompleteSteamControllerRegistration_Response.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_CompleteSteamControllerRegistration_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{3}
}

type CPhysicalGoods_QueryAccountsRegisteredToSerial_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber   *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) Reset() {
	*x = CPhysicalGoods_QueryAccountsRegisteredToSerial_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) ProtoMessage() {}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{4}
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid            *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	RegistrationComplete *bool   `protobuf:"varint,2,opt,name=registration_complete,json=registrationComplete" json:"registration_complete,omitempty"`
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts) Reset() {
	*x = CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts) ProtoMessage() {}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{5}
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts) GetRegistrationComplete() bool {
	if x != nil && x.RegistrationComplete != nil {
		return *x.RegistrationComplete
	}
	return false
}

type CPhysicalGoods_QueryAccountsRegisteredToSerial_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Response) Reset() {
	*x = CPhysicalGoods_QueryAccountsRegisteredToSerial_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_QueryAccountsRegisteredToSerial_Response) ProtoMessage() {}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_QueryAccountsRegisteredToSerial_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{6}
}

func (x *CPhysicalGoods_QueryAccountsRegisteredToSerial_Response) GetAccounts() []*CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CPhysicalGoods_SteamControllerSetConfig_ControllerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appidorname     *string `protobuf:"bytes,1,opt,name=appidorname" json:"appidorname,omitempty"`
	Publishedfileid *uint64 `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Templatename    *string `protobuf:"bytes,3,opt,name=templatename" json:"templatename,omitempty"`
}

func (x *CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) Reset() {
	*x = CPhysicalGoods_SteamControllerSetConfig_ControllerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) ProtoMessage() {}

func (x *CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{7}
}

func (x *CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) GetTemplatename() string {
	if x != nil && x.Templatename != nil {
		return *x.Templatename
	}
	return ""
}

type CPhysicalGoods_SteamControllerSetConfig_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber      *string                                                     `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode    *string                                                     `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid         *uint32                                                     `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	Configurations    []*CPhysicalGoods_SteamControllerSetConfig_ControllerConfig `protobuf:"bytes,4,rep,name=configurations" json:"configurations,omitempty"`
	ControllerType    *int32                                                      `protobuf:"varint,5,opt,name=controller_type,json=controllerType,def=2" json:"controller_type,omitempty"`
	OnlyForThisSerial *bool                                                       `protobuf:"varint,6,opt,name=only_for_this_serial,json=onlyForThisSerial,def=0" json:"only_for_this_serial,omitempty"`
}

// Default values for CPhysicalGoods_SteamControllerSetConfig_Request fields.
const (
	Default_CPhysicalGoods_SteamControllerSetConfig_Request_ControllerType    = int32(2)
	Default_CPhysicalGoods_SteamControllerSetConfig_Request_OnlyForThisSerial = bool(false)
)

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) Reset() {
	*x = CPhysicalGoods_SteamControllerSetConfig_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_SteamControllerSetConfig_Request) ProtoMessage() {}

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_SteamControllerSetConfig_Request.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_SteamControllerSetConfig_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{8}
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) GetConfigurations() []*CPhysicalGoods_SteamControllerSetConfig_ControllerConfig {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return Default_CPhysicalGoods_SteamControllerSetConfig_Request_ControllerType
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Request) GetOnlyForThisSerial() bool {
	if x != nil && x.OnlyForThisSerial != nil {
		return *x.OnlyForThisSerial
	}
	return Default_CPhysicalGoods_SteamControllerSetConfig_Request_OnlyForThisSerial
}

type CPhysicalGoods_SteamControllerSetConfig_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Response) Reset() {
	*x = CPhysicalGoods_SteamControllerSetConfig_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_SteamControllerSetConfig_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_SteamControllerSetConfig_Response) ProtoMessage() {}

func (x *CPhysicalGoods_SteamControllerSetConfig_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_SteamControllerSetConfig_Response.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_SteamControllerSetConfig_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{9}
}

type CPhysicalGoods_SteamControllerGetConfig_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber      *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode    *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid         *uint32 `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	Appidorname       *string `protobuf:"bytes,4,opt,name=appidorname" json:"appidorname,omitempty"`
	ControllerType    *int32  `protobuf:"varint,5,opt,name=controller_type,json=controllerType,def=2" json:"controller_type,omitempty"`
	OnlyForThisSerial *bool   `protobuf:"varint,6,opt,name=only_for_this_serial,json=onlyForThisSerial,def=0" json:"only_for_this_serial,omitempty"`
}

// Default values for CPhysicalGoods_SteamControllerGetConfig_Request fields.
const (
	Default_CPhysicalGoods_SteamControllerGetConfig_Request_ControllerType    = int32(2)
	Default_CPhysicalGoods_SteamControllerGetConfig_Request_OnlyForThisSerial = bool(false)
)

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) Reset() {
	*x = CPhysicalGoods_SteamControllerGetConfig_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_SteamControllerGetConfig_Request) ProtoMessage() {}

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_SteamControllerGetConfig_Request.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_SteamControllerGetConfig_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{10}
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return Default_CPhysicalGoods_SteamControllerGetConfig_Request_ControllerType
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Request) GetOnlyForThisSerial() bool {
	if x != nil && x.OnlyForThisSerial != nil {
		return *x.OnlyForThisSerial
	}
	return Default_CPhysicalGoods_SteamControllerGetConfig_Request_OnlyForThisSerial
}

type CPhysicalGoods_SteamControllerGetConfig_ControllerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appidorname     *string `protobuf:"bytes,1,opt,name=appidorname" json:"appidorname,omitempty"`
	Publishedfileid *uint64 `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Templatename    *string `protobuf:"bytes,3,opt,name=templatename" json:"templatename,omitempty"`
	SerialNumber    *string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
}

func (x *CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) Reset() {
	*x = CPhysicalGoods_SteamControllerGetConfig_ControllerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) ProtoMessage() {}

func (x *CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{11}
}

func (x *CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) GetTemplatename() string {
	if x != nil && x.Templatename != nil {
		return *x.Templatename
	}
	return ""
}

func (x *CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

type CPhysicalGoods_SteamControllerGetConfig_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations []*CPhysicalGoods_SteamControllerGetConfig_ControllerConfig `protobuf:"bytes,1,rep,name=configurations" json:"configurations,omitempty"`
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Response) Reset() {
	*x = CPhysicalGoods_SteamControllerGetConfig_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_SteamControllerGetConfig_Response) ProtoMessage() {}

func (x *CPhysicalGoods_SteamControllerGetConfig_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_SteamControllerGetConfig_Response.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_SteamControllerGetConfig_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{12}
}

func (x *CPhysicalGoods_SteamControllerGetConfig_Response) GetConfigurations() []*CPhysicalGoods_SteamControllerGetConfig_ControllerConfig {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type CPhysicalGoods_DeRegisterSteamController_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber   *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid      *uint32 `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CPhysicalGoods_DeRegisterSteamController_Request) Reset() {
	*x = CPhysicalGoods_DeRegisterSteamController_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_DeRegisterSteamController_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_DeRegisterSteamController_Request) ProtoMessage() {}

func (x *CPhysicalGoods_DeRegisterSteamController_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_DeRegisterSteamController_Request.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_DeRegisterSteamController_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{13}
}

func (x *CPhysicalGoods_DeRegisterSteamController_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CPhysicalGoods_DeRegisterSteamController_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CPhysicalGoods_DeRegisterSteamController_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CPhysicalGoods_DeRegisterSteamController_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPhysicalGoods_DeRegisterSteamController_Response) Reset() {
	*x = CPhysicalGoods_DeRegisterSteamController_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_DeRegisterSteamController_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_DeRegisterSteamController_Response) ProtoMessage() {}

func (x *CPhysicalGoods_DeRegisterSteamController_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_DeRegisterSteamController_Response.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_DeRegisterSteamController_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{14}
}

type CPhysicalGoods_SetPersonalizationFile_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber    *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Publishedfileid *uint64 `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Accountid       *uint32 `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CPhysicalGoods_SetPersonalizationFile_Request) Reset() {
	*x = CPhysicalGoods_SetPersonalizationFile_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_SetPersonalizationFile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_SetPersonalizationFile_Request) ProtoMessage() {}

func (x *CPhysicalGoods_SetPersonalizationFile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_SetPersonalizationFile_Request.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_SetPersonalizationFile_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{15}
}

func (x *CPhysicalGoods_SetPersonalizationFile_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CPhysicalGoods_SetPersonalizationFile_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPhysicalGoods_SetPersonalizationFile_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CPhysicalGoods_SetPersonalizationFile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPhysicalGoods_SetPersonalizationFile_Response) Reset() {
	*x = CPhysicalGoods_SetPersonalizationFile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_SetPersonalizationFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_SetPersonalizationFile_Response) ProtoMessage() {}

func (x *CPhysicalGoods_SetPersonalizationFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_SetPersonalizationFile_Response.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_SetPersonalizationFile_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{16}
}

type CPhysicalGoods_GetPersonalizationFile_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Accountid    *uint32 `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CPhysicalGoods_GetPersonalizationFile_Request) Reset() {
	*x = CPhysicalGoods_GetPersonalizationFile_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_GetPersonalizationFile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_GetPersonalizationFile_Request) ProtoMessage() {}

func (x *CPhysicalGoods_GetPersonalizationFile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_GetPersonalizationFile_Request.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_GetPersonalizationFile_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{17}
}

func (x *CPhysicalGoods_GetPersonalizationFile_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CPhysicalGoods_GetPersonalizationFile_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CPhysicalGoods_GetPersonalizationFile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
}

func (x *CPhysicalGoods_GetPersonalizationFile_Response) Reset() {
	*x = CPhysicalGoods_GetPersonalizationFile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_physicalgoods_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPhysicalGoods_GetPersonalizationFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhysicalGoods_GetPersonalizationFile_Response) ProtoMessage() {}

func (x *CPhysicalGoods_GetPersonalizationFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_physicalgoods_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhysicalGoods_GetPersonalizationFile_Response.ProtoReflect.Descriptor instead.
func (*CPhysicalGoods_GetPersonalizationFile_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_physicalgoods_proto_rawDescGZIP(), []int{18}
}

func (x *CPhysicalGoods_GetPersonalizationFile_Response) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

var File_steammessages_physicalgoods_proto protoreflect.FileDescriptor

var file_steammessages_physicalgoods_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x2f, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x3a, 0x43, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3d, 0x0a, 0x3b, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x36, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x37, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x37, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x43, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xaa,
	0x01, 0x0a, 0x38, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x2f,
	0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x14, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x69, 0x73, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x22, 0x32, 0x0a, 0x30, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x2f, 0x43, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x6f,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x32, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x14, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x46,
	0x6f, 0x72, 0x54, 0x68, 0x69, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xcf, 0x01, 0x0a,
	0x38, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66,
	0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x95,
	0x01, 0x0a, 0x30, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x43, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x30, 0x43, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x31, 0x43, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a,
	0x2d, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x2e, 0x43,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a,
	0x2d, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x22, 0x5a, 0x0a, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x32, 0xd7, 0x0c,
	0x0a, 0x0d, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0xd4, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x43, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56,
	0x82, 0xb5, 0x18, 0x52, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x27, 0x73, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x20, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x73, 0x2e, 0x12, 0xd3, 0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x43, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x4d,
	0x61, 0x72, 0x6b, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x27, 0x73, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xd7, 0x01, 0x0a,
	0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xb5, 0x18, 0x39, 0x53, 0x65, 0x6e,
	0x64, 0x73, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x12, 0xb8, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x30, 0x2e, 0x43, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x53, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x70,
	0x70, 0x12, 0xb8, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x30, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xb5, 0x18,
	0x2b, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x12, 0xa1, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x43, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x44, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x44,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x44, 0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0xb7, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x2e, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x43, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x1a, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x42, 0x30, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x73, 0x74, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x90, 0x01, 0x01,
}

var (
	file_steammessages_physicalgoods_proto_rawDescOnce sync.Once
	file_steammessages_physicalgoods_proto_rawDescData = file_steammessages_physicalgoods_proto_rawDesc
)

func file_steammessages_physicalgoods_proto_rawDescGZIP() []byte {
	file_steammessages_physicalgoods_proto_rawDescOnce.Do(func() {
		file_steammessages_physicalgoods_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_physicalgoods_proto_rawDescData)
	})
	return file_steammessages_physicalgoods_proto_rawDescData
}

var file_steammessages_physicalgoods_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_steammessages_physicalgoods_proto_goTypes = []interface{}{
	(*CPhysicalGoods_RegisterSteamController_Request)(nil),              // 0: CPhysicalGoods_RegisterSteamController_Request
	(*CPhysicalGoods_RegisterSteamController_Response)(nil),             // 1: CPhysicalGoods_RegisterSteamController_Response
	(*CPhysicalGoods_CompleteSteamControllerRegistration_Request)(nil),  // 2: CPhysicalGoods_CompleteSteamControllerRegistration_Request
	(*CPhysicalGoods_CompleteSteamControllerRegistration_Response)(nil), // 3: CPhysicalGoods_CompleteSteamControllerRegistration_Response
	(*CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)(nil),      // 4: CPhysicalGoods_QueryAccountsRegisteredToSerial_Request
	(*CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)(nil),     // 5: CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts
	(*CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)(nil),     // 6: CPhysicalGoods_QueryAccountsRegisteredToSerial_Response
	(*CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)(nil),    // 7: CPhysicalGoods_SteamControllerSetConfig_ControllerConfig
	(*CPhysicalGoods_SteamControllerSetConfig_Request)(nil),             // 8: CPhysicalGoods_SteamControllerSetConfig_Request
	(*CPhysicalGoods_SteamControllerSetConfig_Response)(nil),            // 9: CPhysicalGoods_SteamControllerSetConfig_Response
	(*CPhysicalGoods_SteamControllerGetConfig_Request)(nil),             // 10: CPhysicalGoods_SteamControllerGetConfig_Request
	(*CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)(nil),    // 11: CPhysicalGoods_SteamControllerGetConfig_ControllerConfig
	(*CPhysicalGoods_SteamControllerGetConfig_Response)(nil),            // 12: CPhysicalGoods_SteamControllerGetConfig_Response
	(*CPhysicalGoods_DeRegisterSteamController_Request)(nil),            // 13: CPhysicalGoods_DeRegisterSteamController_Request
	(*CPhysicalGoods_DeRegisterSteamController_Response)(nil),           // 14: CPhysicalGoods_DeRegisterSteamController_Response
	(*CPhysicalGoods_SetPersonalizationFile_Request)(nil),               // 15: CPhysicalGoods_SetPersonalizationFile_Request
	(*CPhysicalGoods_SetPersonalizationFile_Response)(nil),              // 16: CPhysicalGoods_SetPersonalizationFile_Response
	(*CPhysicalGoods_GetPersonalizationFile_Request)(nil),               // 17: CPhysicalGoods_GetPersonalizationFile_Request
	(*CPhysicalGoods_GetPersonalizationFile_Response)(nil),              // 18: CPhysicalGoods_GetPersonalizationFile_Response
}
var file_steammessages_physicalgoods_proto_depIdxs = []int32{
	5,  // 0: CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts:type_name -> CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts
	7,  // 1: CPhysicalGoods_SteamControllerSetConfig_Request.configurations:type_name -> CPhysicalGoods_SteamControllerSetConfig_ControllerConfig
	11, // 2: CPhysicalGoods_SteamControllerGetConfig_Response.configurations:type_name -> CPhysicalGoods_SteamControllerGetConfig_ControllerConfig
	0,  // 3: PhysicalGoods.RegisterSteamController:input_type -> CPhysicalGoods_RegisterSteamController_Request
	2,  // 4: PhysicalGoods.CompleteSteamControllerRegistration:input_type -> CPhysicalGoods_CompleteSteamControllerRegistration_Request
	4,  // 5: PhysicalGoods.QueryAccountsRegisteredToController:input_type -> CPhysicalGoods_QueryAccountsRegisteredToSerial_Request
	8,  // 6: PhysicalGoods.SetDesiredControllerConfigForApp:input_type -> CPhysicalGoods_SteamControllerSetConfig_Request
	10, // 7: PhysicalGoods.GetDesiredControllerConfigForApp:input_type -> CPhysicalGoods_SteamControllerGetConfig_Request
	13, // 8: PhysicalGoods.DeRegisterSteamController:input_type -> CPhysicalGoods_DeRegisterSteamController_Request
	15, // 9: PhysicalGoods.SetControllerPersonalizationFile:input_type -> CPhysicalGoods_SetPersonalizationFile_Request
	17, // 10: PhysicalGoods.GetControllerPersonalizationFile:input_type -> CPhysicalGoods_GetPersonalizationFile_Request
	1,  // 11: PhysicalGoods.RegisterSteamController:output_type -> CPhysicalGoods_RegisterSteamController_Response
	3,  // 12: PhysicalGoods.CompleteSteamControllerRegistration:output_type -> CPhysicalGoods_CompleteSteamControllerRegistration_Response
	6,  // 13: PhysicalGoods.QueryAccountsRegisteredToController:output_type -> CPhysicalGoods_QueryAccountsRegisteredToSerial_Response
	9,  // 14: PhysicalGoods.SetDesiredControllerConfigForApp:output_type -> CPhysicalGoods_SteamControllerSetConfig_Response
	12, // 15: PhysicalGoods.GetDesiredControllerConfigForApp:output_type -> CPhysicalGoods_SteamControllerGetConfig_Response
	14, // 16: PhysicalGoods.DeRegisterSteamController:output_type -> CPhysicalGoods_DeRegisterSteamController_Response
	16, // 17: PhysicalGoods.SetControllerPersonalizationFile:output_type -> CPhysicalGoods_SetPersonalizationFile_Response
	18, // 18: PhysicalGoods.GetControllerPersonalizationFile:output_type -> CPhysicalGoods_GetPersonalizationFile_Response
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_steammessages_physicalgoods_proto_init() }
func file_steammessages_physicalgoods_proto_init() {
	if File_steammessages_physicalgoods_proto != nil {
		return
	}
	file_steammessages_unified_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_physicalgoods_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_RegisterSteamController_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_RegisterSteamController_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_CompleteSteamControllerRegistration_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_CompleteSteamControllerRegistration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_QueryAccountsRegisteredToSerial_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_QueryAccountsRegisteredToSerial_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_SteamControllerSetConfig_ControllerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_SteamControllerSetConfig_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_SteamControllerSetConfig_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_SteamControllerGetConfig_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_SteamControllerGetConfig_ControllerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_SteamControllerGetConfig_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_DeRegisterSteamController_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_DeRegisterSteamController_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_SetPersonalizationFile_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_SetPersonalizationFile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_GetPersonalizationFile_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_physicalgoods_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPhysicalGoods_GetPersonalizationFile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_physicalgoods_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_physicalgoods_proto_goTypes,
		DependencyIndexes: file_steammessages_physicalgoods_proto_depIdxs,
		MessageInfos:      file_steammessages_physicalgoods_proto_msgTypes,
	}.Build()
	File_steammessages_physicalgoods_proto = out.File
	file_steammessages_physicalgoods_proto_rawDesc = nil
	file_steammessages_physicalgoods_proto_goTypes = nil
	file_steammessages_physicalgoods_proto_depIdxs = nil
}
