// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: steammessages_webui_friends.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CHelpRequestLogs_UploadUserApplicationLog_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LogType       *string `protobuf:"bytes,2,opt,name=log_type,json=logType" json:"log_type,omitempty"`
	VersionString *string `protobuf:"bytes,3,opt,name=version_string,json=versionString" json:"version_string,omitempty"`
	LogContents   *string `protobuf:"bytes,4,opt,name=log_contents,json=logContents" json:"log_contents,omitempty"`
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Request) Reset() {
	*x = CHelpRequestLogs_UploadUserApplicationLog_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHelpRequestLogs_UploadUserApplicationLog_Request) ProtoMessage() {}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHelpRequestLogs_UploadUserApplicationLog_Request.ProtoReflect.Descriptor instead.
func (*CHelpRequestLogs_UploadUserApplicationLog_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{0}
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Request) GetLogType() string {
	if x != nil && x.LogType != nil {
		return *x.LogType
	}
	return ""
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Request) GetVersionString() string {
	if x != nil && x.VersionString != nil {
		return *x.VersionString
	}
	return ""
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Request) GetLogContents() string {
	if x != nil && x.LogContents != nil {
		return *x.LogContents
	}
	return ""
}

type CHelpRequestLogs_UploadUserApplicationLog_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Response) Reset() {
	*x = CHelpRequestLogs_UploadUserApplicationLog_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHelpRequestLogs_UploadUserApplicationLog_Response) ProtoMessage() {}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHelpRequestLogs_UploadUserApplicationLog_Response.ProtoReflect.Descriptor instead.
func (*CHelpRequestLogs_UploadUserApplicationLog_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{1}
}

func (x *CHelpRequestLogs_UploadUserApplicationLog_Response) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgClientAppMinutesPlayedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinutesPlayed []*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData `protobuf:"bytes,1,rep,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
}

func (x *CMsgClientAppMinutesPlayedData) Reset() {
	*x = CMsgClientAppMinutesPlayedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppMinutesPlayedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppMinutesPlayedData) ProtoMessage() {}

func (x *CMsgClientAppMinutesPlayedData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppMinutesPlayedData.ProtoReflect.Descriptor instead.
func (*CMsgClientAppMinutesPlayedData) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientAppMinutesPlayedData) GetMinutesPlayed() []*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData {
	if x != nil {
		return x.MinutesPlayed
	}
	return nil
}

type CMsgClientAppMinutesPlayedData_AppMinutesPlayedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Forever      *int32  `protobuf:"varint,2,opt,name=forever" json:"forever,omitempty"`
	LastTwoWeeks *int32  `protobuf:"varint,3,opt,name=last_two_weeks,json=lastTwoWeeks" json:"last_two_weeks,omitempty"`
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) Reset() {
	*x = CMsgClientAppMinutesPlayedData_AppMinutesPlayedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) ProtoMessage() {}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppMinutesPlayedData_AppMinutesPlayedData.ProtoReflect.Descriptor instead.
func (*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) GetForever() int32 {
	if x != nil && x.Forever != nil {
		return *x.Forever
	}
	return 0
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) GetLastTwoWeeks() int32 {
	if x != nil && x.LastTwoWeeks != nil {
		return *x.LastTwoWeeks
	}
	return 0
}

type CCommunity_GetApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids   []int32 `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
	Language *uint32 `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
}

func (x *CCommunity_GetApps_Request) Reset() {
	*x = CCommunity_GetApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetApps_Request) ProtoMessage() {}

func (x *CCommunity_GetApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetApps_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetApps_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{4}
}

func (x *CCommunity_GetApps_Request) GetAppids() []int32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CCommunity_GetApps_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CCommunity_GetApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*CCDDBAppDetailCommon `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (x *CCommunity_GetApps_Response) Reset() {
	*x = CCommunity_GetApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetApps_Response) ProtoMessage() {}

func (x *CCommunity_GetApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetApps_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetApps_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{5}
}

func (x *CCommunity_GetApps_Response) GetApps() []*CCDDBAppDetailCommon {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CCommunity_GetAppRichPresenceLocalization_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *int32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Request) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{6}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CCommunity_GetAppRichPresenceLocalization_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *int32                                                          `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	TokenLists []*CCommunity_GetAppRichPresenceLocalization_Response_TokenList `protobuf:"bytes,2,rep,name=token_lists,json=tokenLists" json:"token_lists,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{7}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) GetTokenLists() []*CCommunity_GetAppRichPresenceLocalization_Response_TokenList {
	if x != nil {
		return x.TokenLists
	}
	return nil
}

type CCommunity_GetAppRichPresenceLocalization_Response_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response_Token) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response_Token.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response_Token) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{8}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCommunity_GetAppRichPresenceLocalization_Response_TokenList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string                                                     `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Tokens   []*CCommunity_GetAppRichPresenceLocalization_Response_Token `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response_TokenList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response_TokenList) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response_TokenList.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response_TokenList) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{9}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) GetTokens() []*CCommunity_GetAppRichPresenceLocalization_Response_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CCommunity_GetCommentThread_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *uint32 `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64 `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64 `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Commentthreadid   *uint64 `protobuf:"fixed64,5,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Start             *int32  `protobuf:"varint,6,opt,name=start" json:"start,omitempty"`
	Count             *int32  `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
	Upvoters          *int32  `protobuf:"varint,8,opt,name=upvoters" json:"upvoters,omitempty"`
	IncludeDeleted    *bool   `protobuf:"varint,9,opt,name=include_deleted,json=includeDeleted" json:"include_deleted,omitempty"`
	Gidcomment        *uint64 `protobuf:"fixed64,10,opt,name=gidcomment" json:"gidcomment,omitempty"`
	TimeOldest        *uint32 `protobuf:"varint,11,opt,name=time_oldest,json=timeOldest" json:"time_oldest,omitempty"`
	OldestFirst       *bool   `protobuf:"varint,12,opt,name=oldest_first,json=oldestFirst" json:"oldest_first,omitempty"`
}

func (x *CCommunity_GetCommentThread_Request) Reset() {
	*x = CCommunity_GetCommentThread_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThread_Request) ProtoMessage() {}

func (x *CCommunity_GetCommentThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{10}
}

func (x *CCommunity_GetCommentThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCommentThreadType() uint32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetUpvoters() int32 {
	if x != nil && x.Upvoters != nil {
		return *x.Upvoters
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetIncludeDeleted() bool {
	if x != nil && x.IncludeDeleted != nil {
		return *x.IncludeDeleted
	}
	return false
}

func (x *CCommunity_GetCommentThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetTimeOldest() uint32 {
	if x != nil && x.TimeOldest != nil {
		return *x.TimeOldest
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetOldestFirst() bool {
	if x != nil && x.OldestFirst != nil {
		return *x.OldestFirst
	}
	return false
}

type CCommunity_Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment    *uint64        `protobuf:"fixed64,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Steamid       *uint64        `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Timestamp     *uint32        `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Text          *string        `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Upvotes       *int32         `protobuf:"varint,5,opt,name=upvotes" json:"upvotes,omitempty"`
	Hidden        *bool          `protobuf:"varint,6,opt,name=hidden" json:"hidden,omitempty"`
	HiddenByUser  *bool          `protobuf:"varint,7,opt,name=hidden_by_user,json=hiddenByUser" json:"hidden_by_user,omitempty"`
	Deleted       *bool          `protobuf:"varint,8,opt,name=deleted" json:"deleted,omitempty"`
	Ipaddress     *CMsgIPAddress `protobuf:"bytes,9,opt,name=ipaddress" json:"ipaddress,omitempty"`
	TotalHidden   *int32         `protobuf:"varint,10,opt,name=total_hidden,json=totalHidden" json:"total_hidden,omitempty"`
	UpvotedByUser *bool          `protobuf:"varint,11,opt,name=upvoted_by_user,json=upvotedByUser" json:"upvoted_by_user,omitempty"`
}

func (x *CCommunity_Comment) Reset() {
	*x = CCommunity_Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_Comment) ProtoMessage() {}

func (x *CCommunity_Comment) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_Comment.ProtoReflect.Descriptor instead.
func (*CCommunity_Comment) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{11}
}

func (x *CCommunity_Comment) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_Comment) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_Comment) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCommunity_Comment) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CCommunity_Comment) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_Comment) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *CCommunity_Comment) GetHiddenByUser() bool {
	if x != nil && x.HiddenByUser != nil {
		return *x.HiddenByUser
	}
	return false
}

func (x *CCommunity_Comment) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CCommunity_Comment) GetIpaddress() *CMsgIPAddress {
	if x != nil {
		return x.Ipaddress
	}
	return nil
}

func (x *CCommunity_Comment) GetTotalHidden() int32 {
	if x != nil && x.TotalHidden != nil {
		return *x.TotalHidden
	}
	return 0
}

func (x *CCommunity_Comment) GetUpvotedByUser() bool {
	if x != nil && x.UpvotedByUser != nil {
		return *x.UpvotedByUser
	}
	return false
}

type CCommunity_GetCommentThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments        []*CCommunity_Comment `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
	DeletedComments []*CCommunity_Comment `protobuf:"bytes,2,rep,name=deleted_comments,json=deletedComments" json:"deleted_comments,omitempty"`
	Steamid         *uint64               `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	Commentthreadid *uint64               `protobuf:"fixed64,4,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Start           *int32                `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
	Count           *int32                `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	TotalCount      *int32                `protobuf:"varint,7,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Upvotes         *int32                `protobuf:"varint,8,opt,name=upvotes" json:"upvotes,omitempty"`
	Upvoters        []uint32              `protobuf:"varint,9,rep,name=upvoters" json:"upvoters,omitempty"`
	UserSubscribed  *bool                 `protobuf:"varint,10,opt,name=user_subscribed,json=userSubscribed" json:"user_subscribed,omitempty"`
	UserUpvoted     *bool                 `protobuf:"varint,11,opt,name=user_upvoted,json=userUpvoted" json:"user_upvoted,omitempty"`
	AnswerCommentid *uint64               `protobuf:"fixed64,12,opt,name=answer_commentid,json=answerCommentid" json:"answer_commentid,omitempty"`
	AnswerActor     *uint32               `protobuf:"varint,13,opt,name=answer_actor,json=answerActor" json:"answer_actor,omitempty"`
	AnswerActorRank *int32                `protobuf:"varint,14,opt,name=answer_actor_rank,json=answerActorRank" json:"answer_actor_rank,omitempty"`
	CanPost         *bool                 `protobuf:"varint,15,opt,name=can_post,json=canPost" json:"can_post,omitempty"`
}

func (x *CCommunity_GetCommentThread_Response) Reset() {
	*x = CCommunity_GetCommentThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThread_Response) ProtoMessage() {}

func (x *CCommunity_GetCommentThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{12}
}

func (x *CCommunity_GetCommentThread_Response) GetComments() []*CCommunity_Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetDeletedComments() []*CCommunity_Comment {
	if x != nil {
		return x.DeletedComments
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetUpvoters() []uint32 {
	if x != nil {
		return x.Upvoters
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetUserSubscribed() bool {
	if x != nil && x.UserSubscribed != nil {
		return *x.UserSubscribed
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetUserUpvoted() bool {
	if x != nil && x.UserUpvoted != nil {
		return *x.UserUpvoted
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerCommentid() uint64 {
	if x != nil && x.AnswerCommentid != nil {
		return *x.AnswerCommentid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerActor() uint32 {
	if x != nil && x.AnswerActor != nil {
		return *x.AnswerActor
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerActorRank() int32 {
	if x != nil && x.AnswerActorRank != nil {
		return *x.AnswerActorRank
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCanPost() bool {
	if x != nil && x.CanPost != nil {
		return *x.CanPost
	}
	return false
}

type CCommunity_PostCommentToThread_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid               *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType     *uint32 `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature            *uint64 `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2           *uint64 `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Text                  *string `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	Gidparentcomment      *uint64 `protobuf:"fixed64,7,opt,name=gidparentcomment" json:"gidparentcomment,omitempty"`
	SuppressNotifications *bool   `protobuf:"varint,8,opt,name=suppress_notifications,json=suppressNotifications" json:"suppress_notifications,omitempty"`
}

func (x *CCommunity_PostCommentToThread_Request) Reset() {
	*x = CCommunity_PostCommentToThread_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PostCommentToThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PostCommentToThread_Request) ProtoMessage() {}

func (x *CCommunity_PostCommentToThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PostCommentToThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PostCommentToThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{13}
}

func (x *CCommunity_PostCommentToThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetCommentThreadType() uint32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CCommunity_PostCommentToThread_Request) GetGidparentcomment() uint64 {
	if x != nil && x.Gidparentcomment != nil {
		return *x.Gidparentcomment
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetSuppressNotifications() bool {
	if x != nil && x.SuppressNotifications != nil {
		return *x.SuppressNotifications
	}
	return false
}

type CCommunity_PostCommentToThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment      *uint64 `protobuf:"fixed64,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Commentthreadid *uint64 `protobuf:"fixed64,2,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Count           *int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Upvotes         *int32  `protobuf:"varint,4,opt,name=upvotes" json:"upvotes,omitempty"`
}

func (x *CCommunity_PostCommentToThread_Response) Reset() {
	*x = CCommunity_PostCommentToThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PostCommentToThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PostCommentToThread_Response) ProtoMessage() {}

func (x *CCommunity_PostCommentToThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PostCommentToThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PostCommentToThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{14}
}

func (x *CCommunity_PostCommentToThread_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

type CCommunity_DeleteCommentFromThread_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *uint32 `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64 `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64 `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64 `protobuf:"fixed64,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Undelete          *bool   `protobuf:"varint,6,opt,name=undelete" json:"undelete,omitempty"`
}

func (x *CCommunity_DeleteCommentFromThread_Request) Reset() {
	*x = CCommunity_DeleteCommentFromThread_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_DeleteCommentFromThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_DeleteCommentFromThread_Request) ProtoMessage() {}

func (x *CCommunity_DeleteCommentFromThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_DeleteCommentFromThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_DeleteCommentFromThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{15}
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetCommentThreadType() uint32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetUndelete() bool {
	if x != nil && x.Undelete != nil {
		return *x.Undelete
	}
	return false
}

type CCommunity_DeleteCommentFromThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_DeleteCommentFromThread_Response) Reset() {
	*x = CCommunity_DeleteCommentFromThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_DeleteCommentFromThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_DeleteCommentFromThread_Response) ProtoMessage() {}

func (x *CCommunity_DeleteCommentFromThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_DeleteCommentFromThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_DeleteCommentFromThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{16}
}

type CCommunity_RateCommentThread_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commentthreadtype     *string `protobuf:"bytes,1,opt,name=commentthreadtype" json:"commentthreadtype,omitempty"`
	Steamid               *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Gidfeature            *uint64 `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2           *uint64 `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment            *uint64 `protobuf:"varint,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	RateUp                *bool   `protobuf:"varint,6,opt,name=rate_up,json=rateUp" json:"rate_up,omitempty"`
	SuppressNotifications *bool   `protobuf:"varint,7,opt,name=suppress_notifications,json=suppressNotifications" json:"suppress_notifications,omitempty"`
}

func (x *CCommunity_RateCommentThread_Request) Reset() {
	*x = CCommunity_RateCommentThread_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateCommentThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateCommentThread_Request) ProtoMessage() {}

func (x *CCommunity_RateCommentThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateCommentThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_RateCommentThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{17}
}

func (x *CCommunity_RateCommentThread_Request) GetCommentthreadtype() string {
	if x != nil && x.Commentthreadtype != nil {
		return *x.Commentthreadtype
	}
	return ""
}

func (x *CCommunity_RateCommentThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetRateUp() bool {
	if x != nil && x.RateUp != nil {
		return *x.RateUp
	}
	return false
}

func (x *CCommunity_RateCommentThread_Request) GetSuppressNotifications() bool {
	if x != nil && x.SuppressNotifications != nil {
		return *x.SuppressNotifications
	}
	return false
}

type CCommunity_RateCommentThread_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gidcomment      *uint64 `protobuf:"varint,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Commentthreadid *uint64 `protobuf:"varint,2,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Count           *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Upvotes         *uint32 `protobuf:"varint,4,opt,name=upvotes" json:"upvotes,omitempty"`
	HasUpvoted      *bool   `protobuf:"varint,5,opt,name=has_upvoted,json=hasUpvoted" json:"has_upvoted,omitempty"`
}

func (x *CCommunity_RateCommentThread_Response) Reset() {
	*x = CCommunity_RateCommentThread_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateCommentThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateCommentThread_Response) ProtoMessage() {}

func (x *CCommunity_RateCommentThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateCommentThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_RateCommentThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{18}
}

func (x *CCommunity_RateCommentThread_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetHasUpvoted() bool {
	if x != nil && x.HasUpvoted != nil {
		return *x.HasUpvoted
	}
	return false
}

type CCommunity_GetCommentThreadRatings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commentthreadtype *string `protobuf:"bytes,1,opt,name=commentthreadtype" json:"commentthreadtype,omitempty"`
	Steamid           *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Gidfeature        *uint64 `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64 `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64 `protobuf:"varint,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	MaxResults        *uint32 `protobuf:"varint,6,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
}

func (x *CCommunity_GetCommentThreadRatings_Request) Reset() {
	*x = CCommunity_GetCommentThreadRatings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThreadRatings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThreadRatings_Request) ProtoMessage() {}

func (x *CCommunity_GetCommentThreadRatings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThreadRatings_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThreadRatings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{19}
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetCommentthreadtype() string {
	if x != nil && x.Commentthreadtype != nil {
		return *x.Commentthreadtype
	}
	return ""
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetMaxResults() uint32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

type CCommunity_GetCommentThreadRatings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commentthreadid   *uint64  `protobuf:"varint,1,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Gidcomment        *uint64  `protobuf:"varint,2,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Upvotes           *uint32  `protobuf:"varint,3,opt,name=upvotes" json:"upvotes,omitempty"`
	HasUpvoted        *bool    `protobuf:"varint,4,opt,name=has_upvoted,json=hasUpvoted" json:"has_upvoted,omitempty"`
	UpvoterAccountids []uint32 `protobuf:"varint,5,rep,name=upvoter_accountids,json=upvoterAccountids" json:"upvoter_accountids,omitempty"`
}

func (x *CCommunity_GetCommentThreadRatings_Response) Reset() {
	*x = CCommunity_GetCommentThreadRatings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetCommentThreadRatings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThreadRatings_Response) ProtoMessage() {}

func (x *CCommunity_GetCommentThreadRatings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThreadRatings_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThreadRatings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{20}
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetHasUpvoted() bool {
	if x != nil && x.HasUpvoted != nil {
		return *x.HasUpvoted
	}
	return false
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetUpvoterAccountids() []uint32 {
	if x != nil {
		return x.UpvoterAccountids
	}
	return nil
}

type CCommunity_RateClanAnnouncement_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Announcementid *uint64 `protobuf:"varint,1,opt,name=announcementid" json:"announcementid,omitempty"`
	VoteUp         *bool   `protobuf:"varint,2,opt,name=vote_up,json=voteUp" json:"vote_up,omitempty"`
}

func (x *CCommunity_RateClanAnnouncement_Request) Reset() {
	*x = CCommunity_RateClanAnnouncement_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateClanAnnouncement_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateClanAnnouncement_Request) ProtoMessage() {}

func (x *CCommunity_RateClanAnnouncement_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateClanAnnouncement_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_RateClanAnnouncement_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{21}
}

func (x *CCommunity_RateClanAnnouncement_Request) GetAnnouncementid() uint64 {
	if x != nil && x.Announcementid != nil {
		return *x.Announcementid
	}
	return 0
}

func (x *CCommunity_RateClanAnnouncement_Request) GetVoteUp() bool {
	if x != nil && x.VoteUp != nil {
		return *x.VoteUp
	}
	return false
}

type CCommunity_RateClanAnnouncement_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_RateClanAnnouncement_Response) Reset() {
	*x = CCommunity_RateClanAnnouncement_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_RateClanAnnouncement_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateClanAnnouncement_Response) ProtoMessage() {}

func (x *CCommunity_RateClanAnnouncement_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateClanAnnouncement_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_RateClanAnnouncement_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{22}
}

type CCommunity_GetClanAnnouncementVoteForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Announcementid *uint64 `protobuf:"varint,1,opt,name=announcementid" json:"announcementid,omitempty"`
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) Reset() {
	*x = CCommunity_GetClanAnnouncementVoteForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanAnnouncementVoteForUser_Request) ProtoMessage() {}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanAnnouncementVoteForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanAnnouncementVoteForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{23}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) GetAnnouncementid() uint64 {
	if x != nil && x.Announcementid != nil {
		return *x.Announcementid
	}
	return 0
}

type CCommunity_GetClanAnnouncementVoteForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VotedUp   *bool `protobuf:"varint,1,opt,name=voted_up,json=votedUp" json:"voted_up,omitempty"`
	VotedDown *bool `protobuf:"varint,2,opt,name=voted_down,json=votedDown" json:"voted_down,omitempty"`
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) Reset() {
	*x = CCommunity_GetClanAnnouncementVoteForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanAnnouncementVoteForUser_Response) ProtoMessage() {}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanAnnouncementVoteForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanAnnouncementVoteForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{24}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) GetVotedUp() bool {
	if x != nil && x.VotedUp != nil {
		return *x.VotedUp
	}
	return false
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) GetVotedDown() bool {
	if x != nil && x.VotedDown != nil {
		return *x.VotedDown
	}
	return false
}

type CAppPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority *uint32  `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Appid    []uint32 `protobuf:"varint,2,rep,name=appid" json:"appid,omitempty"`
}

func (x *CAppPriority) Reset() {
	*x = CAppPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppPriority) ProtoMessage() {}

func (x *CAppPriority) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppPriority.ProtoReflect.Descriptor instead.
func (*CAppPriority) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{25}
}

func (x *CAppPriority) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *CAppPriority) GetAppid() []uint32 {
	if x != nil {
		return x.Appid
	}
	return nil
}

type CCommunity_GetUserPartnerEventNews_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count              *uint32         `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Offset             *uint32         `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Rtime32StartTime   *uint32         `protobuf:"varint,3,opt,name=rtime32_start_time,json=rtime32StartTime" json:"rtime32_start_time,omitempty"`
	Rtime32EndTime     *uint32         `protobuf:"varint,4,opt,name=rtime32_end_time,json=rtime32EndTime" json:"rtime32_end_time,omitempty"`
	LanguagePreference []uint32        `protobuf:"varint,5,rep,name=language_preference,json=languagePreference" json:"language_preference,omitempty"`
	FilterEventType    []int32         `protobuf:"varint,6,rep,name=filter_event_type,json=filterEventType" json:"filter_event_type,omitempty"`
	FilterToAppid      *bool           `protobuf:"varint,7,opt,name=filter_to_appid,json=filterToAppid" json:"filter_to_appid,omitempty"`
	AppList            []*CAppPriority `protobuf:"bytes,8,rep,name=app_list,json=appList" json:"app_list,omitempty"`
	CountAfter         *uint32         `protobuf:"varint,9,opt,name=count_after,json=countAfter,def=0" json:"count_after,omitempty"`
	CountBefore        *uint32         `protobuf:"varint,10,opt,name=count_before,json=countBefore,def=0" json:"count_before,omitempty"`
}

// Default values for CCommunity_GetUserPartnerEventNews_Request fields.
const (
	Default_CCommunity_GetUserPartnerEventNews_Request_CountAfter  = uint32(0)
	Default_CCommunity_GetUserPartnerEventNews_Request_CountBefore = uint32(0)
)

func (x *CCommunity_GetUserPartnerEventNews_Request) Reset() {
	*x = CCommunity_GetUserPartnerEventNews_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventNews_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventNews_Request) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventNews_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventNews_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventNews_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{26}
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetRtime32StartTime() uint32 {
	if x != nil && x.Rtime32StartTime != nil {
		return *x.Rtime32StartTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetRtime32EndTime() uint32 {
	if x != nil && x.Rtime32EndTime != nil {
		return *x.Rtime32EndTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetLanguagePreference() []uint32 {
	if x != nil {
		return x.LanguagePreference
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetFilterEventType() []int32 {
	if x != nil {
		return x.FilterEventType
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetFilterToAppid() bool {
	if x != nil && x.FilterToAppid != nil {
		return *x.FilterToAppid
	}
	return false
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetAppList() []*CAppPriority {
	if x != nil {
		return x.AppList
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCountAfter() uint32 {
	if x != nil && x.CountAfter != nil {
		return *x.CountAfter
	}
	return Default_CCommunity_GetUserPartnerEventNews_Request_CountAfter
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCountBefore() uint32 {
	if x != nil && x.CountBefore != nil {
		return *x.CountBefore
	}
	return Default_CCommunity_GetUserPartnerEventNews_Request_CountBefore
}

type CCommunity_GetUserPartnerEventNews_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CClanMatchEventByRange `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventNews_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventNews_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventNews_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventNews_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventNews_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventNews_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventNews_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{27}
}

func (x *CCommunity_GetUserPartnerEventNews_Response) GetResults() []*CClanMatchEventByRange {
	if x != nil {
		return x.Results
	}
	return nil
}

type CCommunity_GetBestEventsForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeSteamBlog         *bool   `protobuf:"varint,1,opt,name=include_steam_blog,json=includeSteamBlog" json:"include_steam_blog,omitempty"`
	FilterToPlayedWithinDays *uint32 `protobuf:"varint,2,opt,name=filter_to_played_within_days,json=filterToPlayedWithinDays" json:"filter_to_played_within_days,omitempty"`
}

func (x *CCommunity_GetBestEventsForUser_Request) Reset() {
	*x = CCommunity_GetBestEventsForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetBestEventsForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBestEventsForUser_Request) ProtoMessage() {}

func (x *CCommunity_GetBestEventsForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBestEventsForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBestEventsForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{28}
}

func (x *CCommunity_GetBestEventsForUser_Request) GetIncludeSteamBlog() bool {
	if x != nil && x.IncludeSteamBlog != nil {
		return *x.IncludeSteamBlog
	}
	return false
}

func (x *CCommunity_GetBestEventsForUser_Request) GetFilterToPlayedWithinDays() uint32 {
	if x != nil && x.FilterToPlayedWithinDays != nil {
		return *x.FilterToPlayedWithinDays
	}
	return 0
}

type CCommunity_PartnerEventResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clanid              *uint32 `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid            *uint64 `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	AnnouncementGid     *uint64 `protobuf:"fixed64,3,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	Appid               *uint32 `protobuf:"varint,4,opt,name=appid" json:"appid,omitempty"`
	PossibleTakeover    *bool   `protobuf:"varint,5,opt,name=possible_takeover,json=possibleTakeover" json:"possible_takeover,omitempty"`
	Rtime32LastModified *uint32 `protobuf:"varint,6,opt,name=rtime32_last_modified,json=rtime32LastModified,def=0" json:"rtime32_last_modified,omitempty"`
	UserAppPriority     *int32  `protobuf:"varint,7,opt,name=user_app_priority,json=userAppPriority" json:"user_app_priority,omitempty"`
}

// Default values for CCommunity_PartnerEventResult fields.
const (
	Default_CCommunity_PartnerEventResult_Rtime32LastModified = uint32(0)
)

func (x *CCommunity_PartnerEventResult) Reset() {
	*x = CCommunity_PartnerEventResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventResult) ProtoMessage() {}

func (x *CCommunity_PartnerEventResult) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventResult.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventResult) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{29}
}

func (x *CCommunity_PartnerEventResult) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetPossibleTakeover() bool {
	if x != nil && x.PossibleTakeover != nil {
		return *x.PossibleTakeover
	}
	return false
}

func (x *CCommunity_PartnerEventResult) GetRtime32LastModified() uint32 {
	if x != nil && x.Rtime32LastModified != nil {
		return *x.Rtime32LastModified
	}
	return Default_CCommunity_PartnerEventResult_Rtime32LastModified
}

func (x *CCommunity_PartnerEventResult) GetUserAppPriority() int32 {
	if x != nil && x.UserAppPriority != nil {
		return *x.UserAppPriority
	}
	return 0
}

type CCommunity_GetBestEventsForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CCommunity_PartnerEventResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CCommunity_GetBestEventsForUser_Response) Reset() {
	*x = CCommunity_GetBestEventsForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetBestEventsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBestEventsForUser_Response) ProtoMessage() {}

func (x *CCommunity_GetBestEventsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBestEventsForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBestEventsForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{30}
}

func (x *CCommunity_GetBestEventsForUser_Response) GetResults() []*CCommunity_PartnerEventResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type CCommunity_ClearUserPartnerEventsAppPriorities_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) Reset() {
	*x = CCommunity_ClearUserPartnerEventsAppPriorities_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearUserPartnerEventsAppPriorities_Request) ProtoMessage() {}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearUserPartnerEventsAppPriorities_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearUserPartnerEventsAppPriorities_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{31}
}

type CCommunity_ClearUserPartnerEventsAppPriorities_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) Reset() {
	*x = CCommunity_ClearUserPartnerEventsAppPriorities_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearUserPartnerEventsAppPriorities_Response) ProtoMessage() {}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearUserPartnerEventsAppPriorities_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearUserPartnerEventsAppPriorities_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{32}
}

type CCommunity_PartnerEventsAppPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	UserAppPriority *int32  `protobuf:"varint,2,opt,name=user_app_priority,json=userAppPriority" json:"user_app_priority,omitempty"`
}

func (x *CCommunity_PartnerEventsAppPriority) Reset() {
	*x = CCommunity_PartnerEventsAppPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsAppPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsAppPriority) ProtoMessage() {}

func (x *CCommunity_PartnerEventsAppPriority) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsAppPriority.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsAppPriority) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{33}
}

func (x *CCommunity_PartnerEventsAppPriority) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_PartnerEventsAppPriority) GetUserAppPriority() int32 {
	if x != nil && x.UserAppPriority != nil {
		return *x.UserAppPriority
	}
	return 0
}

type CCommunity_GetUserPartnerEventsAppPriorities_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) Reset() {
	*x = CCommunity_GetUserPartnerEventsAppPriorities_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventsAppPriorities_Request) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventsAppPriorities_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventsAppPriorities_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{34}
}

type CCommunity_GetUserPartnerEventsAppPriorities_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priorities []*CCommunity_PartnerEventsAppPriority `protobuf:"bytes,1,rep,name=priorities" json:"priorities,omitempty"`
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventsAppPriorities_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventsAppPriorities_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventsAppPriorities_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventsAppPriorities_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{35}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) GetPriorities() []*CCommunity_PartnerEventsAppPriority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

type CCommunity_ClearSinglePartnerEventsAppPriority_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) Reset() {
	*x = CCommunity_ClearSinglePartnerEventsAppPriority_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearSinglePartnerEventsAppPriority_Request) ProtoMessage() {}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearSinglePartnerEventsAppPriority_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearSinglePartnerEventsAppPriority_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{36}
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_ClearSinglePartnerEventsAppPriority_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) Reset() {
	*x = CCommunity_ClearSinglePartnerEventsAppPriority_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearSinglePartnerEventsAppPriority_Response) ProtoMessage() {}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearSinglePartnerEventsAppPriority_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearSinglePartnerEventsAppPriority_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{37}
}

type CCommunity_PartnerEventsShowMoreForApp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) Reset() {
	*x = CCommunity_PartnerEventsShowMoreForApp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowMoreForApp_Request) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowMoreForApp_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowMoreForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{38}
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_PartnerEventsShowMoreForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) Reset() {
	*x = CCommunity_PartnerEventsShowMoreForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowMoreForApp_Response) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowMoreForApp_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowMoreForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{39}
}

type CCommunity_PartnerEventsShowLessForApp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) Reset() {
	*x = CCommunity_PartnerEventsShowLessForApp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowLessForApp_Request) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowLessForApp_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowLessForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{40}
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_PartnerEventsShowLessForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) Reset() {
	*x = CCommunity_PartnerEventsShowLessForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowLessForApp_Response) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowLessForApp_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowLessForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{41}
}

type CCommunity_MarkPartnerEventsForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markings []*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking `protobuf:"bytes,1,rep,name=markings" json:"markings,omitempty"`
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Request) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{42}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) GetMarkings() []*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking {
	if x != nil {
		return x.Markings
	}
	return nil
}

type CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clanid          *uint32 `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid        *uint64 `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	DisplayLocation *int32  `protobuf:"varint,3,opt,name=display_location,json=displayLocation" json:"display_location,omitempty"`
	MarkShown       *bool   `protobuf:"varint,4,opt,name=mark_shown,json=markShown" json:"mark_shown,omitempty"`
	MarkRead        *bool   `protobuf:"varint,5,opt,name=mark_read,json=markRead" json:"mark_read,omitempty"`
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{43}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetDisplayLocation() int32 {
	if x != nil && x.DisplayLocation != nil {
		return *x.DisplayLocation
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetMarkShown() bool {
	if x != nil && x.MarkShown != nil {
		return *x.MarkShown
	}
	return false
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetMarkRead() bool {
	if x != nil && x.MarkRead != nil {
		return *x.MarkRead
	}
	return false
}

type CCommunity_MarkPartnerEventsForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCommunity_MarkPartnerEventsForUser_Response) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_MarkPartnerEventsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Response) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{44}
}

type CProductImpressionsFromClient_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impressions []*CProductImpressionsFromClient_Notification_Impression `protobuf:"bytes,1,rep,name=impressions" json:"impressions,omitempty"`
}

func (x *CProductImpressionsFromClient_Notification) Reset() {
	*x = CProductImpressionsFromClient_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CProductImpressionsFromClient_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CProductImpressionsFromClient_Notification) ProtoMessage() {}

func (x *CProductImpressionsFromClient_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CProductImpressionsFromClient_Notification.ProtoReflect.Descriptor instead.
func (*CProductImpressionsFromClient_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{45}
}

func (x *CProductImpressionsFromClient_Notification) GetImpressions() []*CProductImpressionsFromClient_Notification_Impression {
	if x != nil {
		return x.Impressions
	}
	return nil
}

type CProductImpressionsFromClient_Notification_Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Appid          *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	NumImpressions *uint32 `protobuf:"varint,3,opt,name=num_impressions,json=numImpressions" json:"num_impressions,omitempty"`
}

func (x *CProductImpressionsFromClient_Notification_Impression) Reset() {
	*x = CProductImpressionsFromClient_Notification_Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CProductImpressionsFromClient_Notification_Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CProductImpressionsFromClient_Notification_Impression) ProtoMessage() {}

func (x *CProductImpressionsFromClient_Notification_Impression) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CProductImpressionsFromClient_Notification_Impression.ProtoReflect.Descriptor instead.
func (*CProductImpressionsFromClient_Notification_Impression) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{46}
}

func (x *CProductImpressionsFromClient_Notification_Impression) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CProductImpressionsFromClient_Notification_Impression) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CProductImpressionsFromClient_Notification_Impression) GetNumImpressions() uint32 {
	if x != nil && x.NumImpressions != nil {
		return *x.NumImpressions
	}
	return 0
}

type CFriendsListCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupid          *uint32  `protobuf:"varint,1,opt,name=groupid" json:"groupid,omitempty"`
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AccountidMembers []uint32 `protobuf:"varint,3,rep,name=accountid_members,json=accountidMembers" json:"accountid_members,omitempty"`
}

func (x *CFriendsListCategory) Reset() {
	*x = CFriendsListCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsListCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsListCategory) ProtoMessage() {}

func (x *CFriendsListCategory) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsListCategory.ProtoReflect.Descriptor instead.
func (*CFriendsListCategory) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{47}
}

func (x *CFriendsListCategory) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *CFriendsListCategory) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CFriendsListCategory) GetAccountidMembers() []uint32 {
	if x != nil {
		return x.AccountidMembers
	}
	return nil
}

type CFriendsList_GetCategories_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFriendsList_GetCategories_Request) Reset() {
	*x = CFriendsList_GetCategories_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetCategories_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetCategories_Request) ProtoMessage() {}

func (x *CFriendsList_GetCategories_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetCategories_Request.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetCategories_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{48}
}

type CFriendsList_GetCategories_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*CFriendsListCategory `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
}

func (x *CFriendsList_GetCategories_Response) Reset() {
	*x = CFriendsList_GetCategories_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetCategories_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetCategories_Response) ProtoMessage() {}

func (x *CFriendsList_GetCategories_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetCategories_Response.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetCategories_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{49}
}

func (x *CFriendsList_GetCategories_Response) GetCategories() []*CFriendsListCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type CFriendsListFavoriteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid   *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Clanid      *uint32 `protobuf:"varint,2,opt,name=clanid" json:"clanid,omitempty"`
	ChatGroupId *uint64 `protobuf:"varint,3,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CFriendsListFavoriteEntry) Reset() {
	*x = CFriendsListFavoriteEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsListFavoriteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsListFavoriteEntry) ProtoMessage() {}

func (x *CFriendsListFavoriteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsListFavoriteEntry.ProtoReflect.Descriptor instead.
func (*CFriendsListFavoriteEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{50}
}

func (x *CFriendsListFavoriteEntry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CFriendsListFavoriteEntry) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CFriendsListFavoriteEntry) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CFriendsList_GetFavorites_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFriendsList_GetFavorites_Request) Reset() {
	*x = CFriendsList_GetFavorites_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetFavorites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetFavorites_Request) ProtoMessage() {}

func (x *CFriendsList_GetFavorites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetFavorites_Request.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetFavorites_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{51}
}

type CFriendsList_GetFavorites_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Favorites []*CFriendsListFavoriteEntry `protobuf:"bytes,1,rep,name=favorites" json:"favorites,omitempty"`
}

func (x *CFriendsList_GetFavorites_Response) Reset() {
	*x = CFriendsList_GetFavorites_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetFavorites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetFavorites_Response) ProtoMessage() {}

func (x *CFriendsList_GetFavorites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetFavorites_Response.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetFavorites_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{52}
}

func (x *CFriendsList_GetFavorites_Response) GetFavorites() []*CFriendsListFavoriteEntry {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type CFriendsList_SetFavorites_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Favorites []*CFriendsListFavoriteEntry `protobuf:"bytes,1,rep,name=favorites" json:"favorites,omitempty"`
}

func (x *CFriendsList_SetFavorites_Request) Reset() {
	*x = CFriendsList_SetFavorites_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_SetFavorites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_SetFavorites_Request) ProtoMessage() {}

func (x *CFriendsList_SetFavorites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_SetFavorites_Request.ProtoReflect.Descriptor instead.
func (*CFriendsList_SetFavorites_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{53}
}

func (x *CFriendsList_SetFavorites_Request) GetFavorites() []*CFriendsListFavoriteEntry {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type CFriendsList_SetFavorites_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFriendsList_SetFavorites_Response) Reset() {
	*x = CFriendsList_SetFavorites_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_SetFavorites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_SetFavorites_Response) ProtoMessage() {}

func (x *CFriendsList_SetFavorites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_SetFavorites_Response.ProtoReflect.Descriptor instead.
func (*CFriendsList_SetFavorites_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{54}
}

type CFriendsList_FavoritesChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Favorites []*CFriendsListFavoriteEntry `protobuf:"bytes,1,rep,name=favorites" json:"favorites,omitempty"`
}

func (x *CFriendsList_FavoritesChanged_Notification) Reset() {
	*x = CFriendsList_FavoritesChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_FavoritesChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_FavoritesChanged_Notification) ProtoMessage() {}

func (x *CFriendsList_FavoritesChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_FavoritesChanged_Notification.ProtoReflect.Descriptor instead.
func (*CFriendsList_FavoritesChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{55}
}

func (x *CFriendsList_FavoritesChanged_Notification) GetFavorites() []*CFriendsListFavoriteEntry {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type CFriendsList_GetFriendsList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CFriendsList_GetFriendsList_Request) Reset() {
	*x = CFriendsList_GetFriendsList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetFriendsList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetFriendsList_Request) ProtoMessage() {}

func (x *CFriendsList_GetFriendsList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetFriendsList_Request.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetFriendsList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{56}
}

type CFriendsList_GetFriendsList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friendslist *CMsgClientFriendsList `protobuf:"bytes,1,opt,name=friendslist" json:"friendslist,omitempty"`
}

func (x *CFriendsList_GetFriendsList_Response) Reset() {
	*x = CFriendsList_GetFriendsList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsList_GetFriendsList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsList_GetFriendsList_Response) ProtoMessage() {}

func (x *CFriendsList_GetFriendsList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsList_GetFriendsList_Response.ProtoReflect.Descriptor instead.
func (*CFriendsList_GetFriendsList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{57}
}

func (x *CFriendsList_GetFriendsList_Response) GetFriendslist() *CMsgClientFriendsList {
	if x != nil {
		return x.Friendslist
	}
	return nil
}

type CMsgClientUCMEnumerateUserPublishedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StartIndex *uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	SortOrder  *uint32 `protobuf:"varint,3,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) Reset() {
	*x = CMsgClientUCMEnumerateUserPublishedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserPublishedFiles) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserPublishedFiles.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserPublishedFiles) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) GetSortOrder() uint32 {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return 0
}

type CMsgClientUCMEnumerateUserPublishedFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult        *int32                                                              `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PublishedFiles []*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId `protobuf:"bytes,2,rep,name=published_files,json=publishedFiles" json:"published_files,omitempty"`
	TotalResults   *uint32                                                             `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserPublishedFilesResponse fields.
const (
	Default_CMsgClientUCMEnumerateUserPublishedFilesResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) Reset() {
	*x = CMsgClientUCMEnumerateUserPublishedFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserPublishedFilesResponse) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserPublishedFilesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserPublishedFilesResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMEnumerateUserPublishedFilesResponse_Eresult
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) GetPublishedFiles() []*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId {
	if x != nil {
		return x.PublishedFiles
	}
	return nil
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) Reset() {
	*x = CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

type CMsgClientUCMEnumerateUserSubscribedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StartIndex       *uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	ListType         *uint32 `protobuf:"varint,3,opt,name=list_type,json=listType,def=1" json:"list_type,omitempty"`
	MatchingFileType *uint32 `protobuf:"varint,4,opt,name=matching_file_type,json=matchingFileType,def=0" json:"matching_file_type,omitempty"`
	Count            *uint32 `protobuf:"varint,5,opt,name=count,def=50" json:"count,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFiles fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFiles_ListType         = uint32(1)
	Default_CMsgClientUCMEnumerateUserSubscribedFiles_MatchingFileType = uint32(0)
	Default_CMsgClientUCMEnumerateUserSubscribedFiles_Count            = uint32(50)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFiles) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFiles.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFiles) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFiles_ListType
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetMatchingFileType() uint32 {
	if x != nil && x.MatchingFileType != nil {
		return *x.MatchingFileType
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFiles_MatchingFileType
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFiles_Count
}

type CMsgClientUCMEnumerateUserSubscribedFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult         *int32                                                               `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	SubscribedFiles []*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId `protobuf:"bytes,2,rep,name=subscribed_files,json=subscribedFiles" json:"subscribed_files,omitempty"`
	TotalResults    *uint32                                                              `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFilesResponse fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFilesResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFilesResponse) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFilesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFilesResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFilesResponse_Eresult
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) GetSubscribedFiles() []*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId {
	if x != nil {
		return x.SubscribedFiles
	}
	return nil
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId   *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	Rtime32Subscribed *uint32 `protobuf:"fixed32,2,opt,name=rtime32_subscribed,json=rtime32Subscribed,def=0" json:"rtime32_subscribed,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId_Rtime32Subscribed = uint32(0)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) GetRtime32Subscribed() uint32 {
	if x != nil && x.Rtime32Subscribed != nil {
		return *x.Rtime32Subscribed
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId_Rtime32Subscribed
}

type CMsgClientUCMPublishedFileDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientUCMPublishedFileDeleted) Reset() {
	*x = CMsgClientUCMPublishedFileDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMPublishedFileDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMPublishedFileDeleted) ProtoMessage() {}

func (x *CMsgClientUCMPublishedFileDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMPublishedFileDeleted.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMPublishedFileDeleted) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgClientUCMPublishedFileDeleted) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMPublishedFileDeleted) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientWorkshopItemInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32                                           `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LastTimeUpdated *uint32                                           `protobuf:"varint,2,opt,name=last_time_updated,json=lastTimeUpdated" json:"last_time_updated,omitempty"`
	WorkshopItems   []*CMsgClientWorkshopItemInfoRequest_WorkshopItem `protobuf:"bytes,3,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
}

func (x *CMsgClientWorkshopItemInfoRequest) Reset() {
	*x = CMsgClientWorkshopItemInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemInfoRequest) ProtoMessage() {}

func (x *CMsgClientWorkshopItemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemInfoRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemInfoRequest) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgClientWorkshopItemInfoRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoRequest) GetLastTimeUpdated() uint32 {
	if x != nil && x.LastTimeUpdated != nil {
		return *x.LastTimeUpdated
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoRequest) GetWorkshopItems() []*CMsgClientWorkshopItemInfoRequest_WorkshopItem {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

type CMsgClientWorkshopItemInfoRequest_WorkshopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) Reset() {
	*x = CMsgClientWorkshopItemInfoRequest_WorkshopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemInfoRequest_WorkshopItem) ProtoMessage() {}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemInfoRequest_WorkshopItem.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemInfoRequest_WorkshopItem) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

type CMsgClientWorkshopItemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult       *int32                                                 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	UpdateTime    *uint32                                                `protobuf:"varint,2,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	WorkshopItems []*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo `protobuf:"bytes,3,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
	PrivateItems  []uint64                                               `protobuf:"fixed64,4,rep,name=private_items,json=privateItems" json:"private_items,omitempty"`
}

// Default values for CMsgClientWorkshopItemInfoResponse fields.
const (
	Default_CMsgClientWorkshopItemInfoResponse_Eresult = int32(2)
)

func (x *CMsgClientWorkshopItemInfoResponse) Reset() {
	*x = CMsgClientWorkshopItemInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemInfoResponse) ProtoMessage() {}

func (x *CMsgClientWorkshopItemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemInfoResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgClientWorkshopItemInfoResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientWorkshopItemInfoResponse_Eresult
}

func (x *CMsgClientWorkshopItemInfoResponse) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoResponse) GetWorkshopItems() []*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

func (x *CMsgClientWorkshopItemInfoResponse) GetPrivateItems() []uint64 {
	if x != nil {
		return x.PrivateItems
	}
	return nil
}

type CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	ManifestId      *uint64 `protobuf:"fixed64,3,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
	IsLegacy        *bool   `protobuf:"varint,4,opt,name=is_legacy,json=isLegacy" json:"is_legacy,omitempty"`
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) Reset() {
	*x = CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) ProtoMessage() {}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) GetIsLegacy() bool {
	if x != nil && x.IsLegacy != nil {
		return *x.IsLegacy
	}
	return false
}

type CMsgClientUCMGetPublishedFilesForUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId          *uint32  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CreatorSteamId *uint64  `protobuf:"fixed64,2,opt,name=creator_steam_id,json=creatorSteamId" json:"creator_steam_id,omitempty"`
	RequiredTags   []string `protobuf:"bytes,3,rep,name=required_tags,json=requiredTags" json:"required_tags,omitempty"`
	ExcludedTags   []string `protobuf:"bytes,4,rep,name=excluded_tags,json=excludedTags" json:"excluded_tags,omitempty"`
	StartIndex     *uint32  `protobuf:"varint,5,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
}

func (x *CMsgClientUCMGetPublishedFilesForUser) Reset() {
	*x = CMsgClientUCMGetPublishedFilesForUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMGetPublishedFilesForUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMGetPublishedFilesForUser) ProtoMessage() {}

func (x *CMsgClientUCMGetPublishedFilesForUser) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMGetPublishedFilesForUser.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMGetPublishedFilesForUser) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetCreatorSteamId() uint64 {
	if x != nil && x.CreatorSteamId != nil {
		return *x.CreatorSteamId
	}
	return 0
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetRequiredTags() []string {
	if x != nil {
		return x.RequiredTags
	}
	return nil
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetExcludedTags() []string {
	if x != nil {
		return x.ExcludedTags
	}
	return nil
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

type CMsgClientUCMGetPublishedFilesForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult        *int32                                                           `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PublishedFiles []*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId `protobuf:"bytes,2,rep,name=published_files,json=publishedFiles" json:"published_files,omitempty"`
	TotalResults   *uint32                                                          `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgClientUCMGetPublishedFilesForUserResponse fields.
const (
	Default_CMsgClientUCMGetPublishedFilesForUserResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) Reset() {
	*x = CMsgClientUCMGetPublishedFilesForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMGetPublishedFilesForUserResponse) ProtoMessage() {}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMGetPublishedFilesForUserResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMGetPublishedFilesForUserResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMGetPublishedFilesForUserResponse_Eresult
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) GetPublishedFiles() []*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId {
	if x != nil {
		return x.PublishedFiles
	}
	return nil
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) Reset() {
	*x = CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

type CMsgCREEnumeratePublishedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            *uint32  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	QueryType        *int32   `protobuf:"varint,2,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	StartIndex       *uint32  `protobuf:"varint,3,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	Days             *uint32  `protobuf:"varint,4,opt,name=days" json:"days,omitempty"`
	Count            *uint32  `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Tags             []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	UserTags         []string `protobuf:"bytes,7,rep,name=user_tags,json=userTags" json:"user_tags,omitempty"`
	MatchingFileType *uint32  `protobuf:"varint,8,opt,name=matching_file_type,json=matchingFileType,def=13" json:"matching_file_type,omitempty"`
}

// Default values for CMsgCREEnumeratePublishedFiles fields.
const (
	Default_CMsgCREEnumeratePublishedFiles_MatchingFileType = uint32(13)
)

func (x *CMsgCREEnumeratePublishedFiles) Reset() {
	*x = CMsgCREEnumeratePublishedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREEnumeratePublishedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREEnumeratePublishedFiles) ProtoMessage() {}

func (x *CMsgCREEnumeratePublishedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREEnumeratePublishedFiles.ProtoReflect.Descriptor instead.
func (*CMsgCREEnumeratePublishedFiles) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgCREEnumeratePublishedFiles) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFiles) GetQueryType() int32 {
	if x != nil && x.QueryType != nil {
		return *x.QueryType
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFiles) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFiles) GetDays() uint32 {
	if x != nil && x.Days != nil {
		return *x.Days
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFiles) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFiles) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CMsgCREEnumeratePublishedFiles) GetUserTags() []string {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *CMsgCREEnumeratePublishedFiles) GetMatchingFileType() uint32 {
	if x != nil && x.MatchingFileType != nil {
		return *x.MatchingFileType
	}
	return Default_CMsgCREEnumeratePublishedFiles_MatchingFileType
}

type CMsgCREEnumeratePublishedFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult        *int32                                                    `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PublishedFiles []*CMsgCREEnumeratePublishedFilesResponse_PublishedFileId `protobuf:"bytes,2,rep,name=published_files,json=publishedFiles" json:"published_files,omitempty"`
	TotalResults   *uint32                                                   `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgCREEnumeratePublishedFilesResponse fields.
const (
	Default_CMsgCREEnumeratePublishedFilesResponse_Eresult = int32(2)
)

func (x *CMsgCREEnumeratePublishedFilesResponse) Reset() {
	*x = CMsgCREEnumeratePublishedFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREEnumeratePublishedFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREEnumeratePublishedFilesResponse) ProtoMessage() {}

func (x *CMsgCREEnumeratePublishedFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREEnumeratePublishedFilesResponse.ProtoReflect.Descriptor instead.
func (*CMsgCREEnumeratePublishedFilesResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgCREEnumeratePublishedFilesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgCREEnumeratePublishedFilesResponse_Eresult
}

func (x *CMsgCREEnumeratePublishedFilesResponse) GetPublishedFiles() []*CMsgCREEnumeratePublishedFilesResponse_PublishedFileId {
	if x != nil {
		return x.PublishedFiles
	}
	return nil
}

func (x *CMsgCREEnumeratePublishedFilesResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgCREEnumeratePublishedFilesResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64  `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	VotesFor        *int32   `protobuf:"varint,2,opt,name=votes_for,json=votesFor" json:"votes_for,omitempty"`
	VotesAgainst    *int32   `protobuf:"varint,3,opt,name=votes_against,json=votesAgainst" json:"votes_against,omitempty"`
	Reports         *int32   `protobuf:"varint,4,opt,name=reports" json:"reports,omitempty"`
	Score           *float32 `protobuf:"fixed32,5,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) Reset() {
	*x = CMsgCREEnumeratePublishedFilesResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREEnumeratePublishedFilesResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) GetVotesFor() int32 {
	if x != nil && x.VotesFor != nil {
		return *x.VotesFor
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) GetVotesAgainst() int32 {
	if x != nil && x.VotesAgainst != nil {
		return *x.VotesAgainst
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) GetReports() int32 {
	if x != nil && x.Reports != nil {
		return *x.Reports
	}
	return 0
}

func (x *CMsgCREEnumeratePublishedFilesResponse_PublishedFileId) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgGameServerPingSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyIp      *uint32                            `protobuf:"fixed32,1,opt,name=my_ip,json=myIp" json:"my_ip,omitempty"`
	GsAppId   *int32                             `protobuf:"varint,2,opt,name=gs_app_id,json=gsAppId" json:"gs_app_id,omitempty"`
	GsSamples []*CMsgGameServerPingSample_Sample `protobuf:"bytes,3,rep,name=gs_samples,json=gsSamples" json:"gs_samples,omitempty"`
}

func (x *CMsgGameServerPingSample) Reset() {
	*x = CMsgGameServerPingSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerPingSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPingSample) ProtoMessage() {}

func (x *CMsgGameServerPingSample) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPingSample.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPingSample) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgGameServerPingSample) GetMyIp() uint32 {
	if x != nil && x.MyIp != nil {
		return *x.MyIp
	}
	return 0
}

func (x *CMsgGameServerPingSample) GetGsAppId() int32 {
	if x != nil && x.GsAppId != nil {
		return *x.GsAppId
	}
	return 0
}

func (x *CMsgGameServerPingSample) GetGsSamples() []*CMsgGameServerPingSample_Sample {
	if x != nil {
		return x.GsSamples
	}
	return nil
}

type CMsgGameServerPingSample_Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              *uint32 `protobuf:"fixed32,1,opt,name=ip" json:"ip,omitempty"`
	AvgPingMs       *uint32 `protobuf:"varint,2,opt,name=avg_ping_ms,json=avgPingMs" json:"avg_ping_ms,omitempty"`
	StddevPingMsX10 *uint32 `protobuf:"varint,3,opt,name=stddev_ping_ms_x10,json=stddevPingMsX10" json:"stddev_ping_ms_x10,omitempty"`
}

func (x *CMsgGameServerPingSample_Sample) Reset() {
	*x = CMsgGameServerPingSample_Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerPingSample_Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPingSample_Sample) ProtoMessage() {}

func (x *CMsgGameServerPingSample_Sample) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPingSample_Sample.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPingSample_Sample) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgGameServerPingSample_Sample) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *CMsgGameServerPingSample_Sample) GetAvgPingMs() uint32 {
	if x != nil && x.AvgPingMs != nil {
		return *x.AvgPingMs
	}
	return 0
}

func (x *CMsgGameServerPingSample_Sample) GetStddevPingMsX10() uint32 {
	if x != nil && x.StddevPingMsX10 != nil {
		return *x.StddevPingMsX10
	}
	return 0
}

type CClan_RespondToClanInvite_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Accept  *bool   `protobuf:"varint,2,opt,name=accept" json:"accept,omitempty"`
}

func (x *CClan_RespondToClanInvite_Request) Reset() {
	*x = CClan_RespondToClanInvite_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClan_RespondToClanInvite_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClan_RespondToClanInvite_Request) ProtoMessage() {}

func (x *CClan_RespondToClanInvite_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClan_RespondToClanInvite_Request.ProtoReflect.Descriptor instead.
func (*CClan_RespondToClanInvite_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{77}
}

func (x *CClan_RespondToClanInvite_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClan_RespondToClanInvite_Request) GetAccept() bool {
	if x != nil && x.Accept != nil {
		return *x.Accept
	}
	return false
}

type CClan_RespondToClanInvite_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClan_RespondToClanInvite_Response) Reset() {
	*x = CClan_RespondToClanInvite_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClan_RespondToClanInvite_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClan_RespondToClanInvite_Response) ProtoMessage() {}

func (x *CClan_RespondToClanInvite_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClan_RespondToClanInvite_Response.ProtoReflect.Descriptor instead.
func (*CClan_RespondToClanInvite_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{78}
}

type CVoiceChat_RequestOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_RequestOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_RequestOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_RequestOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_RequestOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_RequestOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{79}
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_RequestOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_RequestOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_RequestOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_RequestOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_RequestOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_RequestOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{80}
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_OneOnOneChatRequested_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid    *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	SteamidPartner *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) Reset() {
	*x = CVoiceChat_OneOnOneChatRequested_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_OneOnOneChatRequested_Notification) ProtoMessage() {}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_OneOnOneChatRequested_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_OneOnOneChatRequested_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{81}
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_AnswerOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid     *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	SteamidPartner  *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	AcceptedRequest *bool   `protobuf:"varint,3,opt,name=accepted_request,json=acceptedRequest" json:"accepted_request,omitempty"`
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_AnswerOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AnswerOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AnswerOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AnswerOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{82}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetAcceptedRequest() bool {
	if x != nil && x.AcceptedRequest != nil {
		return *x.AcceptedRequest
	}
	return false
}

type CVoiceChat_AnswerOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_AnswerOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AnswerOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AnswerOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AnswerOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{83}
}

type CVoiceChat_OneOnOneChatRequestResponse_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoicechatId     *uint64 `protobuf:"fixed64,1,opt,name=voicechat_id,json=voicechatId" json:"voicechat_id,omitempty"`
	SteamidPartner  *uint64 `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	AcceptedRequest *bool   `protobuf:"varint,3,opt,name=accepted_request,json=acceptedRequest" json:"accepted_request,omitempty"`
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) Reset() {
	*x = CVoiceChat_OneOnOneChatRequestResponse_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_OneOnOneChatRequestResponse_Notification) ProtoMessage() {}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_OneOnOneChatRequestResponse_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_OneOnOneChatRequestResponse_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{84}
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetVoicechatId() uint64 {
	if x != nil && x.VoicechatId != nil {
		return *x.VoicechatId
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetAcceptedRequest() bool {
	if x != nil && x.AcceptedRequest != nil {
		return *x.AcceptedRequest
	}
	return false
}

type CVoiceChat_EndOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
}

func (x *CVoiceChat_EndOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_EndOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_EndOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_EndOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_EndOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_EndOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_EndOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{85}
}

func (x *CVoiceChat_EndOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_EndOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_EndOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_EndOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_EndOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_EndOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_EndOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_EndOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_EndOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{86}
}

type CVoiceChat_LeaveOneOnOneChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	VoiceChatid    *uint64 `protobuf:"fixed64,2,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_LeaveOneOnOneChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{87}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_LeaveOneOnOneChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_LeaveOneOnOneChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{88}
}

type CVoiceChat_UserJoinedVoiceChat_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid           *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Chatid                *uint64 `protobuf:"varint,3,opt,name=chatid" json:"chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,4,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,5,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,6,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserSessionid         *uint32 `protobuf:"varint,7,opt,name=user_sessionid,json=userSessionid" json:"user_sessionid,omitempty"`
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) Reset() {
	*x = CVoiceChat_UserJoinedVoiceChat_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserJoinedVoiceChat_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserJoinedVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserJoinedVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{89}
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetUserSessionid() uint32 {
	if x != nil && x.UserSessionid != nil {
		return *x.UserSessionid
	}
	return 0
}

type CVoiceChat_UserVoiceStatus_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid            *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid            *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	UserMutedMicLocally    *bool   `protobuf:"varint,3,opt,name=user_muted_mic_locally,json=userMutedMicLocally" json:"user_muted_mic_locally,omitempty"`
	UserMutedOutputLocally *bool   `protobuf:"varint,4,opt,name=user_muted_output_locally,json=userMutedOutputLocally" json:"user_muted_output_locally,omitempty"`
	UserHasNoMicForSession *bool   `protobuf:"varint,5,opt,name=user_has_no_mic_for_session,json=userHasNoMicForSession" json:"user_has_no_mic_for_session,omitempty"`
	UserWebaudioSampleRate *int32  `protobuf:"varint,6,opt,name=user_webaudio_sample_rate,json=userWebaudioSampleRate" json:"user_webaudio_sample_rate,omitempty"`
}

func (x *CVoiceChat_UserVoiceStatus_Notification) Reset() {
	*x = CVoiceChat_UserVoiceStatus_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserVoiceStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserVoiceStatus_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserVoiceStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserVoiceStatus_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserVoiceStatus_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{90}
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserMutedMicLocally() bool {
	if x != nil && x.UserMutedMicLocally != nil {
		return *x.UserMutedMicLocally
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserMutedOutputLocally() bool {
	if x != nil && x.UserMutedOutputLocally != nil {
		return *x.UserMutedOutputLocally
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserHasNoMicForSession() bool {
	if x != nil && x.UserHasNoMicForSession != nil {
		return *x.UserHasNoMicForSession
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserWebaudioSampleRate() int32 {
	if x != nil && x.UserWebaudioSampleRate != nil {
		return *x.UserWebaudioSampleRate
	}
	return 0
}

type CVoiceChat_AllMembersStatus_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64                                    `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	Users       []*CVoiceChat_UserVoiceStatus_Notification `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (x *CVoiceChat_AllMembersStatus_Notification) Reset() {
	*x = CVoiceChat_AllMembersStatus_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_AllMembersStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AllMembersStatus_Notification) ProtoMessage() {}

func (x *CVoiceChat_AllMembersStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AllMembersStatus_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AllMembersStatus_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{91}
}

func (x *CVoiceChat_AllMembersStatus_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_AllMembersStatus_Notification) GetUsers() []*CVoiceChat_UserVoiceStatus_Notification {
	if x != nil {
		return x.Users
	}
	return nil
}

type CVoiceChat_UpdateVoiceChatWebRTCData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid             *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	IpWebrtcServer          *uint32 `protobuf:"varint,2,opt,name=ip_webrtc_server,json=ipWebrtcServer" json:"ip_webrtc_server,omitempty"`
	PortWebrtcServer        *uint32 `protobuf:"varint,3,opt,name=port_webrtc_server,json=portWebrtcServer" json:"port_webrtc_server,omitempty"`
	IpWebrtcClient          *uint32 `protobuf:"varint,4,opt,name=ip_webrtc_client,json=ipWebrtcClient" json:"ip_webrtc_client,omitempty"`
	PortWebrtcClient        *uint32 `protobuf:"varint,5,opt,name=port_webrtc_client,json=portWebrtcClient" json:"port_webrtc_client,omitempty"`
	SsrcMySendingStream     *uint32 `protobuf:"varint,6,opt,name=ssrc_my_sending_stream,json=ssrcMySendingStream" json:"ssrc_my_sending_stream,omitempty"`
	UserAgent               *string `protobuf:"bytes,7,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	HasAudioWorkletsSupport *bool   `protobuf:"varint,8,opt,name=has_audio_worklets_support,json=hasAudioWorkletsSupport" json:"has_audio_worklets_support,omitempty"`
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) Reset() {
	*x = CVoiceChat_UpdateVoiceChatWebRTCData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateVoiceChatWebRTCData_Request) ProtoMessage() {}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateVoiceChatWebRTCData_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateVoiceChatWebRTCData_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{92}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetIpWebrtcServer() uint32 {
	if x != nil && x.IpWebrtcServer != nil {
		return *x.IpWebrtcServer
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetPortWebrtcServer() uint32 {
	if x != nil && x.PortWebrtcServer != nil {
		return *x.PortWebrtcServer
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetIpWebrtcClient() uint32 {
	if x != nil && x.IpWebrtcClient != nil {
		return *x.IpWebrtcClient
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetPortWebrtcClient() uint32 {
	if x != nil && x.PortWebrtcClient != nil {
		return *x.PortWebrtcClient
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetSsrcMySendingStream() uint32 {
	if x != nil && x.SsrcMySendingStream != nil {
		return *x.SsrcMySendingStream
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetHasAudioWorkletsSupport() bool {
	if x != nil && x.HasAudioWorkletsSupport != nil {
		return *x.HasAudioWorkletsSupport
	}
	return false
}

type CVoiceChat_UpdateVoiceChatWebRTCData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendClientVoiceLogs *bool `protobuf:"varint,1,opt,name=send_client_voice_logs,json=sendClientVoiceLogs" json:"send_client_voice_logs,omitempty"`
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) Reset() {
	*x = CVoiceChat_UpdateVoiceChatWebRTCData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateVoiceChatWebRTCData_Response) ProtoMessage() {}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateVoiceChatWebRTCData_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateVoiceChatWebRTCData_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{93}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) GetSendClientVoiceLogs() bool {
	if x != nil && x.SendClientVoiceLogs != nil {
		return *x.SendClientVoiceLogs
	}
	return false
}

type CVoiceChat_UploadClientVoiceChatLogs_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid             *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	ClientVoiceLogsNewLines *string `protobuf:"bytes,2,opt,name=client_voice_logs_new_lines,json=clientVoiceLogsNewLines" json:"client_voice_logs_new_lines,omitempty"`
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) Reset() {
	*x = CVoiceChat_UploadClientVoiceChatLogs_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UploadClientVoiceChatLogs_Request) ProtoMessage() {}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UploadClientVoiceChatLogs_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UploadClientVoiceChatLogs_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{94}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) GetClientVoiceLogsNewLines() string {
	if x != nil && x.ClientVoiceLogsNewLines != nil {
		return *x.ClientVoiceLogsNewLines
	}
	return ""
}

type CVoiceChat_UploadClientVoiceChatLogs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) Reset() {
	*x = CVoiceChat_UploadClientVoiceChatLogs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UploadClientVoiceChatLogs_Response) ProtoMessage() {}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UploadClientVoiceChatLogs_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UploadClientVoiceChatLogs_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{95}
}

type CVoiceChat_LeaveVoiceChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CVoiceChat_LeaveVoiceChat_Request) Reset() {
	*x = CVoiceChat_LeaveVoiceChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveVoiceChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveVoiceChat_Request) ProtoMessage() {}

func (x *CVoiceChat_LeaveVoiceChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveVoiceChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveVoiceChat_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{96}
}

func (x *CVoiceChat_LeaveVoiceChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_LeaveVoiceChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CVoiceChat_LeaveVoiceChat_Response) Reset() {
	*x = CVoiceChat_LeaveVoiceChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_LeaveVoiceChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveVoiceChat_Response) ProtoMessage() {}

func (x *CVoiceChat_LeaveVoiceChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveVoiceChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveVoiceChat_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{97}
}

type CVoiceChat_UserLeftVoiceChat_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid           *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Chatid                *uint64 `protobuf:"varint,3,opt,name=chatid" json:"chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,4,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,5,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,6,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserSessionid         *uint32 `protobuf:"varint,7,opt,name=user_sessionid,json=userSessionid" json:"user_sessionid,omitempty"`
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) Reset() {
	*x = CVoiceChat_UserLeftVoiceChat_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserLeftVoiceChat_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserLeftVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserLeftVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{98}
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetUserSessionid() uint32 {
	if x != nil && x.UserSessionid != nil {
		return *x.UserSessionid
	}
	return 0
}

type CVoiceChat_VoiceChatEnded_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid           *uint64 `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	OneOnOneSteamidLower  *uint64 `protobuf:"fixed64,2,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64 `protobuf:"fixed64,3,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	Chatid                *uint64 `protobuf:"varint,4,opt,name=chatid" json:"chatid,omitempty"`
	ChatGroupId           *uint64 `protobuf:"varint,5,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CVoiceChat_VoiceChatEnded_Notification) Reset() {
	*x = CVoiceChat_VoiceChatEnded_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVoiceChat_VoiceChatEnded_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_VoiceChatEnded_Notification) ProtoMessage() {}

func (x *CVoiceChat_VoiceChatEnded_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_VoiceChatEnded_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_VoiceChatEnded_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{99}
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CWebRTCClient_InitiateWebRTCConnection_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp *string `protobuf:"bytes,1,opt,name=sdp" json:"sdp,omitempty"`
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) Reset() {
	*x = CWebRTCClient_InitiateWebRTCConnection_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_InitiateWebRTCConnection_Request) ProtoMessage() {}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_InitiateWebRTCConnection_Request.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_InitiateWebRTCConnection_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{100}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) GetSdp() string {
	if x != nil && x.Sdp != nil {
		return *x.Sdp
	}
	return ""
}

type CWebRTCClient_InitiateWebRTCConnection_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDescription *string `protobuf:"bytes,1,opt,name=remote_description,json=remoteDescription" json:"remote_description,omitempty"`
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) Reset() {
	*x = CWebRTCClient_InitiateWebRTCConnection_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_InitiateWebRTCConnection_Response) ProtoMessage() {}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_InitiateWebRTCConnection_Response.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_InitiateWebRTCConnection_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{101}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) GetRemoteDescription() string {
	if x != nil && x.RemoteDescription != nil {
		return *x.RemoteDescription
	}
	return ""
}

type CWebRTC_WebRTCSessionConnected_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssrc       *uint32 `protobuf:"varint,1,opt,name=ssrc" json:"ssrc,omitempty"`
	ClientIp   *uint32 `protobuf:"varint,2,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ClientPort *uint32 `protobuf:"varint,3,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerIp   *uint32 `protobuf:"varint,4,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort *uint32 `protobuf:"varint,5,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) Reset() {
	*x = CWebRTC_WebRTCSessionConnected_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCSessionConnected_Notification) ProtoMessage() {}

func (x *CWebRTC_WebRTCSessionConnected_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCSessionConnected_Notification.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCSessionConnected_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{102}
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetSsrc() uint32 {
	if x != nil && x.Ssrc != nil {
		return *x.Ssrc
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetClientIp() uint32 {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

type CWebRTC_WebRTCUpdateRemoteDescription_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDescription        *string                                                                       `protobuf:"bytes,1,opt,name=remote_description,json=remoteDescription" json:"remote_description,omitempty"`
	RemoteDescriptionVersion *uint64                                                                       `protobuf:"varint,2,opt,name=remote_description_version,json=remoteDescriptionVersion" json:"remote_description_version,omitempty"`
	SsrcsToAccountids        []*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping `protobuf:"bytes,3,rep,name=ssrcs_to_accountids,json=ssrcsToAccountids" json:"ssrcs_to_accountids,omitempty"`
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) Reset() {
	*x = CWebRTC_WebRTCUpdateRemoteDescription_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification) ProtoMessage() {}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCUpdateRemoteDescription_Notification.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{103}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetRemoteDescription() string {
	if x != nil && x.RemoteDescription != nil {
		return *x.RemoteDescription
	}
	return ""
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetRemoteDescriptionVersion() uint64 {
	if x != nil && x.RemoteDescriptionVersion != nil {
		return *x.RemoteDescriptionVersion
	}
	return 0
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetSsrcsToAccountids() []*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping {
	if x != nil {
		return x.SsrcsToAccountids
	}
	return nil
}

type CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssrc      *uint32 `protobuf:"varint,1,opt,name=ssrc" json:"ssrc,omitempty"`
	Accountid *uint32 `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) Reset() {
	*x = CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) ProtoMessage() {}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{104}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) GetSsrc() uint32 {
	if x != nil && x.Ssrc != nil {
		return *x.Ssrc
	}
	return 0
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpWebrtcServer           *uint32 `protobuf:"varint,1,opt,name=ip_webrtc_server,json=ipWebrtcServer" json:"ip_webrtc_server,omitempty"`
	PortWebrtcServer         *uint32 `protobuf:"varint,2,opt,name=port_webrtc_server,json=portWebrtcServer" json:"port_webrtc_server,omitempty"`
	IpWebrtcSessionClient    *uint32 `protobuf:"varint,3,opt,name=ip_webrtc_session_client,json=ipWebrtcSessionClient" json:"ip_webrtc_session_client,omitempty"`
	PortWebrtcSessionClient  *uint32 `protobuf:"varint,4,opt,name=port_webrtc_session_client,json=portWebrtcSessionClient" json:"port_webrtc_session_client,omitempty"`
	RemoteDescriptionVersion *uint64 `protobuf:"varint,5,opt,name=remote_description_version,json=remoteDescriptionVersion" json:"remote_description_version,omitempty"`
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) Reset() {
	*x = CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) ProtoMessage() {}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{105}
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetIpWebrtcServer() uint32 {
	if x != nil && x.IpWebrtcServer != nil {
		return *x.IpWebrtcServer
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetPortWebrtcServer() uint32 {
	if x != nil && x.PortWebrtcServer != nil {
		return *x.PortWebrtcServer
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetIpWebrtcSessionClient() uint32 {
	if x != nil && x.IpWebrtcSessionClient != nil {
		return *x.IpWebrtcSessionClient
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetPortWebrtcSessionClient() uint32 {
	if x != nil && x.PortWebrtcSessionClient != nil {
		return *x.PortWebrtcSessionClient
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetRemoteDescriptionVersion() uint64 {
	if x != nil && x.RemoteDescriptionVersion != nil {
		return *x.RemoteDescriptionVersion
	}
	return 0
}

type CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) Reset() {
	*x = CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) ProtoMessage() {}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{106}
}

type CMobilePerAccount_GetSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMobilePerAccount_GetSettings_Request) Reset() {
	*x = CMobilePerAccount_GetSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMobilePerAccount_GetSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMobilePerAccount_GetSettings_Request) ProtoMessage() {}

func (x *CMobilePerAccount_GetSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMobilePerAccount_GetSettings_Request.ProtoReflect.Descriptor instead.
func (*CMobilePerAccount_GetSettings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{107}
}

type CMobilePerAccount_GetSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasSettings           *bool   `protobuf:"varint,4,opt,name=has_settings,json=hasSettings" json:"has_settings,omitempty"`
	AllowSalePush         *bool   `protobuf:"varint,2,opt,name=allow_sale_push,json=allowSalePush" json:"allow_sale_push,omitempty"`
	AllowWishlistPush     *bool   `protobuf:"varint,3,opt,name=allow_wishlist_push,json=allowWishlistPush" json:"allow_wishlist_push,omitempty"`
	ChatNotificationLevel *uint32 `protobuf:"varint,5,opt,name=chat_notification_level,json=chatNotificationLevel" json:"chat_notification_level,omitempty"`
	NotifyDirectChat      *bool   `protobuf:"varint,6,opt,name=notify_direct_chat,json=notifyDirectChat" json:"notify_direct_chat,omitempty"`
	NotifyGroupChat       *bool   `protobuf:"varint,7,opt,name=notify_group_chat,json=notifyGroupChat" json:"notify_group_chat,omitempty"`
	AllowEventPush        *bool   `protobuf:"varint,8,opt,name=allow_event_push,json=allowEventPush,def=1" json:"allow_event_push,omitempty"`
}

// Default values for CMobilePerAccount_GetSettings_Response fields.
const (
	Default_CMobilePerAccount_GetSettings_Response_AllowEventPush = bool(true)
)

func (x *CMobilePerAccount_GetSettings_Response) Reset() {
	*x = CMobilePerAccount_GetSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMobilePerAccount_GetSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMobilePerAccount_GetSettings_Response) ProtoMessage() {}

func (x *CMobilePerAccount_GetSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMobilePerAccount_GetSettings_Response.ProtoReflect.Descriptor instead.
func (*CMobilePerAccount_GetSettings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{108}
}

func (x *CMobilePerAccount_GetSettings_Response) GetHasSettings() bool {
	if x != nil && x.HasSettings != nil {
		return *x.HasSettings
	}
	return false
}

func (x *CMobilePerAccount_GetSettings_Response) GetAllowSalePush() bool {
	if x != nil && x.AllowSalePush != nil {
		return *x.AllowSalePush
	}
	return false
}

func (x *CMobilePerAccount_GetSettings_Response) GetAllowWishlistPush() bool {
	if x != nil && x.AllowWishlistPush != nil {
		return *x.AllowWishlistPush
	}
	return false
}

func (x *CMobilePerAccount_GetSettings_Response) GetChatNotificationLevel() uint32 {
	if x != nil && x.ChatNotificationLevel != nil {
		return *x.ChatNotificationLevel
	}
	return 0
}

func (x *CMobilePerAccount_GetSettings_Response) GetNotifyDirectChat() bool {
	if x != nil && x.NotifyDirectChat != nil {
		return *x.NotifyDirectChat
	}
	return false
}

func (x *CMobilePerAccount_GetSettings_Response) GetNotifyGroupChat() bool {
	if x != nil && x.NotifyGroupChat != nil {
		return *x.NotifyGroupChat
	}
	return false
}

func (x *CMobilePerAccount_GetSettings_Response) GetAllowEventPush() bool {
	if x != nil && x.AllowEventPush != nil {
		return *x.AllowEventPush
	}
	return Default_CMobilePerAccount_GetSettings_Response_AllowEventPush
}

type CMobilePerAccount_SetSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowSalePush         *bool   `protobuf:"varint,2,opt,name=allow_sale_push,json=allowSalePush" json:"allow_sale_push,omitempty"`
	AllowWishlistPush     *bool   `protobuf:"varint,3,opt,name=allow_wishlist_push,json=allowWishlistPush" json:"allow_wishlist_push,omitempty"`
	ChatNotificationLevel *uint32 `protobuf:"varint,4,opt,name=chat_notification_level,json=chatNotificationLevel" json:"chat_notification_level,omitempty"`
	NotifyDirectChat      *bool   `protobuf:"varint,5,opt,name=notify_direct_chat,json=notifyDirectChat" json:"notify_direct_chat,omitempty"`
	NotifyGroupChat       *bool   `protobuf:"varint,6,opt,name=notify_group_chat,json=notifyGroupChat" json:"notify_group_chat,omitempty"`
	AllowEventPush        *bool   `protobuf:"varint,7,opt,name=allow_event_push,json=allowEventPush,def=1" json:"allow_event_push,omitempty"`
}

// Default values for CMobilePerAccount_SetSettings_Request fields.
const (
	Default_CMobilePerAccount_SetSettings_Request_AllowEventPush = bool(true)
)

func (x *CMobilePerAccount_SetSettings_Request) Reset() {
	*x = CMobilePerAccount_SetSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMobilePerAccount_SetSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMobilePerAccount_SetSettings_Request) ProtoMessage() {}

func (x *CMobilePerAccount_SetSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMobilePerAccount_SetSettings_Request.ProtoReflect.Descriptor instead.
func (*CMobilePerAccount_SetSettings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{109}
}

func (x *CMobilePerAccount_SetSettings_Request) GetAllowSalePush() bool {
	if x != nil && x.AllowSalePush != nil {
		return *x.AllowSalePush
	}
	return false
}

func (x *CMobilePerAccount_SetSettings_Request) GetAllowWishlistPush() bool {
	if x != nil && x.AllowWishlistPush != nil {
		return *x.AllowWishlistPush
	}
	return false
}

func (x *CMobilePerAccount_SetSettings_Request) GetChatNotificationLevel() uint32 {
	if x != nil && x.ChatNotificationLevel != nil {
		return *x.ChatNotificationLevel
	}
	return 0
}

func (x *CMobilePerAccount_SetSettings_Request) GetNotifyDirectChat() bool {
	if x != nil && x.NotifyDirectChat != nil {
		return *x.NotifyDirectChat
	}
	return false
}

func (x *CMobilePerAccount_SetSettings_Request) GetNotifyGroupChat() bool {
	if x != nil && x.NotifyGroupChat != nil {
		return *x.NotifyGroupChat
	}
	return false
}

func (x *CMobilePerAccount_SetSettings_Request) GetAllowEventPush() bool {
	if x != nil && x.AllowEventPush != nil {
		return *x.AllowEventPush
	}
	return Default_CMobilePerAccount_SetSettings_Request_AllowEventPush
}

type CMobilePerAccount_SetSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMobilePerAccount_SetSettings_Response) Reset() {
	*x = CMobilePerAccount_SetSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMobilePerAccount_SetSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMobilePerAccount_SetSettings_Response) ProtoMessage() {}

func (x *CMobilePerAccount_SetSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMobilePerAccount_SetSettings_Response.ProtoReflect.Descriptor instead.
func (*CMobilePerAccount_SetSettings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{110}
}

type CMobileDevice_RegisterMobileDevice_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceid                  *string `protobuf:"bytes,1,opt,name=deviceid" json:"deviceid,omitempty"`
	Language                  *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	PushEnabled               *bool   `protobuf:"varint,3,opt,name=push_enabled,json=pushEnabled" json:"push_enabled,omitempty"`
	AppVersion                *string `protobuf:"bytes,4,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	OsVersion                 *string `protobuf:"bytes,5,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	DeviceModel               *string `protobuf:"bytes,6,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	TwofactorDeviceIdentifier *string `protobuf:"bytes,7,opt,name=twofactor_device_identifier,json=twofactorDeviceIdentifier" json:"twofactor_device_identifier,omitempty"`
	MobileApp                 *int32  `protobuf:"varint,8,opt,name=mobile_app,json=mobileApp" json:"mobile_app,omitempty"`
}

func (x *CMobileDevice_RegisterMobileDevice_Request) Reset() {
	*x = CMobileDevice_RegisterMobileDevice_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMobileDevice_RegisterMobileDevice_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMobileDevice_RegisterMobileDevice_Request) ProtoMessage() {}

func (x *CMobileDevice_RegisterMobileDevice_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMobileDevice_RegisterMobileDevice_Request.ProtoReflect.Descriptor instead.
func (*CMobileDevice_RegisterMobileDevice_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{111}
}

func (x *CMobileDevice_RegisterMobileDevice_Request) GetDeviceid() string {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return ""
}

func (x *CMobileDevice_RegisterMobileDevice_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CMobileDevice_RegisterMobileDevice_Request) GetPushEnabled() bool {
	if x != nil && x.PushEnabled != nil {
		return *x.PushEnabled
	}
	return false
}

func (x *CMobileDevice_RegisterMobileDevice_Request) GetAppVersion() string {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return ""
}

func (x *CMobileDevice_RegisterMobileDevice_Request) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *CMobileDevice_RegisterMobileDevice_Request) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *CMobileDevice_RegisterMobileDevice_Request) GetTwofactorDeviceIdentifier() string {
	if x != nil && x.TwofactorDeviceIdentifier != nil {
		return *x.TwofactorDeviceIdentifier
	}
	return ""
}

func (x *CMobileDevice_RegisterMobileDevice_Request) GetMobileApp() int32 {
	if x != nil && x.MobileApp != nil {
		return *x.MobileApp
	}
	return 0
}

type CMobileDevice_RegisterMobileDevice_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueDeviceid *uint32 `protobuf:"varint,2,opt,name=unique_deviceid,json=uniqueDeviceid" json:"unique_deviceid,omitempty"`
}

func (x *CMobileDevice_RegisterMobileDevice_Response) Reset() {
	*x = CMobileDevice_RegisterMobileDevice_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMobileDevice_RegisterMobileDevice_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMobileDevice_RegisterMobileDevice_Response) ProtoMessage() {}

func (x *CMobileDevice_RegisterMobileDevice_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMobileDevice_RegisterMobileDevice_Response.ProtoReflect.Descriptor instead.
func (*CMobileDevice_RegisterMobileDevice_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{112}
}

func (x *CMobileDevice_RegisterMobileDevice_Response) GetUniqueDeviceid() uint32 {
	if x != nil && x.UniqueDeviceid != nil {
		return *x.UniqueDeviceid
	}
	return 0
}

type CMobileDevice_DeregisterMobileDevice_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceid *string `protobuf:"bytes,1,opt,name=deviceid" json:"deviceid,omitempty"`
}

func (x *CMobileDevice_DeregisterMobileDevice_Notification) Reset() {
	*x = CMobileDevice_DeregisterMobileDevice_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMobileDevice_DeregisterMobileDevice_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMobileDevice_DeregisterMobileDevice_Notification) ProtoMessage() {}

func (x *CMobileDevice_DeregisterMobileDevice_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMobileDevice_DeregisterMobileDevice_Notification.ProtoReflect.Descriptor instead.
func (*CMobileDevice_DeregisterMobileDevice_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{113}
}

func (x *CMobileDevice_DeregisterMobileDevice_Notification) GetDeviceid() string {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return ""
}

type UnknownProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnknownProto) Reset() {
	*x = UnknownProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_webui_friends_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownProto) ProtoMessage() {}

func (x *UnknownProto) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_webui_friends_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownProto.ProtoReflect.Descriptor instead.
func (*UnknownProto) Descriptor() ([]byte, []int) {
	return file_steammessages_webui_friends_proto_rawDescGZIP(), []int{114}
}

var File_steammessages_webui_friends_proto protoreflect.FileDescriptor

var file_steammessages_webui_friends_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x77, 0x65, 0x62, 0x75, 0x69, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x31, 0x43, 0x48,
	0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x32, 0x43, 0x48,
	0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x7d, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5b, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x41, 0x70, 0x70, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22,
	0x8c, 0x01, 0x0a, 0x33, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x22, 0x50,
	0x0a, 0x1a, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x48, 0x0a, 0x1b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x43, 0x44, 0x44, 0x42, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0x65, 0x0a, 0x31, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52,
	0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x32, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x5e,
	0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x64,
	0x0a, 0x38, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x3c, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x51, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x23, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x67, 0x69, 0x64,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x65,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x12, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x09,
	0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x09, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x22, 0xbf, 0x04, 0x0a, 0x24, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3e, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x70,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x55, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x26, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x69, 0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x67, 0x69,
	0x64, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x27, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x2a,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x2d, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa0, 0x02, 0x0a, 0x24, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x74, 0x65, 0x55, 0x70, 0x12, 0x35, 0x0a,
	0x16, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x25, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f,
	0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68,
	0x61, 0x73, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x2a, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x69, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x67, 0x69, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x75,
	0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x27, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x6f, 0x74,
	0x65, 0x55, 0x70, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5b, 0x0a, 0x31, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x32,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x55, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x40, 0x0a, 0x0c,
	0x43, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0xdf,
	0x03, 0x0a, 0x2a, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x33, 0x32, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x32, 0x82, 0xb5, 0x18, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x3b, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x45, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x22, 0x60, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x27, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x62, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x6f, 0x67, 0x12, 0x3e, 0x0a, 0x1c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22, 0xa5, 0x02, 0x0a,
	0x1d, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x47, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x15, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x13, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x64, 0x0a, 0x28, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x36, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x37, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x67, 0x0a, 0x23, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x36, 0x0a, 0x34, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x7d, 0x0a, 0x35, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x4e, 0x0a, 0x36, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22,
	0x39, 0x0a, 0x37, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x2e, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x22, 0x31, 0x0a, 0x2f, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x31, 0x0a,
	0x2f, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73,
	0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8b, 0x01, 0x0a, 0x2b, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x95,
	0x02, 0x0a, 0x3f, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x65, 0x6e, 0x75, 0x6d, 0x3b, 0x20, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x45, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x2a, 0x43, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x43, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x35, 0x43, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3a, 0x82, 0xb5, 0x18, 0x36, 0x65, 0x6e, 0x75,
	0x6d, 0x3b, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x20, 0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x14, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x5c, 0x0a, 0x23, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x75, 0x0a, 0x19, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x61, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x22, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x21, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x66, 0x0a, 0x2a, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x60, 0x0a, 0x24, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x81, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x40, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02,
	0x35, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x31, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xa1, 0x01, 0x0a, 0x41, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x12, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x01,
	0x30, 0x52, 0x11, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x22, 0x66, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x43, 0x4d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a,
	0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7f, 0x0a,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe4,
	0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x33, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x22, 0xd3, 0x01, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xda, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x43, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x67, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x6b, 0x0a,
	0x3d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x1e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x30, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x31, 0x33, 0x52,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xcc, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32,
	0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xd6, 0x01, 0x0a, 0x36, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x67,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x6d, 0x79, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x09, 0x67,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x73, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x73, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x09, 0x67,
	0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x76, 0x67, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x76, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x73,
	0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x5f, 0x78, 0x31,
	0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x50,
	0x69, 0x6e, 0x67, 0x4d, 0x73, 0x58, 0x31, 0x30, 0x22, 0x55, 0x0a, 0x21, 0x43, 0x43, 0x6c, 0x61,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22,
	0x24, 0x0a, 0x22, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x54, 0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x26, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x6e,
	0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x27, 0x43, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e,
	0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x2d, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x25, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x33, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e,
	0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a,
	0x22, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x4f,
	0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x25, 0x0a, 0x23,
	0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x4f, 0x6e,
	0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x24, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e,
	0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc8, 0x02, 0x0a, 0x2b, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x4f, 0x6e,
	0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x27,
	0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x3b, 0x0a,
	0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x6d, 0x69, 0x63,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x4e, 0x6f, 0x4d, 0x69, 0x63,
	0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x28, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x2c, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f,
	0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x73, 0x72,
	0x63, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x73, 0x72, 0x63, 0x4d,
	0x79, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x1a, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x65, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x65, 0x74, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x64, 0x0a, 0x2d, 0x43, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x22, 0x8f, 0x01, 0x0a, 0x2c, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x21, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x43,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc6, 0x02, 0x0a, 0x29, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x14, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f,
	0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x26, 0x43,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x4f,
	0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x60, 0x0a, 0x2f, 0x43, 0x57,
	0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a,
	0x2b, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x73, 0x72, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x9e, 0x02, 0x0a,
	0x32, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x7b, 0x0a, 0x13, 0x73, 0x73, 0x72, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x43, 0x53, 0x53, 0x52, 0x43, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x73, 0x73, 0x72, 0x63,
	0x73, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x22, 0x7e, 0x0a,
	0x4a, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x53, 0x53, 0x52, 0x43, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x73, 0x72, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0xc7, 0x02,
	0x0a, 0x39, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x70, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x70, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x3a, 0x43, 0x57, 0x65, 0x62, 0x52,
	0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe5,
	0x02, 0x0a, 0x26, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x61, 0x6c, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x69,
	0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x75, 0x73, 0x68, 0x22, 0xc1, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x61, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x73, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x61, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x73, 0x68, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x2a, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x77, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x77, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x3b,
	0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x20, 0x45, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x09, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x22, 0x56, 0x0a, 0x2b, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x22, 0x4f,
	0x0a, 0x31, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x22,
	0x0e, 0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0x97, 0x01, 0x0a, 0x0f, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x12, 0x32, 0x2e, 0x43, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9e, 0x10, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x73, 0x12, 0x1b, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x24, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x27, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x2b, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x25, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x2b, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x77, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x2f, 0x2e, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a,
	0x1b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x2f, 0x2e, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x73, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x35, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x55, 0x0a, 0x11, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x22, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xfa, 0x02, 0x0a, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x23, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x61,
	0x0a, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2b, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x66, 0x0a, 0x04, 0x43, 0x6c, 0x61, 0x6e, 0x12, 0x5e, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x22, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x54, 0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc1, 0x06, 0x0a, 0x09, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x43,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x12, 0x2d, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x22, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x27, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e,
	0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x26, 0x2e, 0x43, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e,
	0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x45,
	0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x23,
	0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x4f,
	0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x45, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x25,
	0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xed, 0x04,
	0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x56, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2c,
	0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x2a, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x19, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5a, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x2e, 0x2e, 0x43, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65,
	0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1a,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x2e, 0x43, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xae, 0x02,
	0x0a, 0x0c, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x7d,
	0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x43, 0x57, 0x65,
	0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x57,
	0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01,
	0x0a, 0x23, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdf,
	0x01, 0x0a, 0x19, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x1c,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x43,
	0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x23, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x2e, 0x43, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xd2, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdc, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b,
	0x2e, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x44, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x43, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x73, 0x74, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x90, 0x01, 0x01,
}

var (
	file_steammessages_webui_friends_proto_rawDescOnce sync.Once
	file_steammessages_webui_friends_proto_rawDescData = file_steammessages_webui_friends_proto_rawDesc
)

func file_steammessages_webui_friends_proto_rawDescGZIP() []byte {
	file_steammessages_webui_friends_proto_rawDescOnce.Do(func() {
		file_steammessages_webui_friends_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_webui_friends_proto_rawDescData)
	})
	return file_steammessages_webui_friends_proto_rawDescData
}

var file_steammessages_webui_friends_proto_msgTypes = make([]protoimpl.MessageInfo, 115)
var file_steammessages_webui_friends_proto_goTypes = []interface{}{
	(*CHelpRequestLogs_UploadUserApplicationLog_Request)(nil),                          // 0: CHelpRequestLogs_UploadUserApplicationLog_Request
	(*CHelpRequestLogs_UploadUserApplicationLog_Response)(nil),                         // 1: CHelpRequestLogs_UploadUserApplicationLog_Response
	(*CMsgClientAppMinutesPlayedData)(nil),                                             // 2: CMsgClientAppMinutesPlayedData
	(*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData)(nil),                        // 3: CMsgClientAppMinutesPlayedData_AppMinutesPlayedData
	(*CCommunity_GetApps_Request)(nil),                                                 // 4: CCommunity_GetApps_Request
	(*CCommunity_GetApps_Response)(nil),                                                // 5: CCommunity_GetApps_Response
	(*CCommunity_GetAppRichPresenceLocalization_Request)(nil),                          // 6: CCommunity_GetAppRichPresenceLocalization_Request
	(*CCommunity_GetAppRichPresenceLocalization_Response)(nil),                         // 7: CCommunity_GetAppRichPresenceLocalization_Response
	(*CCommunity_GetAppRichPresenceLocalization_Response_Token)(nil),                   // 8: CCommunity_GetAppRichPresenceLocalization_Response_Token
	(*CCommunity_GetAppRichPresenceLocalization_Response_TokenList)(nil),               // 9: CCommunity_GetAppRichPresenceLocalization_Response_TokenList
	(*CCommunity_GetCommentThread_Request)(nil),                                        // 10: CCommunity_GetCommentThread_Request
	(*CCommunity_Comment)(nil),                                                         // 11: CCommunity_Comment
	(*CCommunity_GetCommentThread_Response)(nil),                                       // 12: CCommunity_GetCommentThread_Response
	(*CCommunity_PostCommentToThread_Request)(nil),                                     // 13: CCommunity_PostCommentToThread_Request
	(*CCommunity_PostCommentToThread_Response)(nil),                                    // 14: CCommunity_PostCommentToThread_Response
	(*CCommunity_DeleteCommentFromThread_Request)(nil),                                 // 15: CCommunity_DeleteCommentFromThread_Request
	(*CCommunity_DeleteCommentFromThread_Response)(nil),                                // 16: CCommunity_DeleteCommentFromThread_Response
	(*CCommunity_RateCommentThread_Request)(nil),                                       // 17: CCommunity_RateCommentThread_Request
	(*CCommunity_RateCommentThread_Response)(nil),                                      // 18: CCommunity_RateCommentThread_Response
	(*CCommunity_GetCommentThreadRatings_Request)(nil),                                 // 19: CCommunity_GetCommentThreadRatings_Request
	(*CCommunity_GetCommentThreadRatings_Response)(nil),                                // 20: CCommunity_GetCommentThreadRatings_Response
	(*CCommunity_RateClanAnnouncement_Request)(nil),                                    // 21: CCommunity_RateClanAnnouncement_Request
	(*CCommunity_RateClanAnnouncement_Response)(nil),                                   // 22: CCommunity_RateClanAnnouncement_Response
	(*CCommunity_GetClanAnnouncementVoteForUser_Request)(nil),                          // 23: CCommunity_GetClanAnnouncementVoteForUser_Request
	(*CCommunity_GetClanAnnouncementVoteForUser_Response)(nil),                         // 24: CCommunity_GetClanAnnouncementVoteForUser_Response
	(*CAppPriority)(nil),                                                               // 25: CAppPriority
	(*CCommunity_GetUserPartnerEventNews_Request)(nil),                                 // 26: CCommunity_GetUserPartnerEventNews_Request
	(*CCommunity_GetUserPartnerEventNews_Response)(nil),                                // 27: CCommunity_GetUserPartnerEventNews_Response
	(*CCommunity_GetBestEventsForUser_Request)(nil),                                    // 28: CCommunity_GetBestEventsForUser_Request
	(*CCommunity_PartnerEventResult)(nil),                                              // 29: CCommunity_PartnerEventResult
	(*CCommunity_GetBestEventsForUser_Response)(nil),                                   // 30: CCommunity_GetBestEventsForUser_Response
	(*CCommunity_ClearUserPartnerEventsAppPriorities_Request)(nil),                     // 31: CCommunity_ClearUserPartnerEventsAppPriorities_Request
	(*CCommunity_ClearUserPartnerEventsAppPriorities_Response)(nil),                    // 32: CCommunity_ClearUserPartnerEventsAppPriorities_Response
	(*CCommunity_PartnerEventsAppPriority)(nil),                                        // 33: CCommunity_PartnerEventsAppPriority
	(*CCommunity_GetUserPartnerEventsAppPriorities_Request)(nil),                       // 34: CCommunity_GetUserPartnerEventsAppPriorities_Request
	(*CCommunity_GetUserPartnerEventsAppPriorities_Response)(nil),                      // 35: CCommunity_GetUserPartnerEventsAppPriorities_Response
	(*CCommunity_ClearSinglePartnerEventsAppPriority_Request)(nil),                     // 36: CCommunity_ClearSinglePartnerEventsAppPriority_Request
	(*CCommunity_ClearSinglePartnerEventsAppPriority_Response)(nil),                    // 37: CCommunity_ClearSinglePartnerEventsAppPriority_Response
	(*CCommunity_PartnerEventsShowMoreForApp_Request)(nil),                             // 38: CCommunity_PartnerEventsShowMoreForApp_Request
	(*CCommunity_PartnerEventsShowMoreForApp_Response)(nil),                            // 39: CCommunity_PartnerEventsShowMoreForApp_Response
	(*CCommunity_PartnerEventsShowLessForApp_Request)(nil),                             // 40: CCommunity_PartnerEventsShowLessForApp_Request
	(*CCommunity_PartnerEventsShowLessForApp_Response)(nil),                            // 41: CCommunity_PartnerEventsShowLessForApp_Response
	(*CCommunity_MarkPartnerEventsForUser_Request)(nil),                                // 42: CCommunity_MarkPartnerEventsForUser_Request
	(*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking)(nil),            // 43: CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking
	(*CCommunity_MarkPartnerEventsForUser_Response)(nil),                               // 44: CCommunity_MarkPartnerEventsForUser_Response
	(*CProductImpressionsFromClient_Notification)(nil),                                 // 45: CProductImpressionsFromClient_Notification
	(*CProductImpressionsFromClient_Notification_Impression)(nil),                      // 46: CProductImpressionsFromClient_Notification_Impression
	(*CFriendsListCategory)(nil),                                                       // 47: CFriendsListCategory
	(*CFriendsList_GetCategories_Request)(nil),                                         // 48: CFriendsList_GetCategories_Request
	(*CFriendsList_GetCategories_Response)(nil),                                        // 49: CFriendsList_GetCategories_Response
	(*CFriendsListFavoriteEntry)(nil),                                                  // 50: CFriendsListFavoriteEntry
	(*CFriendsList_GetFavorites_Request)(nil),                                          // 51: CFriendsList_GetFavorites_Request
	(*CFriendsList_GetFavorites_Response)(nil),                                         // 52: CFriendsList_GetFavorites_Response
	(*CFriendsList_SetFavorites_Request)(nil),                                          // 53: CFriendsList_SetFavorites_Request
	(*CFriendsList_SetFavorites_Response)(nil),                                         // 54: CFriendsList_SetFavorites_Response
	(*CFriendsList_FavoritesChanged_Notification)(nil),                                 // 55: CFriendsList_FavoritesChanged_Notification
	(*CFriendsList_GetFriendsList_Request)(nil),                                        // 56: CFriendsList_GetFriendsList_Request
	(*CFriendsList_GetFriendsList_Response)(nil),                                       // 57: CFriendsList_GetFriendsList_Response
	(*CMsgClientUCMEnumerateUserPublishedFiles)(nil),                                   // 58: CMsgClientUCMEnumerateUserPublishedFiles
	(*CMsgClientUCMEnumerateUserPublishedFilesResponse)(nil),                           // 59: CMsgClientUCMEnumerateUserPublishedFilesResponse
	(*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId)(nil),           // 60: CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId
	(*CMsgClientUCMEnumerateUserSubscribedFiles)(nil),                                  // 61: CMsgClientUCMEnumerateUserSubscribedFiles
	(*CMsgClientUCMEnumerateUserSubscribedFilesResponse)(nil),                          // 62: CMsgClientUCMEnumerateUserSubscribedFilesResponse
	(*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId)(nil),          // 63: CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId
	(*CMsgClientUCMPublishedFileDeleted)(nil),                                          // 64: CMsgClientUCMPublishedFileDeleted
	(*CMsgClientWorkshopItemInfoRequest)(nil),                                          // 65: CMsgClientWorkshopItemInfoRequest
	(*CMsgClientWorkshopItemInfoRequest_WorkshopItem)(nil),                             // 66: CMsgClientWorkshopItemInfoRequest_WorkshopItem
	(*CMsgClientWorkshopItemInfoResponse)(nil),                                         // 67: CMsgClientWorkshopItemInfoResponse
	(*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo)(nil),                        // 68: CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo
	(*CMsgClientUCMGetPublishedFilesForUser)(nil),                                      // 69: CMsgClientUCMGetPublishedFilesForUser
	(*CMsgClientUCMGetPublishedFilesForUserResponse)(nil),                              // 70: CMsgClientUCMGetPublishedFilesForUserResponse
	(*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId)(nil),              // 71: CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId
	(*CMsgCREEnumeratePublishedFiles)(nil),                                             // 72: CMsgCREEnumeratePublishedFiles
	(*CMsgCREEnumeratePublishedFilesResponse)(nil),                                     // 73: CMsgCREEnumeratePublishedFilesResponse
	(*CMsgCREEnumeratePublishedFilesResponse_PublishedFileId)(nil),                     // 74: CMsgCREEnumeratePublishedFilesResponse_PublishedFileId
	(*CMsgGameServerPingSample)(nil),                                                   // 75: CMsgGameServerPingSample
	(*CMsgGameServerPingSample_Sample)(nil),                                            // 76: CMsgGameServerPingSample_Sample
	(*CClan_RespondToClanInvite_Request)(nil),                                          // 77: CClan_RespondToClanInvite_Request
	(*CClan_RespondToClanInvite_Response)(nil),                                         // 78: CClan_RespondToClanInvite_Response
	(*CVoiceChat_RequestOneOnOneChat_Request)(nil),                                     // 79: CVoiceChat_RequestOneOnOneChat_Request
	(*CVoiceChat_RequestOneOnOneChat_Response)(nil),                                    // 80: CVoiceChat_RequestOneOnOneChat_Response
	(*CVoiceChat_OneOnOneChatRequested_Notification)(nil),                              // 81: CVoiceChat_OneOnOneChatRequested_Notification
	(*CVoiceChat_AnswerOneOnOneChat_Request)(nil),                                      // 82: CVoiceChat_AnswerOneOnOneChat_Request
	(*CVoiceChat_AnswerOneOnOneChat_Response)(nil),                                     // 83: CVoiceChat_AnswerOneOnOneChat_Response
	(*CVoiceChat_OneOnOneChatRequestResponse_Notification)(nil),                        // 84: CVoiceChat_OneOnOneChatRequestResponse_Notification
	(*CVoiceChat_EndOneOnOneChat_Request)(nil),                                         // 85: CVoiceChat_EndOneOnOneChat_Request
	(*CVoiceChat_EndOneOnOneChat_Response)(nil),                                        // 86: CVoiceChat_EndOneOnOneChat_Response
	(*CVoiceChat_LeaveOneOnOneChat_Request)(nil),                                       // 87: CVoiceChat_LeaveOneOnOneChat_Request
	(*CVoiceChat_LeaveOneOnOneChat_Response)(nil),                                      // 88: CVoiceChat_LeaveOneOnOneChat_Response
	(*CVoiceChat_UserJoinedVoiceChat_Notification)(nil),                                // 89: CVoiceChat_UserJoinedVoiceChat_Notification
	(*CVoiceChat_UserVoiceStatus_Notification)(nil),                                    // 90: CVoiceChat_UserVoiceStatus_Notification
	(*CVoiceChat_AllMembersStatus_Notification)(nil),                                   // 91: CVoiceChat_AllMembersStatus_Notification
	(*CVoiceChat_UpdateVoiceChatWebRTCData_Request)(nil),                               // 92: CVoiceChat_UpdateVoiceChatWebRTCData_Request
	(*CVoiceChat_UpdateVoiceChatWebRTCData_Response)(nil),                              // 93: CVoiceChat_UpdateVoiceChatWebRTCData_Response
	(*CVoiceChat_UploadClientVoiceChatLogs_Request)(nil),                               // 94: CVoiceChat_UploadClientVoiceChatLogs_Request
	(*CVoiceChat_UploadClientVoiceChatLogs_Response)(nil),                              // 95: CVoiceChat_UploadClientVoiceChatLogs_Response
	(*CVoiceChat_LeaveVoiceChat_Request)(nil),                                          // 96: CVoiceChat_LeaveVoiceChat_Request
	(*CVoiceChat_LeaveVoiceChat_Response)(nil),                                         // 97: CVoiceChat_LeaveVoiceChat_Response
	(*CVoiceChat_UserLeftVoiceChat_Notification)(nil),                                  // 98: CVoiceChat_UserLeftVoiceChat_Notification
	(*CVoiceChat_VoiceChatEnded_Notification)(nil),                                     // 99: CVoiceChat_VoiceChatEnded_Notification
	(*CWebRTCClient_InitiateWebRTCConnection_Request)(nil),                             // 100: CWebRTCClient_InitiateWebRTCConnection_Request
	(*CWebRTCClient_InitiateWebRTCConnection_Response)(nil),                            // 101: CWebRTCClient_InitiateWebRTCConnection_Response
	(*CWebRTC_WebRTCSessionConnected_Notification)(nil),                                // 102: CWebRTC_WebRTCSessionConnected_Notification
	(*CWebRTC_WebRTCUpdateRemoteDescription_Notification)(nil),                         // 103: CWebRTC_WebRTCUpdateRemoteDescription_Notification
	(*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping)(nil), // 104: CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
	(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request)(nil),                  // 105: CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
	(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response)(nil),                 // 106: CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
	(*CMobilePerAccount_GetSettings_Request)(nil),                                      // 107: CMobilePerAccount_GetSettings_Request
	(*CMobilePerAccount_GetSettings_Response)(nil),                                     // 108: CMobilePerAccount_GetSettings_Response
	(*CMobilePerAccount_SetSettings_Request)(nil),                                      // 109: CMobilePerAccount_SetSettings_Request
	(*CMobilePerAccount_SetSettings_Response)(nil),                                     // 110: CMobilePerAccount_SetSettings_Response
	(*CMobileDevice_RegisterMobileDevice_Request)(nil),                                 // 111: CMobileDevice_RegisterMobileDevice_Request
	(*CMobileDevice_RegisterMobileDevice_Response)(nil),                                // 112: CMobileDevice_RegisterMobileDevice_Response
	(*CMobileDevice_DeregisterMobileDevice_Notification)(nil),                          // 113: CMobileDevice_DeregisterMobileDevice_Notification
	(*UnknownProto)(nil),                                                               // 114: UnknownProto
	(*CCDDBAppDetailCommon)(nil),                                                       // 115: CCDDBAppDetailCommon
	(*CMsgIPAddress)(nil),                                                              // 116: CMsgIPAddress
	(*CClanMatchEventByRange)(nil),                                                     // 117: CClanMatchEventByRange
	(*CMsgClientFriendsList)(nil),                                                      // 118: CMsgClientFriendsList
	(*NoResponse)(nil),                                                                 // 119: NoResponse
}
var file_steammessages_webui_friends_proto_depIdxs = []int32{
	3,   // 0: CMsgClientAppMinutesPlayedData.minutes_played:type_name -> CMsgClientAppMinutesPlayedData_AppMinutesPlayedData
	115, // 1: CCommunity_GetApps_Response.apps:type_name -> CCDDBAppDetailCommon
	9,   // 2: CCommunity_GetAppRichPresenceLocalization_Response.token_lists:type_name -> CCommunity_GetAppRichPresenceLocalization_Response_TokenList
	8,   // 3: CCommunity_GetAppRichPresenceLocalization_Response_TokenList.tokens:type_name -> CCommunity_GetAppRichPresenceLocalization_Response_Token
	116, // 4: CCommunity_Comment.ipaddress:type_name -> CMsgIPAddress
	11,  // 5: CCommunity_GetCommentThread_Response.comments:type_name -> CCommunity_Comment
	11,  // 6: CCommunity_GetCommentThread_Response.deleted_comments:type_name -> CCommunity_Comment
	25,  // 7: CCommunity_GetUserPartnerEventNews_Request.app_list:type_name -> CAppPriority
	117, // 8: CCommunity_GetUserPartnerEventNews_Response.results:type_name -> CClanMatchEventByRange
	29,  // 9: CCommunity_GetBestEventsForUser_Response.results:type_name -> CCommunity_PartnerEventResult
	33,  // 10: CCommunity_GetUserPartnerEventsAppPriorities_Response.priorities:type_name -> CCommunity_PartnerEventsAppPriority
	43,  // 11: CCommunity_MarkPartnerEventsForUser_Request.markings:type_name -> CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking
	46,  // 12: CProductImpressionsFromClient_Notification.impressions:type_name -> CProductImpressionsFromClient_Notification_Impression
	47,  // 13: CFriendsList_GetCategories_Response.categories:type_name -> CFriendsListCategory
	50,  // 14: CFriendsList_GetFavorites_Response.favorites:type_name -> CFriendsListFavoriteEntry
	50,  // 15: CFriendsList_SetFavorites_Request.favorites:type_name -> CFriendsListFavoriteEntry
	50,  // 16: CFriendsList_FavoritesChanged_Notification.favorites:type_name -> CFriendsListFavoriteEntry
	118, // 17: CFriendsList_GetFriendsList_Response.friendslist:type_name -> CMsgClientFriendsList
	60,  // 18: CMsgClientUCMEnumerateUserPublishedFilesResponse.published_files:type_name -> CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId
	63,  // 19: CMsgClientUCMEnumerateUserSubscribedFilesResponse.subscribed_files:type_name -> CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId
	66,  // 20: CMsgClientWorkshopItemInfoRequest.workshop_items:type_name -> CMsgClientWorkshopItemInfoRequest_WorkshopItem
	68,  // 21: CMsgClientWorkshopItemInfoResponse.workshop_items:type_name -> CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo
	71,  // 22: CMsgClientUCMGetPublishedFilesForUserResponse.published_files:type_name -> CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId
	74,  // 23: CMsgCREEnumeratePublishedFilesResponse.published_files:type_name -> CMsgCREEnumeratePublishedFilesResponse_PublishedFileId
	76,  // 24: CMsgGameServerPingSample.gs_samples:type_name -> CMsgGameServerPingSample_Sample
	90,  // 25: CVoiceChat_AllMembersStatus_Notification.users:type_name -> CVoiceChat_UserVoiceStatus_Notification
	104, // 26: CWebRTC_WebRTCUpdateRemoteDescription_Notification.ssrcs_to_accountids:type_name -> CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
	0,   // 27: HelpRequestLogs.UploadUserApplicationLog:input_type -> CHelpRequestLogs_UploadUserApplicationLog_Request
	4,   // 28: Community.GetApps:input_type -> CCommunity_GetApps_Request
	6,   // 29: Community.GetAppRichPresenceLocalization:input_type -> CCommunity_GetAppRichPresenceLocalization_Request
	10,  // 30: Community.GetCommentThread:input_type -> CCommunity_GetCommentThread_Request
	13,  // 31: Community.PostCommentToThread:input_type -> CCommunity_PostCommentToThread_Request
	15,  // 32: Community.DeleteCommentFromThread:input_type -> CCommunity_DeleteCommentFromThread_Request
	17,  // 33: Community.RateCommentThread:input_type -> CCommunity_RateCommentThread_Request
	19,  // 34: Community.GetCommentThreadRatings:input_type -> CCommunity_GetCommentThreadRatings_Request
	21,  // 35: Community.RateClanAnnouncement:input_type -> CCommunity_RateClanAnnouncement_Request
	23,  // 36: Community.GetClanAnnouncementVoteForUser:input_type -> CCommunity_GetClanAnnouncementVoteForUser_Request
	26,  // 37: Community.GetUserPartnerEventNews:input_type -> CCommunity_GetUserPartnerEventNews_Request
	28,  // 38: Community.GetBestEventsForUser:input_type -> CCommunity_GetBestEventsForUser_Request
	42,  // 39: Community.MarkPartnerEventsForUser:input_type -> CCommunity_MarkPartnerEventsForUser_Request
	38,  // 40: Community.PartnerEventsShowMoreForApp:input_type -> CCommunity_PartnerEventsShowMoreForApp_Request
	40,  // 41: Community.PartnerEventsShowLessForApp:input_type -> CCommunity_PartnerEventsShowLessForApp_Request
	31,  // 42: Community.ClearUserPartnerEventsAppPriorities:input_type -> CCommunity_ClearUserPartnerEventsAppPriorities_Request
	34,  // 43: Community.GetUserPartnerEventsAppPriorities:input_type -> CCommunity_GetUserPartnerEventsAppPriorities_Request
	36,  // 44: Community.ClearSinglePartnerEventsAppPriority:input_type -> CCommunity_ClearSinglePartnerEventsAppPriority_Request
	114, // 45: ExperimentService.ReportProductImpressionsFromClient:input_type -> UnknownProto
	48,  // 46: FriendsList.GetCategories:input_type -> CFriendsList_GetCategories_Request
	56,  // 47: FriendsList.GetFriendsList:input_type -> CFriendsList_GetFriendsList_Request
	51,  // 48: FriendsList.GetFavorites:input_type -> CFriendsList_GetFavorites_Request
	53,  // 49: FriendsList.SetFavorites:input_type -> CFriendsList_SetFavorites_Request
	55,  // 50: FriendsListClient.FavoritesChanged:input_type -> CFriendsList_FavoritesChanged_Notification
	77,  // 51: Clan.RespondToClanInvite:input_type -> CClan_RespondToClanInvite_Request
	92,  // 52: VoiceChat.UpdateVoiceChatWebRTCData:input_type -> CVoiceChat_UpdateVoiceChatWebRTCData_Request
	90,  // 53: VoiceChat.NotifyUserVoiceStatus:input_type -> CVoiceChat_UserVoiceStatus_Notification
	94,  // 54: VoiceChat.UploadClientVoiceChatLogs:input_type -> CVoiceChat_UploadClientVoiceChatLogs_Request
	96,  // 55: VoiceChat.LeaveVoiceChat:input_type -> CVoiceChat_LeaveVoiceChat_Request
	79,  // 56: VoiceChat.RequestOneOnOneChat:input_type -> CVoiceChat_RequestOneOnOneChat_Request
	82,  // 57: VoiceChat.AnswerOneOnOneChat:input_type -> CVoiceChat_AnswerOneOnOneChat_Request
	85,  // 58: VoiceChat.EndOneOnOneChat:input_type -> CVoiceChat_EndOneOnOneChat_Request
	87,  // 59: VoiceChat.LeaveOneOnOneChat:input_type -> CVoiceChat_LeaveOneOnOneChat_Request
	89,  // 60: VoiceChatClient.NotifyUserJoinedVoiceChat:input_type -> CVoiceChat_UserJoinedVoiceChat_Notification
	98,  // 61: VoiceChatClient.NotifyUserLeftVoiceChat:input_type -> CVoiceChat_UserLeftVoiceChat_Notification
	99,  // 62: VoiceChatClient.NotifyVoiceChatEnded:input_type -> CVoiceChat_VoiceChatEnded_Notification
	90,  // 63: VoiceChatClient.NotifyUserVoiceStatus:input_type -> CVoiceChat_UserVoiceStatus_Notification
	91,  // 64: VoiceChatClient.NotifyAllUsersVoiceStatus:input_type -> CVoiceChat_AllMembersStatus_Notification
	81,  // 65: VoiceChatClient.NotifyOneOnOneChatRequested:input_type -> CVoiceChat_OneOnOneChatRequested_Notification
	84,  // 66: VoiceChatClient.NotifyOneOnOneChatResponse:input_type -> CVoiceChat_OneOnOneChatRequestResponse_Notification
	100, // 67: WebRTCClient.InitiateWebRTCConnection:input_type -> CWebRTCClient_InitiateWebRTCConnection_Request
	105, // 68: WebRTCClient.AcknowledgeUpdatedRemoteDescription:input_type -> CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
	102, // 69: WebRTCClientNotifications.NotifyWebRTCSessionConnected:input_type -> CWebRTC_WebRTCSessionConnected_Notification
	103, // 70: WebRTCClientNotifications.NotifyWebRTCUpdateRemoteDescription:input_type -> CWebRTC_WebRTCUpdateRemoteDescription_Notification
	107, // 71: MobilePerAccount.GetSettings:input_type -> CMobilePerAccount_GetSettings_Request
	109, // 72: MobilePerAccount.SetSettings:input_type -> CMobilePerAccount_SetSettings_Request
	111, // 73: MobileDevice.RegisterMobileDevice:input_type -> CMobileDevice_RegisterMobileDevice_Request
	113, // 74: MobileDevice.DeregisterMobileDevice:input_type -> CMobileDevice_DeregisterMobileDevice_Notification
	1,   // 75: HelpRequestLogs.UploadUserApplicationLog:output_type -> CHelpRequestLogs_UploadUserApplicationLog_Response
	5,   // 76: Community.GetApps:output_type -> CCommunity_GetApps_Response
	7,   // 77: Community.GetAppRichPresenceLocalization:output_type -> CCommunity_GetAppRichPresenceLocalization_Response
	12,  // 78: Community.GetCommentThread:output_type -> CCommunity_GetCommentThread_Response
	14,  // 79: Community.PostCommentToThread:output_type -> CCommunity_PostCommentToThread_Response
	16,  // 80: Community.DeleteCommentFromThread:output_type -> CCommunity_DeleteCommentFromThread_Response
	18,  // 81: Community.RateCommentThread:output_type -> CCommunity_RateCommentThread_Response
	20,  // 82: Community.GetCommentThreadRatings:output_type -> CCommunity_GetCommentThreadRatings_Response
	22,  // 83: Community.RateClanAnnouncement:output_type -> CCommunity_RateClanAnnouncement_Response
	24,  // 84: Community.GetClanAnnouncementVoteForUser:output_type -> CCommunity_GetClanAnnouncementVoteForUser_Response
	27,  // 85: Community.GetUserPartnerEventNews:output_type -> CCommunity_GetUserPartnerEventNews_Response
	30,  // 86: Community.GetBestEventsForUser:output_type -> CCommunity_GetBestEventsForUser_Response
	44,  // 87: Community.MarkPartnerEventsForUser:output_type -> CCommunity_MarkPartnerEventsForUser_Response
	39,  // 88: Community.PartnerEventsShowMoreForApp:output_type -> CCommunity_PartnerEventsShowMoreForApp_Response
	41,  // 89: Community.PartnerEventsShowLessForApp:output_type -> CCommunity_PartnerEventsShowLessForApp_Response
	32,  // 90: Community.ClearUserPartnerEventsAppPriorities:output_type -> CCommunity_ClearUserPartnerEventsAppPriorities_Response
	35,  // 91: Community.GetUserPartnerEventsAppPriorities:output_type -> CCommunity_GetUserPartnerEventsAppPriorities_Response
	37,  // 92: Community.ClearSinglePartnerEventsAppPriority:output_type -> CCommunity_ClearSinglePartnerEventsAppPriority_Response
	119, // 93: ExperimentService.ReportProductImpressionsFromClient:output_type -> NoResponse
	49,  // 94: FriendsList.GetCategories:output_type -> CFriendsList_GetCategories_Response
	57,  // 95: FriendsList.GetFriendsList:output_type -> CFriendsList_GetFriendsList_Response
	52,  // 96: FriendsList.GetFavorites:output_type -> CFriendsList_GetFavorites_Response
	54,  // 97: FriendsList.SetFavorites:output_type -> CFriendsList_SetFavorites_Response
	119, // 98: FriendsListClient.FavoritesChanged:output_type -> NoResponse
	78,  // 99: Clan.RespondToClanInvite:output_type -> CClan_RespondToClanInvite_Response
	93,  // 100: VoiceChat.UpdateVoiceChatWebRTCData:output_type -> CVoiceChat_UpdateVoiceChatWebRTCData_Response
	119, // 101: VoiceChat.NotifyUserVoiceStatus:output_type -> NoResponse
	95,  // 102: VoiceChat.UploadClientVoiceChatLogs:output_type -> CVoiceChat_UploadClientVoiceChatLogs_Response
	97,  // 103: VoiceChat.LeaveVoiceChat:output_type -> CVoiceChat_LeaveVoiceChat_Response
	80,  // 104: VoiceChat.RequestOneOnOneChat:output_type -> CVoiceChat_RequestOneOnOneChat_Response
	83,  // 105: VoiceChat.AnswerOneOnOneChat:output_type -> CVoiceChat_AnswerOneOnOneChat_Response
	86,  // 106: VoiceChat.EndOneOnOneChat:output_type -> CVoiceChat_EndOneOnOneChat_Response
	88,  // 107: VoiceChat.LeaveOneOnOneChat:output_type -> CVoiceChat_LeaveOneOnOneChat_Response
	119, // 108: VoiceChatClient.NotifyUserJoinedVoiceChat:output_type -> NoResponse
	119, // 109: VoiceChatClient.NotifyUserLeftVoiceChat:output_type -> NoResponse
	119, // 110: VoiceChatClient.NotifyVoiceChatEnded:output_type -> NoResponse
	119, // 111: VoiceChatClient.NotifyUserVoiceStatus:output_type -> NoResponse
	119, // 112: VoiceChatClient.NotifyAllUsersVoiceStatus:output_type -> NoResponse
	119, // 113: VoiceChatClient.NotifyOneOnOneChatRequested:output_type -> NoResponse
	119, // 114: VoiceChatClient.NotifyOneOnOneChatResponse:output_type -> NoResponse
	101, // 115: WebRTCClient.InitiateWebRTCConnection:output_type -> CWebRTCClient_InitiateWebRTCConnection_Response
	106, // 116: WebRTCClient.AcknowledgeUpdatedRemoteDescription:output_type -> CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
	119, // 117: WebRTCClientNotifications.NotifyWebRTCSessionConnected:output_type -> NoResponse
	119, // 118: WebRTCClientNotifications.NotifyWebRTCUpdateRemoteDescription:output_type -> NoResponse
	108, // 119: MobilePerAccount.GetSettings:output_type -> CMobilePerAccount_GetSettings_Response
	110, // 120: MobilePerAccount.SetSettings:output_type -> CMobilePerAccount_SetSettings_Response
	112, // 121: MobileDevice.RegisterMobileDevice:output_type -> CMobileDevice_RegisterMobileDevice_Response
	119, // 122: MobileDevice.DeregisterMobileDevice:output_type -> NoResponse
	75,  // [75:123] is the sub-list for method output_type
	27,  // [27:75] is the sub-list for method input_type
	27,  // [27:27] is the sub-list for extension type_name
	27,  // [27:27] is the sub-list for extension extendee
	0,   // [0:27] is the sub-list for field type_name
}

func init() { file_steammessages_webui_friends_proto_init() }
func file_steammessages_webui_friends_proto_init() {
	if File_steammessages_webui_friends_proto != nil {
		return
	}
	file_steammessages_unified_base_proto_init()
	file_steammessages_base_proto_init()
	file_steammessages_clientserver_friends_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_webui_friends_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHelpRequestLogs_UploadUserApplicationLog_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHelpRequestLogs_UploadUserApplicationLog_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppMinutesPlayedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetAppRichPresenceLocalization_Response_TokenList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetCommentThread_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetCommentThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PostCommentToThread_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PostCommentToThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_DeleteCommentFromThread_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_DeleteCommentFromThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_RateCommentThread_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_RateCommentThread_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetCommentThreadRatings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetCommentThreadRatings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_RateClanAnnouncement_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_RateClanAnnouncement_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetClanAnnouncementVoteForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetClanAnnouncementVoteForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAppPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetUserPartnerEventNews_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetUserPartnerEventNews_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetBestEventsForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetBestEventsForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_ClearUserPartnerEventsAppPriorities_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_ClearUserPartnerEventsAppPriorities_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventsAppPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetUserPartnerEventsAppPriorities_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetUserPartnerEventsAppPriorities_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_ClearSinglePartnerEventsAppPriority_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_ClearSinglePartnerEventsAppPriority_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventsShowMoreForApp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventsShowMoreForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventsShowLessForApp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_PartnerEventsShowLessForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_MarkPartnerEventsForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_MarkPartnerEventsForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CProductImpressionsFromClient_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CProductImpressionsFromClient_Notification_Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsListCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetCategories_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetCategories_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsListFavoriteEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetFavorites_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetFavorites_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_SetFavorites_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_SetFavorites_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_FavoritesChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetFriendsList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsList_GetFriendsList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserPublishedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserPublishedFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMPublishedFileDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemInfoRequest_WorkshopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMGetPublishedFilesForUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMGetPublishedFilesForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREEnumeratePublishedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREEnumeratePublishedFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREEnumeratePublishedFilesResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerPingSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerPingSample_Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClan_RespondToClanInvite_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClan_RespondToClanInvite_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_RequestOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_RequestOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_OneOnOneChatRequested_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_AnswerOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_AnswerOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_OneOnOneChatRequestResponse_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_EndOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_EndOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_LeaveOneOnOneChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_LeaveOneOnOneChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UserJoinedVoiceChat_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UserVoiceStatus_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_AllMembersStatus_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UpdateVoiceChatWebRTCData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UpdateVoiceChatWebRTCData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UploadClientVoiceChatLogs_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UploadClientVoiceChatLogs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_LeaveVoiceChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_LeaveVoiceChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_UserLeftVoiceChat_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVoiceChat_VoiceChatEnded_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTCClient_InitiateWebRTCConnection_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTCClient_InitiateWebRTCConnection_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTC_WebRTCSessionConnected_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTC_WebRTCUpdateRemoteDescription_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMobilePerAccount_GetSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMobilePerAccount_GetSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMobilePerAccount_SetSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMobilePerAccount_SetSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMobileDevice_RegisterMobileDevice_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMobileDevice_RegisterMobileDevice_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMobileDevice_DeregisterMobileDevice_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_webui_friends_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_webui_friends_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   115,
			NumExtensions: 0,
			NumServices:   12,
		},
		GoTypes:           file_steammessages_webui_friends_proto_goTypes,
		DependencyIndexes: file_steammessages_webui_friends_proto_depIdxs,
		MessageInfos:      file_steammessages_webui_friends_proto_msgTypes,
	}.Build()
	File_steammessages_webui_friends_proto = out.File
	file_steammessages_webui_friends_proto_rawDesc = nil
	file_steammessages_webui_friends_proto_goTypes = nil
	file_steammessages_webui_friends_proto_depIdxs = nil
}
