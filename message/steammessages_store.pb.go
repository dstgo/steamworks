// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: steammessages_store.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EStoreDiscoveryQueueType int32

const (
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeNew                   EStoreDiscoveryQueueType = 0
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeComingSoon            EStoreDiscoveryQueueType = 1
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeRecommended           EStoreDiscoveryQueueType = 2
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeEveryNewRelease       EStoreDiscoveryQueueType = 3
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeMLRecommender         EStoreDiscoveryQueueType = 5
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeWishlistOnSale        EStoreDiscoveryQueueType = 6
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeDLC                   EStoreDiscoveryQueueType = 7
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeDLCOnSale             EStoreDiscoveryQueueType = 8
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeRecommendedComingSoon EStoreDiscoveryQueueType = 9
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeRecommendedFree       EStoreDiscoveryQueueType = 10
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeRecommendedOnSale     EStoreDiscoveryQueueType = 11
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeRecommendedDemos      EStoreDiscoveryQueueType = 12
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeDLCNewReleases        EStoreDiscoveryQueueType = 13
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeDLCTopSellers         EStoreDiscoveryQueueType = 14
	EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeMAX                   EStoreDiscoveryQueueType = 15
)

// Enum value maps for EStoreDiscoveryQueueType.
var (
	EStoreDiscoveryQueueType_name = map[int32]string{
		0:  "k_EStoreDiscoveryQueueTypeNew",
		1:  "k_EStoreDiscoveryQueueTypeComingSoon",
		2:  "k_EStoreDiscoveryQueueTypeRecommended",
		3:  "k_EStoreDiscoveryQueueTypeEveryNewRelease",
		5:  "k_EStoreDiscoveryQueueTypeMLRecommender",
		6:  "k_EStoreDiscoveryQueueTypeWishlistOnSale",
		7:  "k_EStoreDiscoveryQueueTypeDLC",
		8:  "k_EStoreDiscoveryQueueTypeDLCOnSale",
		9:  "k_EStoreDiscoveryQueueTypeRecommendedComingSoon",
		10: "k_EStoreDiscoveryQueueTypeRecommendedFree",
		11: "k_EStoreDiscoveryQueueTypeRecommendedOnSale",
		12: "k_EStoreDiscoveryQueueTypeRecommendedDemos",
		13: "k_EStoreDiscoveryQueueTypeDLCNewReleases",
		14: "k_EStoreDiscoveryQueueTypeDLCTopSellers",
		15: "k_EStoreDiscoveryQueueTypeMAX",
	}
	EStoreDiscoveryQueueType_value = map[string]int32{
		"k_EStoreDiscoveryQueueTypeNew":                   0,
		"k_EStoreDiscoveryQueueTypeComingSoon":            1,
		"k_EStoreDiscoveryQueueTypeRecommended":           2,
		"k_EStoreDiscoveryQueueTypeEveryNewRelease":       3,
		"k_EStoreDiscoveryQueueTypeMLRecommender":         5,
		"k_EStoreDiscoveryQueueTypeWishlistOnSale":        6,
		"k_EStoreDiscoveryQueueTypeDLC":                   7,
		"k_EStoreDiscoveryQueueTypeDLCOnSale":             8,
		"k_EStoreDiscoveryQueueTypeRecommendedComingSoon": 9,
		"k_EStoreDiscoveryQueueTypeRecommendedFree":       10,
		"k_EStoreDiscoveryQueueTypeRecommendedOnSale":     11,
		"k_EStoreDiscoveryQueueTypeRecommendedDemos":      12,
		"k_EStoreDiscoveryQueueTypeDLCNewReleases":        13,
		"k_EStoreDiscoveryQueueTypeDLCTopSellers":         14,
		"k_EStoreDiscoveryQueueTypeMAX":                   15,
	}
)

func (x EStoreDiscoveryQueueType) Enum() *EStoreDiscoveryQueueType {
	p := new(EStoreDiscoveryQueueType)
	*p = x
	return p
}

func (x EStoreDiscoveryQueueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStoreDiscoveryQueueType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_store_proto_enumTypes[0].Descriptor()
}

func (EStoreDiscoveryQueueType) Type() protoreflect.EnumType {
	return &file_steammessages_store_proto_enumTypes[0]
}

func (x EStoreDiscoveryQueueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStoreDiscoveryQueueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStoreDiscoveryQueueType(num)
	return nil
}

// Deprecated: Use EStoreDiscoveryQueueType.Descriptor instead.
func (EStoreDiscoveryQueueType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{0}
}

type EPlaytestStatus int32

const (
	EPlaytestStatus_k_ETesterStatusNone    EPlaytestStatus = 0
	EPlaytestStatus_k_ETesterStatusPending EPlaytestStatus = 1
	EPlaytestStatus_k_ETesterStatusInvited EPlaytestStatus = 2
	EPlaytestStatus_k_ETesterStatusGranted EPlaytestStatus = 3
)

// Enum value maps for EPlaytestStatus.
var (
	EPlaytestStatus_name = map[int32]string{
		0: "k_ETesterStatusNone",
		1: "k_ETesterStatusPending",
		2: "k_ETesterStatusInvited",
		3: "k_ETesterStatusGranted",
	}
	EPlaytestStatus_value = map[string]int32{
		"k_ETesterStatusNone":    0,
		"k_ETesterStatusPending": 1,
		"k_ETesterStatusInvited": 2,
		"k_ETesterStatusGranted": 3,
	}
)

func (x EPlaytestStatus) Enum() *EPlaytestStatus {
	p := new(EPlaytestStatus)
	*p = x
	return p
}

func (x EPlaytestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPlaytestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_store_proto_enumTypes[1].Descriptor()
}

func (EPlaytestStatus) Type() protoreflect.EnumType {
	return &file_steammessages_store_proto_enumTypes[1]
}

func (x EPlaytestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPlaytestStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPlaytestStatus(num)
	return nil
}

// Deprecated: Use EPlaytestStatus.Descriptor instead.
func (EPlaytestStatus) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{1}
}

type EUserReviewScorePreference int32

const (
	EUserReviewScorePreference_k_EUserReviewScorePreference_Unset        EUserReviewScorePreference = 0
	EUserReviewScorePreference_k_EUserReviewScorePreference_IncludeAll   EUserReviewScorePreference = 1
	EUserReviewScorePreference_k_EUserReviewScorePreference_ExcludeBombs EUserReviewScorePreference = 2
)

// Enum value maps for EUserReviewScorePreference.
var (
	EUserReviewScorePreference_name = map[int32]string{
		0: "k_EUserReviewScorePreference_Unset",
		1: "k_EUserReviewScorePreference_IncludeAll",
		2: "k_EUserReviewScorePreference_ExcludeBombs",
	}
	EUserReviewScorePreference_value = map[string]int32{
		"k_EUserReviewScorePreference_Unset":        0,
		"k_EUserReviewScorePreference_IncludeAll":   1,
		"k_EUserReviewScorePreference_ExcludeBombs": 2,
	}
)

func (x EUserReviewScorePreference) Enum() *EUserReviewScorePreference {
	p := new(EUserReviewScorePreference)
	*p = x
	return p
}

func (x EUserReviewScorePreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserReviewScorePreference) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_store_proto_enumTypes[2].Descriptor()
}

func (EUserReviewScorePreference) Type() protoreflect.EnumType {
	return &file_steammessages_store_proto_enumTypes[2]
}

func (x EUserReviewScorePreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserReviewScorePreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserReviewScorePreference(num)
	return nil
}

// Deprecated: Use EUserReviewScorePreference.Descriptor instead.
func (EUserReviewScorePreference) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{2}
}

type CStore_RegisterCDKey_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivationCode      *string `protobuf:"bytes,1,opt,name=activation_code,json=activationCode" json:"activation_code,omitempty"`
	PurchasePlatform    *int32  `protobuf:"varint,2,opt,name=purchase_platform,json=purchasePlatform" json:"purchase_platform,omitempty"`
	IsRequestFromClient *bool   `protobuf:"varint,3,opt,name=is_request_from_client,json=isRequestFromClient" json:"is_request_from_client,omitempty"`
}

func (x *CStore_RegisterCDKey_Request) Reset() {
	*x = CStore_RegisterCDKey_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_RegisterCDKey_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_RegisterCDKey_Request) ProtoMessage() {}

func (x *CStore_RegisterCDKey_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_RegisterCDKey_Request.ProtoReflect.Descriptor instead.
func (*CStore_RegisterCDKey_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{0}
}

func (x *CStore_RegisterCDKey_Request) GetActivationCode() string {
	if x != nil && x.ActivationCode != nil {
		return *x.ActivationCode
	}
	return ""
}

func (x *CStore_RegisterCDKey_Request) GetPurchasePlatform() int32 {
	if x != nil && x.PurchasePlatform != nil {
		return *x.PurchasePlatform
	}
	return 0
}

func (x *CStore_RegisterCDKey_Request) GetIsRequestFromClient() bool {
	if x != nil && x.IsRequestFromClient != nil {
		return *x.IsRequestFromClient
	}
	return false
}

type CStore_PurchaseReceiptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactionid   *uint64                                `protobuf:"varint,1,opt,name=transactionid" json:"transactionid,omitempty"`
	Packageid       *uint32                                `protobuf:"varint,2,opt,name=packageid" json:"packageid,omitempty"`
	PurchaseStatus  *uint32                                `protobuf:"varint,3,opt,name=purchase_status,json=purchaseStatus" json:"purchase_status,omitempty"`
	ResultDetail    *uint32                                `protobuf:"varint,4,opt,name=result_detail,json=resultDetail" json:"result_detail,omitempty"`
	TransactionTime *uint32                                `protobuf:"varint,5,opt,name=transaction_time,json=transactionTime" json:"transaction_time,omitempty"`
	PaymentMethod   *uint32                                `protobuf:"varint,6,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	BasePrice       *uint64                                `protobuf:"varint,7,opt,name=base_price,json=basePrice" json:"base_price,omitempty"`
	TotalDiscount   *uint64                                `protobuf:"varint,8,opt,name=total_discount,json=totalDiscount" json:"total_discount,omitempty"`
	Tax             *uint64                                `protobuf:"varint,9,opt,name=tax" json:"tax,omitempty"`
	Shipping        *uint64                                `protobuf:"varint,10,opt,name=shipping" json:"shipping,omitempty"`
	CurrencyCode    *uint32                                `protobuf:"varint,11,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	CountryCode     *string                                `protobuf:"bytes,12,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	ErrorHeadline   *string                                `protobuf:"bytes,13,opt,name=error_headline,json=errorHeadline" json:"error_headline,omitempty"`
	ErrorString     *string                                `protobuf:"bytes,14,opt,name=error_string,json=errorString" json:"error_string,omitempty"`
	ErrorLinkText   *string                                `protobuf:"bytes,15,opt,name=error_link_text,json=errorLinkText" json:"error_link_text,omitempty"`
	ErrorLinkUrl    *string                                `protobuf:"bytes,16,opt,name=error_link_url,json=errorLinkUrl" json:"error_link_url,omitempty"`
	ErrorAppid      *uint32                                `protobuf:"varint,17,opt,name=error_appid,json=errorAppid" json:"error_appid,omitempty"`
	LineItems       []*CStore_PurchaseReceiptInfo_LineItem `protobuf:"bytes,18,rep,name=line_items,json=lineItems" json:"line_items,omitempty"`
}

func (x *CStore_PurchaseReceiptInfo) Reset() {
	*x = CStore_PurchaseReceiptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_PurchaseReceiptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_PurchaseReceiptInfo) ProtoMessage() {}

func (x *CStore_PurchaseReceiptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_PurchaseReceiptInfo.ProtoReflect.Descriptor instead.
func (*CStore_PurchaseReceiptInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{1}
}

func (x *CStore_PurchaseReceiptInfo) GetTransactionid() uint64 {
	if x != nil && x.Transactionid != nil {
		return *x.Transactionid
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetPurchaseStatus() uint32 {
	if x != nil && x.PurchaseStatus != nil {
		return *x.PurchaseStatus
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetResultDetail() uint32 {
	if x != nil && x.ResultDetail != nil {
		return *x.ResultDetail
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetTransactionTime() uint32 {
	if x != nil && x.TransactionTime != nil {
		return *x.TransactionTime
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetPaymentMethod() uint32 {
	if x != nil && x.PaymentMethod != nil {
		return *x.PaymentMethod
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetBasePrice() uint64 {
	if x != nil && x.BasePrice != nil {
		return *x.BasePrice
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetTotalDiscount() uint64 {
	if x != nil && x.TotalDiscount != nil {
		return *x.TotalDiscount
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetTax() uint64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetShipping() uint64 {
	if x != nil && x.Shipping != nil {
		return *x.Shipping
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetCurrencyCode() uint32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CStore_PurchaseReceiptInfo) GetErrorHeadline() string {
	if x != nil && x.ErrorHeadline != nil {
		return *x.ErrorHeadline
	}
	return ""
}

func (x *CStore_PurchaseReceiptInfo) GetErrorString() string {
	if x != nil && x.ErrorString != nil {
		return *x.ErrorString
	}
	return ""
}

func (x *CStore_PurchaseReceiptInfo) GetErrorLinkText() string {
	if x != nil && x.ErrorLinkText != nil {
		return *x.ErrorLinkText
	}
	return ""
}

func (x *CStore_PurchaseReceiptInfo) GetErrorLinkUrl() string {
	if x != nil && x.ErrorLinkUrl != nil {
		return *x.ErrorLinkUrl
	}
	return ""
}

func (x *CStore_PurchaseReceiptInfo) GetErrorAppid() uint32 {
	if x != nil && x.ErrorAppid != nil {
		return *x.ErrorAppid
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo) GetLineItems() []*CStore_PurchaseReceiptInfo_LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type CStore_RegisterCDKey_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseResultDetails *int32                      `protobuf:"varint,1,opt,name=purchase_result_details,json=purchaseResultDetails" json:"purchase_result_details,omitempty"`
	PurchaseReceiptInfo   *CStore_PurchaseReceiptInfo `protobuf:"bytes,2,opt,name=purchase_receipt_info,json=purchaseReceiptInfo" json:"purchase_receipt_info,omitempty"`
}

func (x *CStore_RegisterCDKey_Response) Reset() {
	*x = CStore_RegisterCDKey_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_RegisterCDKey_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_RegisterCDKey_Response) ProtoMessage() {}

func (x *CStore_RegisterCDKey_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_RegisterCDKey_Response.ProtoReflect.Descriptor instead.
func (*CStore_RegisterCDKey_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{2}
}

func (x *CStore_RegisterCDKey_Response) GetPurchaseResultDetails() int32 {
	if x != nil && x.PurchaseResultDetails != nil {
		return *x.PurchaseResultDetails
	}
	return 0
}

func (x *CStore_RegisterCDKey_Response) GetPurchaseReceiptInfo() *CStore_PurchaseReceiptInfo {
	if x != nil {
		return x.PurchaseReceiptInfo
	}
	return nil
}

type CStore_GetMostPopularTags_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
}

func (x *CStore_GetMostPopularTags_Request) Reset() {
	*x = CStore_GetMostPopularTags_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetMostPopularTags_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetMostPopularTags_Request) ProtoMessage() {}

func (x *CStore_GetMostPopularTags_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetMostPopularTags_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetMostPopularTags_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{3}
}

func (x *CStore_GetMostPopularTags_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CStore_GetMostPopularTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*CStore_GetMostPopularTags_Response_Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (x *CStore_GetMostPopularTags_Response) Reset() {
	*x = CStore_GetMostPopularTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetMostPopularTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetMostPopularTags_Response) ProtoMessage() {}

func (x *CStore_GetMostPopularTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetMostPopularTags_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetMostPopularTags_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{4}
}

func (x *CStore_GetMostPopularTags_Response) GetTags() []*CStore_GetMostPopularTags_Response_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CStore_GetLocalizedNameForTags_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string  `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Tagids   []uint32 `protobuf:"varint,2,rep,name=tagids" json:"tagids,omitempty"`
}

func (x *CStore_GetLocalizedNameForTags_Request) Reset() {
	*x = CStore_GetLocalizedNameForTags_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetLocalizedNameForTags_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetLocalizedNameForTags_Request) ProtoMessage() {}

func (x *CStore_GetLocalizedNameForTags_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetLocalizedNameForTags_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetLocalizedNameForTags_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{5}
}

func (x *CStore_GetLocalizedNameForTags_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CStore_GetLocalizedNameForTags_Request) GetTagids() []uint32 {
	if x != nil {
		return x.Tagids
	}
	return nil
}

type CStore_GetLocalizedNameForTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*CStore_GetLocalizedNameForTags_Response_Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (x *CStore_GetLocalizedNameForTags_Response) Reset() {
	*x = CStore_GetLocalizedNameForTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetLocalizedNameForTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetLocalizedNameForTags_Response) ProtoMessage() {}

func (x *CStore_GetLocalizedNameForTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetLocalizedNameForTags_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetLocalizedNameForTags_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{6}
}

func (x *CStore_GetLocalizedNameForTags_Response) GetTags() []*CStore_GetLocalizedNameForTags_Response_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CStoreDiscoveryQueueSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsWin                 *bool    `protobuf:"varint,4,opt,name=os_win,json=osWin" json:"os_win,omitempty"`
	OsMac                 *bool    `protobuf:"varint,5,opt,name=os_mac,json=osMac" json:"os_mac,omitempty"`
	OsLinux               *bool    `protobuf:"varint,6,opt,name=os_linux,json=osLinux" json:"os_linux,omitempty"`
	FullControllerSupport *bool    `protobuf:"varint,7,opt,name=full_controller_support,json=fullControllerSupport" json:"full_controller_support,omitempty"`
	NativeSteamController *bool    `protobuf:"varint,8,opt,name=native_steam_controller,json=nativeSteamController" json:"native_steam_controller,omitempty"`
	IncludeComingSoon     *bool    `protobuf:"varint,9,opt,name=include_coming_soon,json=includeComingSoon" json:"include_coming_soon,omitempty"`
	ExcludedTagids        []uint32 `protobuf:"varint,10,rep,name=excluded_tagids,json=excludedTagids" json:"excluded_tagids,omitempty"`
	ExcludeEarlyAccess    *bool    `protobuf:"varint,11,opt,name=exclude_early_access,json=excludeEarlyAccess" json:"exclude_early_access,omitempty"`
	ExcludeVideos         *bool    `protobuf:"varint,12,opt,name=exclude_videos,json=excludeVideos" json:"exclude_videos,omitempty"`
	ExcludeSoftware       *bool    `protobuf:"varint,13,opt,name=exclude_software,json=excludeSoftware" json:"exclude_software,omitempty"`
	ExcludeDlc            *bool    `protobuf:"varint,14,opt,name=exclude_dlc,json=excludeDlc" json:"exclude_dlc,omitempty"`
	ExcludeSoundtracks    *bool    `protobuf:"varint,15,opt,name=exclude_soundtracks,json=excludeSoundtracks" json:"exclude_soundtracks,omitempty"`
	FeaturedTagids        []uint32 `protobuf:"varint,16,rep,name=featured_tagids,json=featuredTagids" json:"featured_tagids,omitempty"`
}

func (x *CStoreDiscoveryQueueSettings) Reset() {
	*x = CStoreDiscoveryQueueSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreDiscoveryQueueSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreDiscoveryQueueSettings) ProtoMessage() {}

func (x *CStoreDiscoveryQueueSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreDiscoveryQueueSettings.ProtoReflect.Descriptor instead.
func (*CStoreDiscoveryQueueSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{7}
}

func (x *CStoreDiscoveryQueueSettings) GetOsWin() bool {
	if x != nil && x.OsWin != nil {
		return *x.OsWin
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetOsMac() bool {
	if x != nil && x.OsMac != nil {
		return *x.OsMac
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetOsLinux() bool {
	if x != nil && x.OsLinux != nil {
		return *x.OsLinux
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetFullControllerSupport() bool {
	if x != nil && x.FullControllerSupport != nil {
		return *x.FullControllerSupport
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetNativeSteamController() bool {
	if x != nil && x.NativeSteamController != nil {
		return *x.NativeSteamController
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetIncludeComingSoon() bool {
	if x != nil && x.IncludeComingSoon != nil {
		return *x.IncludeComingSoon
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetExcludedTagids() []uint32 {
	if x != nil {
		return x.ExcludedTagids
	}
	return nil
}

func (x *CStoreDiscoveryQueueSettings) GetExcludeEarlyAccess() bool {
	if x != nil && x.ExcludeEarlyAccess != nil {
		return *x.ExcludeEarlyAccess
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetExcludeVideos() bool {
	if x != nil && x.ExcludeVideos != nil {
		return *x.ExcludeVideos
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetExcludeSoftware() bool {
	if x != nil && x.ExcludeSoftware != nil {
		return *x.ExcludeSoftware
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetExcludeDlc() bool {
	if x != nil && x.ExcludeDlc != nil {
		return *x.ExcludeDlc
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetExcludeSoundtracks() bool {
	if x != nil && x.ExcludeSoundtracks != nil {
		return *x.ExcludeSoundtracks
	}
	return false
}

func (x *CStoreDiscoveryQueueSettings) GetFeaturedTagids() []uint32 {
	if x != nil {
		return x.FeaturedTagids
	}
	return nil
}

type CStore_GetDiscoveryQueue_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueType             *EStoreDiscoveryQueueType     `protobuf:"varint,1,opt,name=queue_type,json=queueType,enum=EStoreDiscoveryQueueType,def=0" json:"queue_type,omitempty"`
	CountryCode           *string                       `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	RebuildQueue          *bool                         `protobuf:"varint,3,opt,name=rebuild_queue,json=rebuildQueue" json:"rebuild_queue,omitempty"`
	SettingsChanged       *bool                         `protobuf:"varint,4,opt,name=settings_changed,json=settingsChanged" json:"settings_changed,omitempty"`
	Settings              *CStoreDiscoveryQueueSettings `protobuf:"bytes,5,opt,name=settings" json:"settings,omitempty"`
	RebuildQueueIfStale   *bool                         `protobuf:"varint,6,opt,name=rebuild_queue_if_stale,json=rebuildQueueIfStale" json:"rebuild_queue_if_stale,omitempty"`
	IgnoreUserPreferences *bool                         `protobuf:"varint,8,opt,name=ignore_user_preferences,json=ignoreUserPreferences" json:"ignore_user_preferences,omitempty"`
	NoExperimentalResults *bool                         `protobuf:"varint,9,opt,name=no_experimental_results,json=noExperimentalResults" json:"no_experimental_results,omitempty"`
	ExperimentalCohort    *uint32                       `protobuf:"varint,10,opt,name=experimental_cohort,json=experimentalCohort" json:"experimental_cohort,omitempty"`
	DebugGetSolrQuery     *bool                         `protobuf:"varint,11,opt,name=debug_get_solr_query,json=debugGetSolrQuery" json:"debug_get_solr_query,omitempty"`
}

// Default values for CStore_GetDiscoveryQueue_Request fields.
const (
	Default_CStore_GetDiscoveryQueue_Request_QueueType = EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeNew
)

func (x *CStore_GetDiscoveryQueue_Request) Reset() {
	*x = CStore_GetDiscoveryQueue_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetDiscoveryQueue_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetDiscoveryQueue_Request) ProtoMessage() {}

func (x *CStore_GetDiscoveryQueue_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetDiscoveryQueue_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetDiscoveryQueue_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{8}
}

func (x *CStore_GetDiscoveryQueue_Request) GetQueueType() EStoreDiscoveryQueueType {
	if x != nil && x.QueueType != nil {
		return *x.QueueType
	}
	return Default_CStore_GetDiscoveryQueue_Request_QueueType
}

func (x *CStore_GetDiscoveryQueue_Request) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CStore_GetDiscoveryQueue_Request) GetRebuildQueue() bool {
	if x != nil && x.RebuildQueue != nil {
		return *x.RebuildQueue
	}
	return false
}

func (x *CStore_GetDiscoveryQueue_Request) GetSettingsChanged() bool {
	if x != nil && x.SettingsChanged != nil {
		return *x.SettingsChanged
	}
	return false
}

func (x *CStore_GetDiscoveryQueue_Request) GetSettings() *CStoreDiscoveryQueueSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CStore_GetDiscoveryQueue_Request) GetRebuildQueueIfStale() bool {
	if x != nil && x.RebuildQueueIfStale != nil {
		return *x.RebuildQueueIfStale
	}
	return false
}

func (x *CStore_GetDiscoveryQueue_Request) GetIgnoreUserPreferences() bool {
	if x != nil && x.IgnoreUserPreferences != nil {
		return *x.IgnoreUserPreferences
	}
	return false
}

func (x *CStore_GetDiscoveryQueue_Request) GetNoExperimentalResults() bool {
	if x != nil && x.NoExperimentalResults != nil {
		return *x.NoExperimentalResults
	}
	return false
}

func (x *CStore_GetDiscoveryQueue_Request) GetExperimentalCohort() uint32 {
	if x != nil && x.ExperimentalCohort != nil {
		return *x.ExperimentalCohort
	}
	return 0
}

func (x *CStore_GetDiscoveryQueue_Request) GetDebugGetSolrQuery() bool {
	if x != nil && x.DebugGetSolrQuery != nil {
		return *x.DebugGetSolrQuery
	}
	return false
}

type CStore_GetDiscoveryQueue_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids             []uint32                      `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
	CountryCode        *string                       `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Settings           *CStoreDiscoveryQueueSettings `protobuf:"bytes,3,opt,name=settings" json:"settings,omitempty"`
	Skipped            *int32                        `protobuf:"varint,4,opt,name=skipped" json:"skipped,omitempty"`
	Exhausted          *bool                         `protobuf:"varint,5,opt,name=exhausted" json:"exhausted,omitempty"`
	ExperimentalCohort *uint32                       `protobuf:"varint,6,opt,name=experimental_cohort,json=experimentalCohort" json:"experimental_cohort,omitempty"`
	DebugSolrQuery     *string                       `protobuf:"bytes,7,opt,name=debug_solr_query,json=debugSolrQuery" json:"debug_solr_query,omitempty"`
}

func (x *CStore_GetDiscoveryQueue_Response) Reset() {
	*x = CStore_GetDiscoveryQueue_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetDiscoveryQueue_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetDiscoveryQueue_Response) ProtoMessage() {}

func (x *CStore_GetDiscoveryQueue_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetDiscoveryQueue_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetDiscoveryQueue_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{9}
}

func (x *CStore_GetDiscoveryQueue_Response) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CStore_GetDiscoveryQueue_Response) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CStore_GetDiscoveryQueue_Response) GetSettings() *CStoreDiscoveryQueueSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CStore_GetDiscoveryQueue_Response) GetSkipped() int32 {
	if x != nil && x.Skipped != nil {
		return *x.Skipped
	}
	return 0
}

func (x *CStore_GetDiscoveryQueue_Response) GetExhausted() bool {
	if x != nil && x.Exhausted != nil {
		return *x.Exhausted
	}
	return false
}

func (x *CStore_GetDiscoveryQueue_Response) GetExperimentalCohort() uint32 {
	if x != nil && x.ExperimentalCohort != nil {
		return *x.ExperimentalCohort
	}
	return 0
}

func (x *CStore_GetDiscoveryQueue_Response) GetDebugSolrQuery() string {
	if x != nil && x.DebugSolrQuery != nil {
		return *x.DebugSolrQuery
	}
	return ""
}

type CStore_GetDiscoveryQueueSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueType *EStoreDiscoveryQueueType `protobuf:"varint,1,opt,name=queue_type,json=queueType,enum=EStoreDiscoveryQueueType,def=0" json:"queue_type,omitempty"`
}

// Default values for CStore_GetDiscoveryQueueSettings_Request fields.
const (
	Default_CStore_GetDiscoveryQueueSettings_Request_QueueType = EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeNew
)

func (x *CStore_GetDiscoveryQueueSettings_Request) Reset() {
	*x = CStore_GetDiscoveryQueueSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetDiscoveryQueueSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetDiscoveryQueueSettings_Request) ProtoMessage() {}

func (x *CStore_GetDiscoveryQueueSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetDiscoveryQueueSettings_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetDiscoveryQueueSettings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{10}
}

func (x *CStore_GetDiscoveryQueueSettings_Request) GetQueueType() EStoreDiscoveryQueueType {
	if x != nil && x.QueueType != nil {
		return *x.QueueType
	}
	return Default_CStore_GetDiscoveryQueueSettings_Request_QueueType
}

type CStore_GetDiscoveryQueueSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode *string                       `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Settings    *CStoreDiscoveryQueueSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (x *CStore_GetDiscoveryQueueSettings_Response) Reset() {
	*x = CStore_GetDiscoveryQueueSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetDiscoveryQueueSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetDiscoveryQueueSettings_Response) ProtoMessage() {}

func (x *CStore_GetDiscoveryQueueSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetDiscoveryQueueSettings_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetDiscoveryQueueSettings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{11}
}

func (x *CStore_GetDiscoveryQueueSettings_Response) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CStore_GetDiscoveryQueueSettings_Response) GetSettings() *CStoreDiscoveryQueueSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CStore_SkipDiscoveryQueueItem_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueType *EStoreDiscoveryQueueType `protobuf:"varint,1,opt,name=queue_type,json=queueType,enum=EStoreDiscoveryQueueType,def=0" json:"queue_type,omitempty"`
	Appid     *uint32                   `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

// Default values for CStore_SkipDiscoveryQueueItem_Request fields.
const (
	Default_CStore_SkipDiscoveryQueueItem_Request_QueueType = EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeNew
)

func (x *CStore_SkipDiscoveryQueueItem_Request) Reset() {
	*x = CStore_SkipDiscoveryQueueItem_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_SkipDiscoveryQueueItem_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_SkipDiscoveryQueueItem_Request) ProtoMessage() {}

func (x *CStore_SkipDiscoveryQueueItem_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_SkipDiscoveryQueueItem_Request.ProtoReflect.Descriptor instead.
func (*CStore_SkipDiscoveryQueueItem_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{12}
}

func (x *CStore_SkipDiscoveryQueueItem_Request) GetQueueType() EStoreDiscoveryQueueType {
	if x != nil && x.QueueType != nil {
		return *x.QueueType
	}
	return Default_CStore_SkipDiscoveryQueueItem_Request_QueueType
}

func (x *CStore_SkipDiscoveryQueueItem_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CStore_SkipDiscoveryQueueItem_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStore_SkipDiscoveryQueueItem_Response) Reset() {
	*x = CStore_SkipDiscoveryQueueItem_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_SkipDiscoveryQueueItem_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_SkipDiscoveryQueueItem_Response) ProtoMessage() {}

func (x *CStore_SkipDiscoveryQueueItem_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_SkipDiscoveryQueueItem_Response.ProtoReflect.Descriptor instead.
func (*CStore_SkipDiscoveryQueueItem_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{13}
}

type CStore_GetUserGameInterestState_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	StoreAppid *uint32 `protobuf:"varint,2,opt,name=store_appid,json=storeAppid" json:"store_appid,omitempty"`
	BetaAppid  *uint32 `protobuf:"varint,3,opt,name=beta_appid,json=betaAppid" json:"beta_appid,omitempty"`
}

func (x *CStore_GetUserGameInterestState_Request) Reset() {
	*x = CStore_GetUserGameInterestState_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetUserGameInterestState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetUserGameInterestState_Request) ProtoMessage() {}

func (x *CStore_GetUserGameInterestState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetUserGameInterestState_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetUserGameInterestState_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{14}
}

func (x *CStore_GetUserGameInterestState_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStore_GetUserGameInterestState_Request) GetStoreAppid() uint32 {
	if x != nil && x.StoreAppid != nil {
		return *x.StoreAppid
	}
	return 0
}

func (x *CStore_GetUserGameInterestState_Request) GetBetaAppid() uint32 {
	if x != nil && x.BetaAppid != nil {
		return *x.BetaAppid
	}
	return 0
}

type CStore_GetUserGameInterestState_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owned               *bool                                               `protobuf:"varint,1,opt,name=owned" json:"owned,omitempty"`
	Wishlist            *bool                                               `protobuf:"varint,2,opt,name=wishlist" json:"wishlist,omitempty"`
	Ignored             *bool                                               `protobuf:"varint,3,opt,name=ignored" json:"ignored,omitempty"`
	Following           *bool                                               `protobuf:"varint,4,opt,name=following" json:"following,omitempty"`
	InQueues            []EStoreDiscoveryQueueType                          `protobuf:"varint,5,rep,name=in_queues,json=inQueues,enum=EStoreDiscoveryQueueType" json:"in_queues,omitempty"`
	QueuesWithSkip      []EStoreDiscoveryQueueType                          `protobuf:"varint,6,rep,name=queues_with_skip,json=queuesWithSkip,enum=EStoreDiscoveryQueueType" json:"queues_with_skip,omitempty"`
	QueueItemsRemaining []int32                                             `protobuf:"varint,7,rep,name=queue_items_remaining,json=queueItemsRemaining" json:"queue_items_remaining,omitempty"`
	QueueItemsNextAppid []uint32                                            `protobuf:"varint,8,rep,name=queue_items_next_appid,json=queueItemsNextAppid" json:"queue_items_next_appid,omitempty"`
	TemporarilyOwned    *bool                                               `protobuf:"varint,9,opt,name=temporarily_owned,json=temporarilyOwned" json:"temporarily_owned,omitempty"`
	Queues              []*CStore_GetUserGameInterestState_Response_InQueue `protobuf:"bytes,10,rep,name=queues" json:"queues,omitempty"`
	IgnoredReason       *int32                                              `protobuf:"varint,11,opt,name=ignored_reason,json=ignoredReason" json:"ignored_reason,omitempty"`
	BetaStatus          *EPlaytestStatus                                    `protobuf:"varint,12,opt,name=beta_status,json=betaStatus,enum=EPlaytestStatus,def=0" json:"beta_status,omitempty"`
}

// Default values for CStore_GetUserGameInterestState_Response fields.
const (
	Default_CStore_GetUserGameInterestState_Response_BetaStatus = EPlaytestStatus_k_ETesterStatusNone
)

func (x *CStore_GetUserGameInterestState_Response) Reset() {
	*x = CStore_GetUserGameInterestState_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetUserGameInterestState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetUserGameInterestState_Response) ProtoMessage() {}

func (x *CStore_GetUserGameInterestState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetUserGameInterestState_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetUserGameInterestState_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{15}
}

func (x *CStore_GetUserGameInterestState_Response) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

func (x *CStore_GetUserGameInterestState_Response) GetWishlist() bool {
	if x != nil && x.Wishlist != nil {
		return *x.Wishlist
	}
	return false
}

func (x *CStore_GetUserGameInterestState_Response) GetIgnored() bool {
	if x != nil && x.Ignored != nil {
		return *x.Ignored
	}
	return false
}

func (x *CStore_GetUserGameInterestState_Response) GetFollowing() bool {
	if x != nil && x.Following != nil {
		return *x.Following
	}
	return false
}

func (x *CStore_GetUserGameInterestState_Response) GetInQueues() []EStoreDiscoveryQueueType {
	if x != nil {
		return x.InQueues
	}
	return nil
}

func (x *CStore_GetUserGameInterestState_Response) GetQueuesWithSkip() []EStoreDiscoveryQueueType {
	if x != nil {
		return x.QueuesWithSkip
	}
	return nil
}

func (x *CStore_GetUserGameInterestState_Response) GetQueueItemsRemaining() []int32 {
	if x != nil {
		return x.QueueItemsRemaining
	}
	return nil
}

func (x *CStore_GetUserGameInterestState_Response) GetQueueItemsNextAppid() []uint32 {
	if x != nil {
		return x.QueueItemsNextAppid
	}
	return nil
}

func (x *CStore_GetUserGameInterestState_Response) GetTemporarilyOwned() bool {
	if x != nil && x.TemporarilyOwned != nil {
		return *x.TemporarilyOwned
	}
	return false
}

func (x *CStore_GetUserGameInterestState_Response) GetQueues() []*CStore_GetUserGameInterestState_Response_InQueue {
	if x != nil {
		return x.Queues
	}
	return nil
}

func (x *CStore_GetUserGameInterestState_Response) GetIgnoredReason() int32 {
	if x != nil && x.IgnoredReason != nil {
		return *x.IgnoredReason
	}
	return 0
}

func (x *CStore_GetUserGameInterestState_Response) GetBetaStatus() EPlaytestStatus {
	if x != nil && x.BetaStatus != nil {
		return *x.BetaStatus
	}
	return Default_CStore_GetUserGameInterestState_Response_BetaStatus
}

type CStore_GetStorePreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStore_GetStorePreferences_Request) Reset() {
	*x = CStore_GetStorePreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetStorePreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetStorePreferences_Request) ProtoMessage() {}

func (x *CStore_GetStorePreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetStorePreferences_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetStorePreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{16}
}

type CStore_UserPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryLanguage                              *int32                          `protobuf:"varint,1,opt,name=primary_language,json=primaryLanguage" json:"primary_language,omitempty"`
	SecondaryLanguages                           *uint32                         `protobuf:"varint,2,opt,name=secondary_languages,json=secondaryLanguages" json:"secondary_languages,omitempty"`
	PlatformWindows                              *bool                           `protobuf:"varint,3,opt,name=platform_windows,json=platformWindows" json:"platform_windows,omitempty"`
	PlatformMac                                  *bool                           `protobuf:"varint,4,opt,name=platform_mac,json=platformMac" json:"platform_mac,omitempty"`
	PlatformLinux                                *bool                           `protobuf:"varint,5,opt,name=platform_linux,json=platformLinux" json:"platform_linux,omitempty"`
	HideAdultContentViolence                     *bool                           `protobuf:"varint,6,opt,name=hide_adult_content_violence,json=hideAdultContentViolence" json:"hide_adult_content_violence,omitempty"`
	HideAdultContentSex                          *bool                           `protobuf:"varint,7,opt,name=hide_adult_content_sex,json=hideAdultContentSex" json:"hide_adult_content_sex,omitempty"`
	TimestampUpdated                             *uint32                         `protobuf:"varint,8,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
	HideStoreBroadcast                           *bool                           `protobuf:"varint,9,opt,name=hide_store_broadcast,json=hideStoreBroadcast" json:"hide_store_broadcast,omitempty"`
	ReviewScorePreference                        *EUserReviewScorePreference     `protobuf:"varint,10,opt,name=review_score_preference,json=reviewScorePreference,enum=EUserReviewScorePreference,def=0" json:"review_score_preference,omitempty"`
	TimestampContentDescriptorPreferencesUpdated *int32                          `protobuf:"varint,11,opt,name=timestamp_content_descriptor_preferences_updated,json=timestampContentDescriptorPreferencesUpdated" json:"timestamp_content_descriptor_preferences_updated,omitempty"`
	ProvideDeckFeedback                          *EProvideDeckFeedbackPreference `protobuf:"varint,12,opt,name=provide_deck_feedback,json=provideDeckFeedback,enum=EProvideDeckFeedbackPreference,def=0" json:"provide_deck_feedback,omitempty"`
}

// Default values for CStore_UserPreferences fields.
const (
	Default_CStore_UserPreferences_ReviewScorePreference = EUserReviewScorePreference_k_EUserReviewScorePreference_Unset
	Default_CStore_UserPreferences_ProvideDeckFeedback   = EProvideDeckFeedbackPreference_k_EProvideDeckFeedbackPreference_Unset
)

func (x *CStore_UserPreferences) Reset() {
	*x = CStore_UserPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserPreferences) ProtoMessage() {}

func (x *CStore_UserPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserPreferences.ProtoReflect.Descriptor instead.
func (*CStore_UserPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{17}
}

func (x *CStore_UserPreferences) GetPrimaryLanguage() int32 {
	if x != nil && x.PrimaryLanguage != nil {
		return *x.PrimaryLanguage
	}
	return 0
}

func (x *CStore_UserPreferences) GetSecondaryLanguages() uint32 {
	if x != nil && x.SecondaryLanguages != nil {
		return *x.SecondaryLanguages
	}
	return 0
}

func (x *CStore_UserPreferences) GetPlatformWindows() bool {
	if x != nil && x.PlatformWindows != nil {
		return *x.PlatformWindows
	}
	return false
}

func (x *CStore_UserPreferences) GetPlatformMac() bool {
	if x != nil && x.PlatformMac != nil {
		return *x.PlatformMac
	}
	return false
}

func (x *CStore_UserPreferences) GetPlatformLinux() bool {
	if x != nil && x.PlatformLinux != nil {
		return *x.PlatformLinux
	}
	return false
}

func (x *CStore_UserPreferences) GetHideAdultContentViolence() bool {
	if x != nil && x.HideAdultContentViolence != nil {
		return *x.HideAdultContentViolence
	}
	return false
}

func (x *CStore_UserPreferences) GetHideAdultContentSex() bool {
	if x != nil && x.HideAdultContentSex != nil {
		return *x.HideAdultContentSex
	}
	return false
}

func (x *CStore_UserPreferences) GetTimestampUpdated() uint32 {
	if x != nil && x.TimestampUpdated != nil {
		return *x.TimestampUpdated
	}
	return 0
}

func (x *CStore_UserPreferences) GetHideStoreBroadcast() bool {
	if x != nil && x.HideStoreBroadcast != nil {
		return *x.HideStoreBroadcast
	}
	return false
}

func (x *CStore_UserPreferences) GetReviewScorePreference() EUserReviewScorePreference {
	if x != nil && x.ReviewScorePreference != nil {
		return *x.ReviewScorePreference
	}
	return Default_CStore_UserPreferences_ReviewScorePreference
}

func (x *CStore_UserPreferences) GetTimestampContentDescriptorPreferencesUpdated() int32 {
	if x != nil && x.TimestampContentDescriptorPreferencesUpdated != nil {
		return *x.TimestampContentDescriptorPreferencesUpdated
	}
	return 0
}

func (x *CStore_UserPreferences) GetProvideDeckFeedback() EProvideDeckFeedbackPreference {
	if x != nil && x.ProvideDeckFeedback != nil {
		return *x.ProvideDeckFeedback
	}
	return Default_CStore_UserPreferences_ProvideDeckFeedback
}

type CStore_UserTagPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagsToExclude []*CStore_UserTagPreferences_Tag `protobuf:"bytes,1,rep,name=tags_to_exclude,json=tagsToExclude" json:"tags_to_exclude,omitempty"`
}

func (x *CStore_UserTagPreferences) Reset() {
	*x = CStore_UserTagPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserTagPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserTagPreferences) ProtoMessage() {}

func (x *CStore_UserTagPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserTagPreferences.ProtoReflect.Descriptor instead.
func (*CStore_UserTagPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{18}
}

func (x *CStore_UserTagPreferences) GetTagsToExclude() []*CStore_UserTagPreferences_Tag {
	if x != nil {
		return x.TagsToExclude
	}
	return nil
}

type CStore_UserContentDescriptorPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentDescriptorsToExclude []*CStore_UserContentDescriptorPreferences_ContentDescriptor `protobuf:"bytes,1,rep,name=content_descriptors_to_exclude,json=contentDescriptorsToExclude" json:"content_descriptors_to_exclude,omitempty"`
}

func (x *CStore_UserContentDescriptorPreferences) Reset() {
	*x = CStore_UserContentDescriptorPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserContentDescriptorPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserContentDescriptorPreferences) ProtoMessage() {}

func (x *CStore_UserContentDescriptorPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserContentDescriptorPreferences.ProtoReflect.Descriptor instead.
func (*CStore_UserContentDescriptorPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{19}
}

func (x *CStore_UserContentDescriptorPreferences) GetContentDescriptorsToExclude() []*CStore_UserContentDescriptorPreferences_ContentDescriptor {
	if x != nil {
		return x.ContentDescriptorsToExclude
	}
	return nil
}

type CStore_GetStorePreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences                  *CStore_UserPreferences                  `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	TagPreferences               *CStore_UserTagPreferences               `protobuf:"bytes,2,opt,name=tag_preferences,json=tagPreferences" json:"tag_preferences,omitempty"`
	ContentDescriptorPreferences *CStore_UserContentDescriptorPreferences `protobuf:"bytes,3,opt,name=content_descriptor_preferences,json=contentDescriptorPreferences" json:"content_descriptor_preferences,omitempty"`
}

func (x *CStore_GetStorePreferences_Response) Reset() {
	*x = CStore_GetStorePreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetStorePreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetStorePreferences_Response) ProtoMessage() {}

func (x *CStore_GetStorePreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetStorePreferences_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetStorePreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{20}
}

func (x *CStore_GetStorePreferences_Response) GetPreferences() *CStore_UserPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *CStore_GetStorePreferences_Response) GetTagPreferences() *CStore_UserTagPreferences {
	if x != nil {
		return x.TagPreferences
	}
	return nil
}

func (x *CStore_GetStorePreferences_Response) GetContentDescriptorPreferences() *CStore_UserContentDescriptorPreferences {
	if x != nil {
		return x.ContentDescriptorPreferences
	}
	return nil
}

type CStore_GetTrendingAppsAmongFriends_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumApps       *uint32 `protobuf:"varint,1,opt,name=num_apps,json=numApps" json:"num_apps,omitempty"`
	NumTopFriends *uint32 `protobuf:"varint,2,opt,name=num_top_friends,json=numTopFriends" json:"num_top_friends,omitempty"`
}

func (x *CStore_GetTrendingAppsAmongFriends_Request) Reset() {
	*x = CStore_GetTrendingAppsAmongFriends_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetTrendingAppsAmongFriends_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetTrendingAppsAmongFriends_Request) ProtoMessage() {}

func (x *CStore_GetTrendingAppsAmongFriends_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetTrendingAppsAmongFriends_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetTrendingAppsAmongFriends_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{21}
}

func (x *CStore_GetTrendingAppsAmongFriends_Request) GetNumApps() uint32 {
	if x != nil && x.NumApps != nil {
		return *x.NumApps
	}
	return 0
}

func (x *CStore_GetTrendingAppsAmongFriends_Request) GetNumTopFriends() uint32 {
	if x != nil && x.NumTopFriends != nil {
		return *x.NumTopFriends
	}
	return 0
}

type CStore_GetTrendingAppsAmongFriends_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrendingApps []*CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData `protobuf:"bytes,1,rep,name=trending_apps,json=trendingApps" json:"trending_apps,omitempty"`
}

func (x *CStore_GetTrendingAppsAmongFriends_Response) Reset() {
	*x = CStore_GetTrendingAppsAmongFriends_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetTrendingAppsAmongFriends_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetTrendingAppsAmongFriends_Response) ProtoMessage() {}

func (x *CStore_GetTrendingAppsAmongFriends_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetTrendingAppsAmongFriends_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetTrendingAppsAmongFriends_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{22}
}

func (x *CStore_GetTrendingAppsAmongFriends_Response) GetTrendingApps() []*CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData {
	if x != nil {
		return x.TrendingApps
	}
	return nil
}

type CSteamDeckCompatibility_SetFeedback_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *uint32                          `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Feedback *ESteamDeckCompatibilityFeedback `protobuf:"varint,2,opt,name=feedback,enum=ESteamDeckCompatibilityFeedback,def=0" json:"feedback,omitempty"`
}

// Default values for CSteamDeckCompatibility_SetFeedback_Request fields.
const (
	Default_CSteamDeckCompatibility_SetFeedback_Request_Feedback = ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Unset
)

func (x *CSteamDeckCompatibility_SetFeedback_Request) Reset() {
	*x = CSteamDeckCompatibility_SetFeedback_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamDeckCompatibility_SetFeedback_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamDeckCompatibility_SetFeedback_Request) ProtoMessage() {}

func (x *CSteamDeckCompatibility_SetFeedback_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamDeckCompatibility_SetFeedback_Request.ProtoReflect.Descriptor instead.
func (*CSteamDeckCompatibility_SetFeedback_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{23}
}

func (x *CSteamDeckCompatibility_SetFeedback_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamDeckCompatibility_SetFeedback_Request) GetFeedback() ESteamDeckCompatibilityFeedback {
	if x != nil && x.Feedback != nil {
		return *x.Feedback
	}
	return Default_CSteamDeckCompatibility_SetFeedback_Request_Feedback
}

type CSteamDeckCompatibility_SetFeedback_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamDeckCompatibility_SetFeedback_Response) Reset() {
	*x = CSteamDeckCompatibility_SetFeedback_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamDeckCompatibility_SetFeedback_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamDeckCompatibility_SetFeedback_Response) ProtoMessage() {}

func (x *CSteamDeckCompatibility_SetFeedback_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamDeckCompatibility_SetFeedback_Response.ProtoReflect.Descriptor instead.
func (*CSteamDeckCompatibility_SetFeedback_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{24}
}

type CSteamDeckCompatibility_ShouldPrompt_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CSteamDeckCompatibility_ShouldPrompt_Request) Reset() {
	*x = CSteamDeckCompatibility_ShouldPrompt_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamDeckCompatibility_ShouldPrompt_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamDeckCompatibility_ShouldPrompt_Request) ProtoMessage() {}

func (x *CSteamDeckCompatibility_ShouldPrompt_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamDeckCompatibility_ShouldPrompt_Request.ProtoReflect.Descriptor instead.
func (*CSteamDeckCompatibility_ShouldPrompt_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{25}
}

func (x *CSteamDeckCompatibility_ShouldPrompt_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSteamDeckCompatibility_ShouldPrompt_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt           *bool                            `protobuf:"varint,1,opt,name=prompt" json:"prompt,omitempty"`
	FeedbackEligible *bool                            `protobuf:"varint,2,opt,name=feedback_eligible,json=feedbackEligible" json:"feedback_eligible,omitempty"`
	ExistingFeedback *ESteamDeckCompatibilityFeedback `protobuf:"varint,3,opt,name=existing_feedback,json=existingFeedback,enum=ESteamDeckCompatibilityFeedback,def=0" json:"existing_feedback,omitempty"`
}

// Default values for CSteamDeckCompatibility_ShouldPrompt_Response fields.
const (
	Default_CSteamDeckCompatibility_ShouldPrompt_Response_ExistingFeedback = ESteamDeckCompatibilityFeedback_k_ESteamDeckCompatibilityFeedback_Unset
)

func (x *CSteamDeckCompatibility_ShouldPrompt_Response) Reset() {
	*x = CSteamDeckCompatibility_ShouldPrompt_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamDeckCompatibility_ShouldPrompt_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamDeckCompatibility_ShouldPrompt_Response) ProtoMessage() {}

func (x *CSteamDeckCompatibility_ShouldPrompt_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamDeckCompatibility_ShouldPrompt_Response.ProtoReflect.Descriptor instead.
func (*CSteamDeckCompatibility_ShouldPrompt_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{26}
}

func (x *CSteamDeckCompatibility_ShouldPrompt_Response) GetPrompt() bool {
	if x != nil && x.Prompt != nil {
		return *x.Prompt
	}
	return false
}

func (x *CSteamDeckCompatibility_ShouldPrompt_Response) GetFeedbackEligible() bool {
	if x != nil && x.FeedbackEligible != nil {
		return *x.FeedbackEligible
	}
	return false
}

func (x *CSteamDeckCompatibility_ShouldPrompt_Response) GetExistingFeedback() ESteamDeckCompatibilityFeedback {
	if x != nil && x.ExistingFeedback != nil {
		return *x.ExistingFeedback
	}
	return Default_CSteamDeckCompatibility_ShouldPrompt_Response_ExistingFeedback
}

type CStore_StorePreferencesChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences                  *CStore_UserPreferences                  `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	TagPreferences               *CStore_UserTagPreferences               `protobuf:"bytes,2,opt,name=tag_preferences,json=tagPreferences" json:"tag_preferences,omitempty"`
	ContentDescriptorPreferences *CStore_UserContentDescriptorPreferences `protobuf:"bytes,3,opt,name=content_descriptor_preferences,json=contentDescriptorPreferences" json:"content_descriptor_preferences,omitempty"`
}

func (x *CStore_StorePreferencesChanged_Notification) Reset() {
	*x = CStore_StorePreferencesChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_StorePreferencesChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_StorePreferencesChanged_Notification) ProtoMessage() {}

func (x *CStore_StorePreferencesChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_StorePreferencesChanged_Notification.ProtoReflect.Descriptor instead.
func (*CStore_StorePreferencesChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{27}
}

func (x *CStore_StorePreferencesChanged_Notification) GetPreferences() *CStore_UserPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *CStore_StorePreferencesChanged_Notification) GetTagPreferences() *CStore_UserTagPreferences {
	if x != nil {
		return x.TagPreferences
	}
	return nil
}

func (x *CStore_StorePreferencesChanged_Notification) GetContentDescriptorPreferences() *CStore_UserContentDescriptorPreferences {
	if x != nil {
		return x.ContentDescriptorPreferences
	}
	return nil
}

type CStore_PurchaseReceiptInfo_LineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid           *uint32 `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	Appid               *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	LineItemDescription *string `protobuf:"bytes,3,opt,name=line_item_description,json=lineItemDescription" json:"line_item_description,omitempty"`
}

func (x *CStore_PurchaseReceiptInfo_LineItem) Reset() {
	*x = CStore_PurchaseReceiptInfo_LineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_PurchaseReceiptInfo_LineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_PurchaseReceiptInfo_LineItem) ProtoMessage() {}

func (x *CStore_PurchaseReceiptInfo_LineItem) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_PurchaseReceiptInfo_LineItem.ProtoReflect.Descriptor instead.
func (*CStore_PurchaseReceiptInfo_LineItem) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CStore_PurchaseReceiptInfo_LineItem) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo_LineItem) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStore_PurchaseReceiptInfo_LineItem) GetLineItemDescription() string {
	if x != nil && x.LineItemDescription != nil {
		return *x.LineItemDescription
	}
	return ""
}

type CStore_GetMostPopularTags_Response_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tagid *uint32 `protobuf:"varint,1,opt,name=tagid" json:"tagid,omitempty"`
	Name  *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CStore_GetMostPopularTags_Response_Tag) Reset() {
	*x = CStore_GetMostPopularTags_Response_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetMostPopularTags_Response_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetMostPopularTags_Response_Tag) ProtoMessage() {}

func (x *CStore_GetMostPopularTags_Response_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetMostPopularTags_Response_Tag.ProtoReflect.Descriptor instead.
func (*CStore_GetMostPopularTags_Response_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CStore_GetMostPopularTags_Response_Tag) GetTagid() uint32 {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return 0
}

func (x *CStore_GetMostPopularTags_Response_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CStore_GetLocalizedNameForTags_Response_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tagid          *uint32 `protobuf:"varint,1,opt,name=tagid" json:"tagid,omitempty"`
	EnglishName    *string `protobuf:"bytes,2,opt,name=english_name,json=englishName" json:"english_name,omitempty"`
	Name           *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	NormalizedName *string `protobuf:"bytes,4,opt,name=normalized_name,json=normalizedName" json:"normalized_name,omitempty"`
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) Reset() {
	*x = CStore_GetLocalizedNameForTags_Response_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetLocalizedNameForTags_Response_Tag) ProtoMessage() {}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetLocalizedNameForTags_Response_Tag.ProtoReflect.Descriptor instead.
func (*CStore_GetLocalizedNameForTags_Response_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) GetTagid() uint32 {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return 0
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) GetEnglishName() string {
	if x != nil && x.EnglishName != nil {
		return *x.EnglishName
	}
	return ""
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) GetNormalizedName() string {
	if x != nil && x.NormalizedName != nil {
		return *x.NormalizedName
	}
	return ""
}

type CStore_GetUserGameInterestState_Response_InQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               *EStoreDiscoveryQueueType `protobuf:"varint,1,opt,name=type,enum=EStoreDiscoveryQueueType,def=0" json:"type,omitempty"`
	Skipped            *bool                     `protobuf:"varint,2,opt,name=skipped" json:"skipped,omitempty"`
	ItemsRemaining     *int32                    `protobuf:"varint,3,opt,name=items_remaining,json=itemsRemaining" json:"items_remaining,omitempty"`
	NextAppid          *uint32                   `protobuf:"varint,4,opt,name=next_appid,json=nextAppid" json:"next_appid,omitempty"`
	ExperimentalCohort *uint32                   `protobuf:"varint,5,opt,name=experimental_cohort,json=experimentalCohort" json:"experimental_cohort,omitempty"`
}

// Default values for CStore_GetUserGameInterestState_Response_InQueue fields.
const (
	Default_CStore_GetUserGameInterestState_Response_InQueue_Type = EStoreDiscoveryQueueType_k_EStoreDiscoveryQueueTypeNew
)

func (x *CStore_GetUserGameInterestState_Response_InQueue) Reset() {
	*x = CStore_GetUserGameInterestState_Response_InQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetUserGameInterestState_Response_InQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetUserGameInterestState_Response_InQueue) ProtoMessage() {}

func (x *CStore_GetUserGameInterestState_Response_InQueue) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetUserGameInterestState_Response_InQueue.ProtoReflect.Descriptor instead.
func (*CStore_GetUserGameInterestState_Response_InQueue) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CStore_GetUserGameInterestState_Response_InQueue) GetType() EStoreDiscoveryQueueType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CStore_GetUserGameInterestState_Response_InQueue_Type
}

func (x *CStore_GetUserGameInterestState_Response_InQueue) GetSkipped() bool {
	if x != nil && x.Skipped != nil {
		return *x.Skipped
	}
	return false
}

func (x *CStore_GetUserGameInterestState_Response_InQueue) GetItemsRemaining() int32 {
	if x != nil && x.ItemsRemaining != nil {
		return *x.ItemsRemaining
	}
	return 0
}

func (x *CStore_GetUserGameInterestState_Response_InQueue) GetNextAppid() uint32 {
	if x != nil && x.NextAppid != nil {
		return *x.NextAppid
	}
	return 0
}

func (x *CStore_GetUserGameInterestState_Response_InQueue) GetExperimentalCohort() uint32 {
	if x != nil && x.ExperimentalCohort != nil {
		return *x.ExperimentalCohort
	}
	return 0
}

type CStore_UserTagPreferences_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tagid          *uint32 `protobuf:"varint,1,opt,name=tagid" json:"tagid,omitempty"`
	Name           *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	TimestampAdded *uint32 `protobuf:"varint,3,opt,name=timestamp_added,json=timestampAdded" json:"timestamp_added,omitempty"`
}

func (x *CStore_UserTagPreferences_Tag) Reset() {
	*x = CStore_UserTagPreferences_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserTagPreferences_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserTagPreferences_Tag) ProtoMessage() {}

func (x *CStore_UserTagPreferences_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserTagPreferences_Tag.ProtoReflect.Descriptor instead.
func (*CStore_UserTagPreferences_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CStore_UserTagPreferences_Tag) GetTagid() uint32 {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return 0
}

func (x *CStore_UserTagPreferences_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CStore_UserTagPreferences_Tag) GetTimestampAdded() uint32 {
	if x != nil && x.TimestampAdded != nil {
		return *x.TimestampAdded
	}
	return 0
}

type CStore_UserContentDescriptorPreferences_ContentDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentDescriptorid *uint32 `protobuf:"varint,1,opt,name=content_descriptorid,json=contentDescriptorid" json:"content_descriptorid,omitempty"`
	TimestampAdded      *uint32 `protobuf:"varint,2,opt,name=timestamp_added,json=timestampAdded" json:"timestamp_added,omitempty"`
}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) Reset() {
	*x = CStore_UserContentDescriptorPreferences_ContentDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserContentDescriptorPreferences_ContentDescriptor) ProtoMessage() {}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserContentDescriptorPreferences_ContentDescriptor.ProtoReflect.Descriptor instead.
func (*CStore_UserContentDescriptorPreferences_ContentDescriptor) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) GetContentDescriptorid() uint32 {
	if x != nil && x.ContentDescriptorid != nil {
		return *x.ContentDescriptorid
	}
	return 0
}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) GetTimestampAdded() uint32 {
	if x != nil && x.TimestampAdded != nil {
		return *x.TimestampAdded
	}
	return 0
}

type CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid              *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	SteamidsTopFriends []uint64 `protobuf:"varint,2,rep,name=steamids_top_friends,json=steamidsTopFriends" json:"steamids_top_friends,omitempty"`
	TotalFriends       *uint32  `protobuf:"varint,3,opt,name=total_friends,json=totalFriends" json:"total_friends,omitempty"`
}

func (x *CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData) Reset() {
	*x = CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_store_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData) ProtoMessage() {}

func (x *CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_store_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData.ProtoReflect.Descriptor instead.
func (*CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData) Descriptor() ([]byte, []int) {
	return file_steammessages_store_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData) GetSteamidsTopFriends() []uint64 {
	if x != nil {
		return x.SteamidsTopFriends
	}
	return nil
}

func (x *CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData) GetTotalFriends() uint32 {
	if x != nil && x.TotalFriends != nil {
		return *x.TotalFriends
	}
	return 0
}

var File_steammessages_store_proto protoreflect.FileDescriptor

var file_steammessages_store_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x02, 0x0a, 0x1c, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x44, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0x82, 0xb5, 0x18, 0x36, 0x4b, 0x65, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x6f, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x27, 0x73, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x45, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x77, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x54, 0x72, 0x75, 0x65,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22,
	0xae, 0x06, 0x0a, 0x1a, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x72, 0x0a, 0x08,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf3, 0x01, 0x0a, 0x1d, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x44, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x17, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x21, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x2f, 0x0a, 0x03, 0x54,
	0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x26,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x27, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e,
	0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5e, 0x82, 0xb5, 0x18, 0x5a, 0x65, 0x6e, 0x67,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x63, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x68, 0x6f, 0x6d, 0x6f, 0x67,
	0x6c, 0x79, 0x70, 0x68, 0x73, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f,
	0x6d, 0x65, 0x20, 0x70, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x2e, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x05, 0x0a, 0x1c, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x73, 0x5f, 0x77,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x73, 0x57, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6f, 0x73, 0x4d, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x73, 0x4c, 0x69, 0x6e, 0x75,
	0x78, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x67, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27,
	0x44, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x6e, 0x79,
	0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x73,
	0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x69, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x61,
	0x72, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x6c, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x6c, 0x63, 0x12, 0x2f, 0x0a, 0x13,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x79, 0x0a,
	0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x50, 0x82, 0xb5, 0x18, 0x4c, 0x4d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x20, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x20, 0x28, 0x66, 0x6f,
	0x72, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x29, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x69, 0x64, 0x73, 0x22, 0xb0, 0x04, 0x0a, 0x20, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x66, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x6e, 0x6f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x72, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x6c, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xac, 0x02, 0x0a, 0x21,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x6f, 0x6c, 0x72, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x53, 0x6f, 0x6c, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x28, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x29, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x96, 0x01, 0x0a,
	0x25, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x53, 0x6b, 0x69, 0x70, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x65, 0x77, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x53, 0x6b, 0x69, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7f, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x74, 0x61, 0x41, 0x70, 0x70, 0x69, 0x64,
	0x22, 0xfc, 0x09, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x68, 0x61, 0x73, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x89, 0x01, 0x0a, 0x15, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x42, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x23, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x2d, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x20, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x13, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x7a, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74,
	0x20, 0x61, 0x70, 0x70, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x20, 0x2d, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x61, 0x73, 0x20,
	0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x70,
	0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x54,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x77, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c,
	0x79, 0x2c, 0x20, 0x65, 0x67, 0x20, 0x61, 0x20, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x6f,
	0x72, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x12, 0x49, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x0e, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x40, 0x82, 0xb5, 0x18, 0x3c, 0x54, 0x68, 0x65, 0x20, 0x45, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x70, 0x70, 0x52, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x45, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x13, 0x6b, 0x5f,
	0x45, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e,
	0x65, 0x42, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x20,
	0x69, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0xea, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x22,
	0x24, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9a, 0x06, 0x0a, 0x16, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x75,
	0x78, 0x12, 0x3d, 0x0a, 0x1b, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x68, 0x69, 0x64, 0x65, 0x41, 0x64, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x68, 0x69, 0x64, 0x65, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x17, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x15, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x66, 0x0a,
	0x30, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7b, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44,
	0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x22, 0xbd, 0x01, 0x0a, 0x19, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x0d, 0x74, 0x61, 0x67, 0x73, 0x54,
	0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0x58, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x61, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x22, 0x9b, 0x02, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x7f,
	0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x54, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a,
	0x6f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x22, 0x95, 0x02, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x2a, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x73, 0x41, 0x6d, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x54,
	0x6f, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x2b, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x73, 0x41, 0x6d, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x73, 0x41, 0x6d, 0x6f, 0x6e, 0x67, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x73, 0x1a, 0x7e, 0x0a, 0x0f,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x73, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x73, 0x54, 0x6f, 0x70,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0xaa, 0x01, 0x0a,
	0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x65, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x3a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x2c, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22,
	0xec, 0x01, 0x0a, 0x2d, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x3a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x10, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x9d,
	0x02, 0x0a, 0x2b, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x61, 0x67,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0e,
	0x74, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x6e,
	0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2a, 0xab,
	0x05, 0x0a, 0x18, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x77, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x4c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x05, 0x12,
	0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x57, 0x69, 0x73,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x53, 0x61, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x21, 0x0a,
	0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c, 0x43, 0x10, 0x07,
	0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c,
	0x43, 0x4f, 0x6e, 0x53, 0x61, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x2d,
	0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x10, 0x0a, 0x12, 0x2f, 0x0a,
	0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x53, 0x61, 0x6c, 0x65, 0x10, 0x0b, 0x12, 0x2e,
	0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x65, 0x6d, 0x6f, 0x73, 0x10, 0x0c, 0x12, 0x2c,
	0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c, 0x43, 0x4e,
	0x65, 0x77, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x10, 0x0d, 0x12, 0x2b, 0x0a, 0x27,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c, 0x43, 0x54, 0x6f, 0x70,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x41, 0x58, 0x10, 0x0f, 0x2a, 0x7e, 0x0a, 0x0f,
	0x45, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x54,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x54, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0xa0, 0x01, 0x0a,
	0x1a, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x65,
	0x74, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x10, 0x01,
	0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x6f, 0x6d, 0x62, 0x73, 0x10, 0x02, 0x32,
	0xc4, 0x0f, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x44, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x2e, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x44, 0x4b,
	0x65, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x44, 0x4b, 0x65,
	0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xb5, 0x18, 0x3d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x20, 0x43, 0x44, 0x20, 0x6b,
	0x65, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x92, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xb5, 0x18, 0x2f, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x61, 0x67, 0x73, 0x2c, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x2e, 0x12, 0x98, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x27,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x61, 0x67, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x99, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xb5, 0x18, 0x39,
	0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49,
	0x82, 0xb5, 0x18, 0x45, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x12, 0x90, 0x01, 0x0a, 0x16, 0x53, 0x6b,
	0x69, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x53, 0x6b,
	0x69, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x53, 0x6b, 0x69, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x53, 0x6b, 0x69, 0x70, 0x20,
	0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x12, 0xdd, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c,
	0x82, 0xb5, 0x18, 0x68, 0x47, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x27, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x2d, 0x20, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2c, 0x20, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x2c,
	0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x12, 0xaf, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4d, 0x82, 0xb5, 0x18, 0x49, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x20, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f,
	0x77, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x9d,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x73, 0x41, 0x6d, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x2b,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x73, 0x41, 0x6d, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x73, 0x41, 0x6d, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x47,
	0x65, 0x74, 0x20, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x70, 0x70, 0x73,
	0x20, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0xd5,
	0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xb5, 0x18, 0x58, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x20, 0x44, 0x65, 0x63, 0x6b, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x24, 0x53, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x2d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51,
	0x82, 0xb5, 0x18, 0x4d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x77, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x73,
	0x6b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x1a, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x32, 0xee, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x1a, 0x2b, 0x82, 0xb5, 0x18, 0x23,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0xc0, 0xb5, 0x18, 0x02, 0x42, 0x30, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x73, 0x74, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x90, 0x01, 0x01,
}

var (
	file_steammessages_store_proto_rawDescOnce sync.Once
	file_steammessages_store_proto_rawDescData = file_steammessages_store_proto_rawDesc
)

func file_steammessages_store_proto_rawDescGZIP() []byte {
	file_steammessages_store_proto_rawDescOnce.Do(func() {
		file_steammessages_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_store_proto_rawDescData)
	})
	return file_steammessages_store_proto_rawDescData
}

var file_steammessages_store_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_steammessages_store_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_steammessages_store_proto_goTypes = []interface{}{
	(EStoreDiscoveryQueueType)(0),                                       // 0: EStoreDiscoveryQueueType
	(EPlaytestStatus)(0),                                                // 1: EPlaytestStatus
	(EUserReviewScorePreference)(0),                                     // 2: EUserReviewScorePreference
	(*CStore_RegisterCDKey_Request)(nil),                                // 3: CStore_RegisterCDKey_Request
	(*CStore_PurchaseReceiptInfo)(nil),                                  // 4: CStore_PurchaseReceiptInfo
	(*CStore_RegisterCDKey_Response)(nil),                               // 5: CStore_RegisterCDKey_Response
	(*CStore_GetMostPopularTags_Request)(nil),                           // 6: CStore_GetMostPopularTags_Request
	(*CStore_GetMostPopularTags_Response)(nil),                          // 7: CStore_GetMostPopularTags_Response
	(*CStore_GetLocalizedNameForTags_Request)(nil),                      // 8: CStore_GetLocalizedNameForTags_Request
	(*CStore_GetLocalizedNameForTags_Response)(nil),                     // 9: CStore_GetLocalizedNameForTags_Response
	(*CStoreDiscoveryQueueSettings)(nil),                                // 10: CStoreDiscoveryQueueSettings
	(*CStore_GetDiscoveryQueue_Request)(nil),                            // 11: CStore_GetDiscoveryQueue_Request
	(*CStore_GetDiscoveryQueue_Response)(nil),                           // 12: CStore_GetDiscoveryQueue_Response
	(*CStore_GetDiscoveryQueueSettings_Request)(nil),                    // 13: CStore_GetDiscoveryQueueSettings_Request
	(*CStore_GetDiscoveryQueueSettings_Response)(nil),                   // 14: CStore_GetDiscoveryQueueSettings_Response
	(*CStore_SkipDiscoveryQueueItem_Request)(nil),                       // 15: CStore_SkipDiscoveryQueueItem_Request
	(*CStore_SkipDiscoveryQueueItem_Response)(nil),                      // 16: CStore_SkipDiscoveryQueueItem_Response
	(*CStore_GetUserGameInterestState_Request)(nil),                     // 17: CStore_GetUserGameInterestState_Request
	(*CStore_GetUserGameInterestState_Response)(nil),                    // 18: CStore_GetUserGameInterestState_Response
	(*CStore_GetStorePreferences_Request)(nil),                          // 19: CStore_GetStorePreferences_Request
	(*CStore_UserPreferences)(nil),                                      // 20: CStore_UserPreferences
	(*CStore_UserTagPreferences)(nil),                                   // 21: CStore_UserTagPreferences
	(*CStore_UserContentDescriptorPreferences)(nil),                     // 22: CStore_UserContentDescriptorPreferences
	(*CStore_GetStorePreferences_Response)(nil),                         // 23: CStore_GetStorePreferences_Response
	(*CStore_GetTrendingAppsAmongFriends_Request)(nil),                  // 24: CStore_GetTrendingAppsAmongFriends_Request
	(*CStore_GetTrendingAppsAmongFriends_Response)(nil),                 // 25: CStore_GetTrendingAppsAmongFriends_Response
	(*CSteamDeckCompatibility_SetFeedback_Request)(nil),                 // 26: CSteamDeckCompatibility_SetFeedback_Request
	(*CSteamDeckCompatibility_SetFeedback_Response)(nil),                // 27: CSteamDeckCompatibility_SetFeedback_Response
	(*CSteamDeckCompatibility_ShouldPrompt_Request)(nil),                // 28: CSteamDeckCompatibility_ShouldPrompt_Request
	(*CSteamDeckCompatibility_ShouldPrompt_Response)(nil),               // 29: CSteamDeckCompatibility_ShouldPrompt_Response
	(*CStore_StorePreferencesChanged_Notification)(nil),                 // 30: CStore_StorePreferencesChanged_Notification
	(*CStore_PurchaseReceiptInfo_LineItem)(nil),                         // 31: CStore_PurchaseReceiptInfo.LineItem
	(*CStore_GetMostPopularTags_Response_Tag)(nil),                      // 32: CStore_GetMostPopularTags_Response.Tag
	(*CStore_GetLocalizedNameForTags_Response_Tag)(nil),                 // 33: CStore_GetLocalizedNameForTags_Response.Tag
	(*CStore_GetUserGameInterestState_Response_InQueue)(nil),            // 34: CStore_GetUserGameInterestState_Response.InQueue
	(*CStore_UserTagPreferences_Tag)(nil),                               // 35: CStore_UserTagPreferences.Tag
	(*CStore_UserContentDescriptorPreferences_ContentDescriptor)(nil),   // 36: CStore_UserContentDescriptorPreferences.ContentDescriptor
	(*CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData)(nil), // 37: CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData
	(EProvideDeckFeedbackPreference)(0),                                 // 38: EProvideDeckFeedbackPreference
	(ESteamDeckCompatibilityFeedback)(0),                                // 39: ESteamDeckCompatibilityFeedback
	(*NoResponse)(nil),                                                  // 40: NoResponse
}
var file_steammessages_store_proto_depIdxs = []int32{
	31, // 0: CStore_PurchaseReceiptInfo.line_items:type_name -> CStore_PurchaseReceiptInfo.LineItem
	4,  // 1: CStore_RegisterCDKey_Response.purchase_receipt_info:type_name -> CStore_PurchaseReceiptInfo
	32, // 2: CStore_GetMostPopularTags_Response.tags:type_name -> CStore_GetMostPopularTags_Response.Tag
	33, // 3: CStore_GetLocalizedNameForTags_Response.tags:type_name -> CStore_GetLocalizedNameForTags_Response.Tag
	0,  // 4: CStore_GetDiscoveryQueue_Request.queue_type:type_name -> EStoreDiscoveryQueueType
	10, // 5: CStore_GetDiscoveryQueue_Request.settings:type_name -> CStoreDiscoveryQueueSettings
	10, // 6: CStore_GetDiscoveryQueue_Response.settings:type_name -> CStoreDiscoveryQueueSettings
	0,  // 7: CStore_GetDiscoveryQueueSettings_Request.queue_type:type_name -> EStoreDiscoveryQueueType
	10, // 8: CStore_GetDiscoveryQueueSettings_Response.settings:type_name -> CStoreDiscoveryQueueSettings
	0,  // 9: CStore_SkipDiscoveryQueueItem_Request.queue_type:type_name -> EStoreDiscoveryQueueType
	0,  // 10: CStore_GetUserGameInterestState_Response.in_queues:type_name -> EStoreDiscoveryQueueType
	0,  // 11: CStore_GetUserGameInterestState_Response.queues_with_skip:type_name -> EStoreDiscoveryQueueType
	34, // 12: CStore_GetUserGameInterestState_Response.queues:type_name -> CStore_GetUserGameInterestState_Response.InQueue
	1,  // 13: CStore_GetUserGameInterestState_Response.beta_status:type_name -> EPlaytestStatus
	2,  // 14: CStore_UserPreferences.review_score_preference:type_name -> EUserReviewScorePreference
	38, // 15: CStore_UserPreferences.provide_deck_feedback:type_name -> EProvideDeckFeedbackPreference
	35, // 16: CStore_UserTagPreferences.tags_to_exclude:type_name -> CStore_UserTagPreferences.Tag
	36, // 17: CStore_UserContentDescriptorPreferences.content_descriptors_to_exclude:type_name -> CStore_UserContentDescriptorPreferences.ContentDescriptor
	20, // 18: CStore_GetStorePreferences_Response.preferences:type_name -> CStore_UserPreferences
	21, // 19: CStore_GetStorePreferences_Response.tag_preferences:type_name -> CStore_UserTagPreferences
	22, // 20: CStore_GetStorePreferences_Response.content_descriptor_preferences:type_name -> CStore_UserContentDescriptorPreferences
	37, // 21: CStore_GetTrendingAppsAmongFriends_Response.trending_apps:type_name -> CStore_GetTrendingAppsAmongFriends_Response.TrendingAppData
	39, // 22: CSteamDeckCompatibility_SetFeedback_Request.feedback:type_name -> ESteamDeckCompatibilityFeedback
	39, // 23: CSteamDeckCompatibility_ShouldPrompt_Response.existing_feedback:type_name -> ESteamDeckCompatibilityFeedback
	20, // 24: CStore_StorePreferencesChanged_Notification.preferences:type_name -> CStore_UserPreferences
	21, // 25: CStore_StorePreferencesChanged_Notification.tag_preferences:type_name -> CStore_UserTagPreferences
	22, // 26: CStore_StorePreferencesChanged_Notification.content_descriptor_preferences:type_name -> CStore_UserContentDescriptorPreferences
	0,  // 27: CStore_GetUserGameInterestState_Response.InQueue.type:type_name -> EStoreDiscoveryQueueType
	3,  // 28: Store.RegisterCDKey:input_type -> CStore_RegisterCDKey_Request
	6,  // 29: Store.GetMostPopularTags:input_type -> CStore_GetMostPopularTags_Request
	8,  // 30: Store.GetLocalizedNameForTags:input_type -> CStore_GetLocalizedNameForTags_Request
	11, // 31: Store.GetDiscoveryQueue:input_type -> CStore_GetDiscoveryQueue_Request
	13, // 32: Store.GetDiscoveryQueueSettings:input_type -> CStore_GetDiscoveryQueueSettings_Request
	15, // 33: Store.SkipDiscoveryQueueItem:input_type -> CStore_SkipDiscoveryQueueItem_Request
	17, // 34: Store.GetUserGameInterestState:input_type -> CStore_GetUserGameInterestState_Request
	19, // 35: Store.GetStorePreferences:input_type -> CStore_GetStorePreferences_Request
	24, // 36: Store.GetTrendingAppsAmongFriends:input_type -> CStore_GetTrendingAppsAmongFriends_Request
	26, // 37: Store.SetCompatibilityFeedback:input_type -> CSteamDeckCompatibility_SetFeedback_Request
	28, // 38: Store.ShouldPromptForCompatibilityFeedback:input_type -> CSteamDeckCompatibility_ShouldPrompt_Request
	30, // 39: StoreClient.NotifyStorePreferencesChanged:input_type -> CStore_StorePreferencesChanged_Notification
	5,  // 40: Store.RegisterCDKey:output_type -> CStore_RegisterCDKey_Response
	7,  // 41: Store.GetMostPopularTags:output_type -> CStore_GetMostPopularTags_Response
	9,  // 42: Store.GetLocalizedNameForTags:output_type -> CStore_GetLocalizedNameForTags_Response
	12, // 43: Store.GetDiscoveryQueue:output_type -> CStore_GetDiscoveryQueue_Response
	14, // 44: Store.GetDiscoveryQueueSettings:output_type -> CStore_GetDiscoveryQueueSettings_Response
	16, // 45: Store.SkipDiscoveryQueueItem:output_type -> CStore_SkipDiscoveryQueueItem_Response
	18, // 46: Store.GetUserGameInterestState:output_type -> CStore_GetUserGameInterestState_Response
	23, // 47: Store.GetStorePreferences:output_type -> CStore_GetStorePreferences_Response
	25, // 48: Store.GetTrendingAppsAmongFriends:output_type -> CStore_GetTrendingAppsAmongFriends_Response
	27, // 49: Store.SetCompatibilityFeedback:output_type -> CSteamDeckCompatibility_SetFeedback_Response
	29, // 50: Store.ShouldPromptForCompatibilityFeedback:output_type -> CSteamDeckCompatibility_ShouldPrompt_Response
	40, // 51: StoreClient.NotifyStorePreferencesChanged:output_type -> NoResponse
	40, // [40:52] is the sub-list for method output_type
	28, // [28:40] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_steammessages_store_proto_init() }
func file_steammessages_store_proto_init() {
	if File_steammessages_store_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_proto_init()
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_RegisterCDKey_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_PurchaseReceiptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_RegisterCDKey_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetMostPopularTags_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetMostPopularTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetLocalizedNameForTags_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetLocalizedNameForTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreDiscoveryQueueSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetDiscoveryQueue_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetDiscoveryQueue_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetDiscoveryQueueSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetDiscoveryQueueSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_SkipDiscoveryQueueItem_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_SkipDiscoveryQueueItem_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetUserGameInterestState_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetUserGameInterestState_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetStorePreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserTagPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserContentDescriptorPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetStorePreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetTrendingAppsAmongFriends_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetTrendingAppsAmongFriends_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamDeckCompatibility_SetFeedback_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamDeckCompatibility_SetFeedback_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamDeckCompatibility_ShouldPrompt_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamDeckCompatibility_ShouldPrompt_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_StorePreferencesChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_PurchaseReceiptInfo_LineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetMostPopularTags_Response_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetLocalizedNameForTags_Response_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetUserGameInterestState_Response_InQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserTagPreferences_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserContentDescriptorPreferences_ContentDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_store_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetTrendingAppsAmongFriends_Response_TrendingAppData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_store_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_store_proto_goTypes,
		DependencyIndexes: file_steammessages_store_proto_depIdxs,
		EnumInfos:         file_steammessages_store_proto_enumTypes,
		MessageInfos:      file_steammessages_store_proto_msgTypes,
	}.Build()
	File_steammessages_store_proto = out.File
	file_steammessages_store_proto_rawDesc = nil
	file_steammessages_store_proto_goTypes = nil
	file_steammessages_store_proto_depIdxs = nil
}
