// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: steammessages_datapublisher.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CDataPublisher_ClientContentCorruptionReport_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Depotid         *uint32 `protobuf:"varint,2,opt,name=depotid" json:"depotid,omitempty"`
	DownloadSource  *string `protobuf:"bytes,3,opt,name=download_source,json=downloadSource" json:"download_source,omitempty"`
	Objectid        *string `protobuf:"bytes,4,opt,name=objectid" json:"objectid,omitempty"`
	Cellid          *uint32 `protobuf:"varint,5,opt,name=cellid" json:"cellid,omitempty"`
	IsManifest      *bool   `protobuf:"varint,6,opt,name=is_manifest,json=isManifest" json:"is_manifest,omitempty"`
	ObjectSize      *uint64 `protobuf:"varint,7,opt,name=object_size,json=objectSize" json:"object_size,omitempty"`
	CorruptionType  *uint32 `protobuf:"varint,8,opt,name=corruption_type,json=corruptionType" json:"corruption_type,omitempty"`
	UsedHttps       *bool   `protobuf:"varint,9,opt,name=used_https,json=usedHttps" json:"used_https,omitempty"`
	OcProxyDetected *bool   `protobuf:"varint,10,opt,name=oc_proxy_detected,json=ocProxyDetected" json:"oc_proxy_detected,omitempty"`
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) Reset() {
	*x = CDataPublisher_ClientContentCorruptionReport_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_datapublisher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataPublisher_ClientContentCorruptionReport_Notification) ProtoMessage() {}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_datapublisher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataPublisher_ClientContentCorruptionReport_Notification.ProtoReflect.Descriptor instead.
func (*CDataPublisher_ClientContentCorruptionReport_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_datapublisher_proto_rawDescGZIP(), []int{0}
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetDepotid() uint32 {
	if x != nil && x.Depotid != nil {
		return *x.Depotid
	}
	return 0
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetDownloadSource() string {
	if x != nil && x.DownloadSource != nil {
		return *x.DownloadSource
	}
	return ""
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetObjectid() string {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return ""
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetIsManifest() bool {
	if x != nil && x.IsManifest != nil {
		return *x.IsManifest
	}
	return false
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetObjectSize() uint64 {
	if x != nil && x.ObjectSize != nil {
		return *x.ObjectSize
	}
	return 0
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetCorruptionType() uint32 {
	if x != nil && x.CorruptionType != nil {
		return *x.CorruptionType
	}
	return 0
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetUsedHttps() bool {
	if x != nil && x.UsedHttps != nil {
		return *x.UsedHttps
	}
	return false
}

func (x *CDataPublisher_ClientContentCorruptionReport_Notification) GetOcProxyDetected() bool {
	if x != nil && x.OcProxyDetected != nil {
		return *x.OcProxyDetected
	}
	return false
}

type CDataPublisher_ClientUpdateAppJob_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                 *uint32  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotIds              []uint32 `protobuf:"varint,2,rep,name=depot_ids,json=depotIds" json:"depot_ids,omitempty"`
	AppState              *uint32  `protobuf:"varint,3,opt,name=app_state,json=appState" json:"app_state,omitempty"`
	JobAppError           *uint32  `protobuf:"varint,4,opt,name=job_app_error,json=jobAppError" json:"job_app_error,omitempty"`
	ErrorDetails          *string  `protobuf:"bytes,5,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
	JobDuration           *uint32  `protobuf:"varint,6,opt,name=job_duration,json=jobDuration" json:"job_duration,omitempty"`
	FilesValidationFailed *uint32  `protobuf:"varint,7,opt,name=files_validation_failed,json=filesValidationFailed" json:"files_validation_failed,omitempty"`
	JobBytesDownloaded    *uint64  `protobuf:"varint,8,opt,name=job_bytes_downloaded,json=jobBytesDownloaded" json:"job_bytes_downloaded,omitempty"`
	JobBytesStaged        *uint64  `protobuf:"varint,9,opt,name=job_bytes_staged,json=jobBytesStaged" json:"job_bytes_staged,omitempty"`
	BytesComitted         *uint64  `protobuf:"varint,10,opt,name=bytes_comitted,json=bytesComitted" json:"bytes_comitted,omitempty"`
	StartAppState         *uint32  `protobuf:"varint,11,opt,name=start_app_state,json=startAppState" json:"start_app_state,omitempty"`
	StatsMachineId        *uint64  `protobuf:"fixed64,12,opt,name=stats_machine_id,json=statsMachineId" json:"stats_machine_id,omitempty"`
	BranchName            *string  `protobuf:"bytes,13,opt,name=branch_name,json=branchName" json:"branch_name,omitempty"`
	TotalBytesDownloaded  *uint64  `protobuf:"varint,14,opt,name=total_bytes_downloaded,json=totalBytesDownloaded" json:"total_bytes_downloaded,omitempty"`
	TotalBytesStaged      *uint64  `protobuf:"varint,15,opt,name=total_bytes_staged,json=totalBytesStaged" json:"total_bytes_staged,omitempty"`
	TotalBytesRestored    *uint64  `protobuf:"varint,16,opt,name=total_bytes_restored,json=totalBytesRestored" json:"total_bytes_restored,omitempty"`
	IsBorrowed            *bool    `protobuf:"varint,17,opt,name=is_borrowed,json=isBorrowed" json:"is_borrowed,omitempty"`
	IsFreeWeekend         *bool    `protobuf:"varint,18,opt,name=is_free_weekend,json=isFreeWeekend" json:"is_free_weekend,omitempty"`
	TotalBytesLegacy      *uint64  `protobuf:"varint,19,opt,name=total_bytes_legacy,json=totalBytesLegacy" json:"total_bytes_legacy,omitempty"`
	TotalBytesPatched     *uint64  `protobuf:"varint,20,opt,name=total_bytes_patched,json=totalBytesPatched" json:"total_bytes_patched,omitempty"`
	TotalBytesSaved       *uint64  `protobuf:"varint,21,opt,name=total_bytes_saved,json=totalBytesSaved" json:"total_bytes_saved,omitempty"`
	CellId                *uint32  `protobuf:"varint,22,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) Reset() {
	*x = CDataPublisher_ClientUpdateAppJob_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_datapublisher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataPublisher_ClientUpdateAppJob_Notification) ProtoMessage() {}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_datapublisher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataPublisher_ClientUpdateAppJob_Notification.ProtoReflect.Descriptor instead.
func (*CDataPublisher_ClientUpdateAppJob_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_datapublisher_proto_rawDescGZIP(), []int{1}
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetDepotIds() []uint32 {
	if x != nil {
		return x.DepotIds
	}
	return nil
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetAppState() uint32 {
	if x != nil && x.AppState != nil {
		return *x.AppState
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetJobAppError() uint32 {
	if x != nil && x.JobAppError != nil {
		return *x.JobAppError
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetJobDuration() uint32 {
	if x != nil && x.JobDuration != nil {
		return *x.JobDuration
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetFilesValidationFailed() uint32 {
	if x != nil && x.FilesValidationFailed != nil {
		return *x.FilesValidationFailed
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetJobBytesDownloaded() uint64 {
	if x != nil && x.JobBytesDownloaded != nil {
		return *x.JobBytesDownloaded
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetJobBytesStaged() uint64 {
	if x != nil && x.JobBytesStaged != nil {
		return *x.JobBytesStaged
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetBytesComitted() uint64 {
	if x != nil && x.BytesComitted != nil {
		return *x.BytesComitted
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetStartAppState() uint32 {
	if x != nil && x.StartAppState != nil {
		return *x.StartAppState
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetStatsMachineId() uint64 {
	if x != nil && x.StatsMachineId != nil {
		return *x.StatsMachineId
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetTotalBytesDownloaded() uint64 {
	if x != nil && x.TotalBytesDownloaded != nil {
		return *x.TotalBytesDownloaded
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetTotalBytesStaged() uint64 {
	if x != nil && x.TotalBytesStaged != nil {
		return *x.TotalBytesStaged
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetTotalBytesRestored() uint64 {
	if x != nil && x.TotalBytesRestored != nil {
		return *x.TotalBytesRestored
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetIsBorrowed() bool {
	if x != nil && x.IsBorrowed != nil {
		return *x.IsBorrowed
	}
	return false
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetIsFreeWeekend() bool {
	if x != nil && x.IsFreeWeekend != nil {
		return *x.IsFreeWeekend
	}
	return false
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetTotalBytesLegacy() uint64 {
	if x != nil && x.TotalBytesLegacy != nil {
		return *x.TotalBytesLegacy
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetTotalBytesPatched() uint64 {
	if x != nil && x.TotalBytesPatched != nil {
		return *x.TotalBytesPatched
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetTotalBytesSaved() uint64 {
	if x != nil && x.TotalBytesSaved != nil {
		return *x.TotalBytesSaved
	}
	return 0
}

func (x *CDataPublisher_ClientUpdateAppJob_Notification) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

type CValveHWSurvey_GetSurveySchedule_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Surveydatetoken        *string `protobuf:"bytes,1,opt,name=surveydatetoken" json:"surveydatetoken,omitempty"`
	Surveydatetokenversion *uint64 `protobuf:"fixed64,2,opt,name=surveydatetokenversion" json:"surveydatetokenversion,omitempty"`
}

func (x *CValveHWSurvey_GetSurveySchedule_Request) Reset() {
	*x = CValveHWSurvey_GetSurveySchedule_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_datapublisher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CValveHWSurvey_GetSurveySchedule_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CValveHWSurvey_GetSurveySchedule_Request) ProtoMessage() {}

func (x *CValveHWSurvey_GetSurveySchedule_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_datapublisher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CValveHWSurvey_GetSurveySchedule_Request.ProtoReflect.Descriptor instead.
func (*CValveHWSurvey_GetSurveySchedule_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_datapublisher_proto_rawDescGZIP(), []int{2}
}

func (x *CValveHWSurvey_GetSurveySchedule_Request) GetSurveydatetoken() string {
	if x != nil && x.Surveydatetoken != nil {
		return *x.Surveydatetoken
	}
	return ""
}

func (x *CValveHWSurvey_GetSurveySchedule_Request) GetSurveydatetokenversion() uint64 {
	if x != nil && x.Surveydatetokenversion != nil {
		return *x.Surveydatetokenversion
	}
	return 0
}

type CValveHWSurvey_GetSurveySchedule_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Surveydatetoken        *uint32 `protobuf:"varint,1,opt,name=surveydatetoken" json:"surveydatetoken,omitempty"`
	Surveydatetokenversion *uint64 `protobuf:"fixed64,2,opt,name=surveydatetokenversion" json:"surveydatetokenversion,omitempty"`
}

func (x *CValveHWSurvey_GetSurveySchedule_Response) Reset() {
	*x = CValveHWSurvey_GetSurveySchedule_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_datapublisher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CValveHWSurvey_GetSurveySchedule_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CValveHWSurvey_GetSurveySchedule_Response) ProtoMessage() {}

func (x *CValveHWSurvey_GetSurveySchedule_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_datapublisher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CValveHWSurvey_GetSurveySchedule_Response.ProtoReflect.Descriptor instead.
func (*CValveHWSurvey_GetSurveySchedule_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_datapublisher_proto_rawDescGZIP(), []int{3}
}

func (x *CValveHWSurvey_GetSurveySchedule_Response) GetSurveydatetoken() uint32 {
	if x != nil && x.Surveydatetoken != nil {
		return *x.Surveydatetoken
	}
	return 0
}

func (x *CValveHWSurvey_GetSurveySchedule_Response) GetSurveydatetokenversion() uint64 {
	if x != nil && x.Surveydatetokenversion != nil {
		return *x.Surveydatetokenversion
	}
	return 0
}

var File_steammessages_datapublisher_proto protoreflect.FileDescriptor

var file_steammessages_datapublisher_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf3, 0x04, 0x0a, 0x39, 0x43, 0x44, 0x61, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x49, 0x0a,
	0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x68, 0x6f, 0x73, 0x74,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x82, 0xb5, 0x18, 0x18,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x20, 0x53, 0x48, 0x41, 0x20, 0x6f, 0x72, 0x20, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x20, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x43,
	0x65, 0x6c, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x4a,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x0a,
	0x69, 0x73, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x18, 0x82, 0xb5, 0x18, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x73, 0x69, 0x7a, 0x65,
	0x20, 0x69, 0x6e, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e,
	0x82, 0xb5, 0x18, 0x1a, 0x53, 0x65, 0x65, 0x20, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x64, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x20, 0x61, 0x6e, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x20, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x0f, 0x6f, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x9d, 0x07, 0x0a, 0x2e, 0x43, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4a, 0x6f, 0x62, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x6f, 0x62,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6a, 0x6f, 0x62, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6a, 0x6f, 0x62,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x28, 0x43, 0x56, 0x61, 0x6c, 0x76, 0x65,
	0x48, 0x57, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x64, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x16,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x64, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x16, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x64, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x29, 0x43, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x48,
	0x57, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x64, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x16,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x64, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x16, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x64, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0xfc, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x2e, 0x43, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x43,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4a, 0x6f, 0x62,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x27, 0x82, 0xb5, 0x18, 0x23,
	0x44, 0x61, 0x74, 0x61, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x20, 0x28,
	0x44, 0x50, 0x29, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x32, 0xac, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x48, 0x57, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x43, 0x56,
	0x61, 0x6c, 0x76, 0x65, 0x48, 0x57, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x48,
	0x57, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x49,
	0x20, 0x72, 0x75, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x1a,
	0x11, 0x82, 0xb5, 0x18, 0x0d, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x48, 0x57, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x42, 0x30, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x73, 0x74, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x90, 0x01, 0x01,
}

var (
	file_steammessages_datapublisher_proto_rawDescOnce sync.Once
	file_steammessages_datapublisher_proto_rawDescData = file_steammessages_datapublisher_proto_rawDesc
)

func file_steammessages_datapublisher_proto_rawDescGZIP() []byte {
	file_steammessages_datapublisher_proto_rawDescOnce.Do(func() {
		file_steammessages_datapublisher_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_datapublisher_proto_rawDescData)
	})
	return file_steammessages_datapublisher_proto_rawDescData
}

var file_steammessages_datapublisher_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_steammessages_datapublisher_proto_goTypes = []interface{}{
	(*CDataPublisher_ClientContentCorruptionReport_Notification)(nil), // 0: CDataPublisher_ClientContentCorruptionReport_Notification
	(*CDataPublisher_ClientUpdateAppJob_Notification)(nil),            // 1: CDataPublisher_ClientUpdateAppJob_Notification
	(*CValveHWSurvey_GetSurveySchedule_Request)(nil),                  // 2: CValveHWSurvey_GetSurveySchedule_Request
	(*CValveHWSurvey_GetSurveySchedule_Response)(nil),                 // 3: CValveHWSurvey_GetSurveySchedule_Response
	(*NoResponse)(nil), // 4: NoResponse
}
var file_steammessages_datapublisher_proto_depIdxs = []int32{
	0, // 0: DataPublisher.ClientContentCorruptionReport:input_type -> CDataPublisher_ClientContentCorruptionReport_Notification
	1, // 1: DataPublisher.ClientUpdateAppJobReport:input_type -> CDataPublisher_ClientUpdateAppJob_Notification
	2, // 2: ValveHWSurvey.GetSurveySchedule:input_type -> CValveHWSurvey_GetSurveySchedule_Request
	4, // 3: DataPublisher.ClientContentCorruptionReport:output_type -> NoResponse
	4, // 4: DataPublisher.ClientUpdateAppJobReport:output_type -> NoResponse
	3, // 5: ValveHWSurvey.GetSurveySchedule:output_type -> CValveHWSurvey_GetSurveySchedule_Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_steammessages_datapublisher_proto_init() }
func file_steammessages_datapublisher_proto_init() {
	if File_steammessages_datapublisher_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_datapublisher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataPublisher_ClientContentCorruptionReport_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_datapublisher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataPublisher_ClientUpdateAppJob_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_datapublisher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CValveHWSurvey_GetSurveySchedule_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_datapublisher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CValveHWSurvey_GetSurveySchedule_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_datapublisher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_datapublisher_proto_goTypes,
		DependencyIndexes: file_steammessages_datapublisher_proto_depIdxs,
		MessageInfos:      file_steammessages_datapublisher_proto_msgTypes,
	}.Build()
	File_steammessages_datapublisher_proto = out.File
	file_steammessages_datapublisher_proto_rawDesc = nil
	file_steammessages_datapublisher_proto_goTypes = nil
	file_steammessages_datapublisher_proto_depIdxs = nil
}
